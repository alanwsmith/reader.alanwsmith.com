{"pages": [{"id": "1Introduction", "content": "\n<body>\n\n<h2 class=\"chapter\">1 Introduction</h2>\n\n<span id=\"index-introduction\"></span>\n\n\n"}, {"id": "11Summary", "content": "\n<span id=\"Summary\"></span>\n<span id=\"Summary-1\"></span><h3 class=\"section\">1.1 Summary</h3>\n\n<span id=\"index-summary\"></span>\n\n<p>Org is a mode for keeping notes, maintaining TODO lists, and project\nplanning with a fast and effective plain-text markup language.  It\nalso is an authoring system with unique support for literate\nprogramming and reproducible research.\n</p>\n<p>Org is implemented on top of Outline mode, which makes it possible to\nkeep the content of large files well structured.  Visibility cycling\nand structure editing help to work with the tree.  Tables are easily\ncreated with a built-in table editor.  Plain text URL-like links\nconnect to websites, emails, Usenet messages, BBDB entries, and any\nfiles related to the projects.\n</p>\n<p>Org develops organizational tasks around notes files that contain\nlists or information about projects as plain text.  Project planning\nand task management make use of metadata which is part of an outline\nnode.  Based on this data, specific entries can be extracted in\nqueries and create dynamic <em>agenda views</em> that also integrate the\nEmacs calendar and diary.  Org can be used to implement many different\nproject planning schemes, such as David Allen\u2019s GTD system.\n</p>\n<p>Org files can serve as a single source authoring system with export to\nmany different formats such as HTML, LaTeX, Open Document, and\nMarkdown.  New export backends can be derived from existing ones, or\ndefined from scratch.\n</p>\n<p>Org files can include source code blocks, which makes Org uniquely\nsuited for authoring technical documents with code examples.  Org\nsource code blocks are fully functional; they can be evaluated in\nplace and their results can be captured in the file.  This makes it\npossible to create a single file reproducible research compendium.\n</p>\n<p>Org keeps simple things simple.  When first fired up, it should feel\nlike a straightforward, easy to use outliner.  Complexity is not\nimposed, but a large amount of functionality is available when needed.\nOrg is a toolbox.  Many users actually run only a\u2014very\npersonal\u2014fraction of Org\u2019s capabilities, and know that there is more\nwhenever they need it.\n</p>\n<p>All of this is achieved with strictly plain text files, the most\nportable and future-proof file format.  Org runs in Emacs.  Emacs is\none of the most widely ported programs, so that Org mode is available\non every major platform.\n</p>\n<span id=\"index-FAQ\"></span>\n<p>There is a website for Org which provides links to the newest version\nof Org, as well as additional information, frequently asked questions\n(FAQ), links to tutorials, etc.  This page is located at\n<a href=\"https://orgmode.org/\">https://orgmode.org</a>.\n</p>\n<span id=\"index-print-edition\"></span>\n<p>An earlier version (7.3) of this manual is available as a <a href=\"http://www.network-theory.co.uk/org/manual/\">paperback\nbook from Network Theory Ltd.</a>.\n</p>\n"}, {"id": "12Installation", "content": "\n<span id=\"Installation\"></span>\n<span id=\"Installation-1\"></span><h3 class=\"section\">1.2 Installation</h3>\n\n<span id=\"index-installation\"></span>\n\n<p>Org is included in all recent distributions of GNU Emacs, so you\nprobably do not need to install it.  Most users will simply activate\nOrg and begin exploring its many features.\n</p>\n<p>If, for one reason or another, you want to install Org on top of this\npre-packaged version, you can use the Emacs package system or clone\nOrg\u2019s git repository.\n</p>\n<p>We <strong>strongly recommend</strong> sticking to a single installation method.\n</p>\n<span id=\"Using-Emacs-packaging-system\"></span><span id=\"Using-Emacs-packaging-system-1\"></span><h4 class=\"subheading\">Using Emacs packaging system</h4>\n\n<p>Recent Emacs distributions include a packaging system which lets you\ninstall Elisp libraries.  You can install Org from the \u201cpackage menu\u201d,\nwith <kbd>M-x list-packages</kbd>.  See <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Package-Menu\">(emacs)Package Menu</a>.\n</p>\n<blockquote>\n<p><b>Important:</b> You need to do this in a session where no \u2018<samp>.org</samp>\u2019 file has been\nvisited, i.e., where no Org built-in function have been loaded.\nOtherwise autoload Org functions will mess up the installation.\n</p>\n</blockquote>\n\n<span id=\"Using-Org_0027s-git-repository\"></span><span id=\"Using-Org_0027s-git-repository-1\"></span><h4 class=\"subheading\">Using Org\u2019s git repository</h4>\n\n<p>You can clone Org\u2019s repository and install Org like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">$ cd ~/src/\n$ git clone https://git.savannah.gnu.org/git/emacs/org-mode.git\n$ cd org-mode/\n$ make autoloads\n</pre></div>\n\n<p>Note that in this case, \u2018<samp>make autoloads</samp>\u2019 is mandatory: it defines\nOrg\u2019s version in \u2018<samp>org-version.el</samp>\u2019 and Org\u2019s autoloads in\n\u2018<samp>org-loaddefs.el</samp>\u2019.\n</p>\n<p>Remember to add the correct load path as described in the method\nabove.\n</p>\n<p>You can also compile with \u2018<samp>make</samp>\u2019, generate the documentation with\n\u2018<samp>make doc</samp>\u2019, create a local configuration with \u2018<samp>make config</samp>\u2019 and\ninstall Org with \u2018<samp>make install</samp>\u2019.  Please run \u2018<samp>make help</samp>\u2019 to get the\nlist of compilation/installation options.\n</p>\n<p>For more detailed explanations on Org\u2019s build system, please check the\nOrg Build System page on <a href=\"https://orgmode.org/worg/dev/org-build-system.html\">Worg</a>.\n</p>\n<span id=\"Installing-Org_0027s-contributed-packages\"></span><span id=\"Installing-Org_0027s-contributed-packages-1\"></span><h4 class=\"subheading\">Installing Org\u2019s contributed packages</h4>\n\n<p>Org\u2019s repository used to contain \u2018<samp>contrib/</samp>\u2019 directory for add-ons\ncontributed by others.  As of Org 9.5, the directory has bee moved to\nthis new dedicated <a href=\"https://git.sr.ht/~bzg/org-contrib\">org-contrib</a> repository, which you can install\nseparately.\n</p>\n"}, {"id": "13Activation", "content": "\n<span id=\"Activation\"></span>\n<span id=\"Activation-1\"></span><h3 class=\"section\">1.3 Activation</h3>\n\n<span id=\"index-activation\"></span>\n<span id=\"index-autoload\"></span>\n<span id=\"index-ELPA\"></span>\n<span id=\"index-global-key-bindings\"></span>\n<span id=\"index-key-bindings_002c-global\"></span>\n\n<p>Org mode buffers need Font Lock to be turned on: this is the default\nin Emacs<a id=\"DOCF1\" href=\"https://orgmode.org/org.html#FOOT1\"><sup>1</sup></a>.\n</p>\n<p>There are compatibility issues between Org mode and some other Elisp\npackages (see <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>).  Please take the\ntime to check the list.\n</p>\n<span id=\"index-org_002dagenda\"></span>\n<span id=\"index-org_002dcapture\"></span>\n<span id=\"index-org_002dstore_002dlink\"></span>\n<p>For a better experience, the three Org commands <code>org-store-link</code>,\n<code>org-capture</code> and <code>org-agenda</code> ought to be accessible anywhere in\nEmacs, not just in Org buffers.  To that effect, you need to bind them\nto globally available keys, like the ones reserved for users (see\n<a href=\"https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Binding-Conventions\">(elisp)Key Binding Conventions</a>).  Here are suggested bindings,\nplease modify the keys to your own liking.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(global-set-key (kbd \"C-c l\") #'org-store-link)\n(global-set-key (kbd \"C-c a\") #'org-agenda)\n(global-set-key (kbd \"C-c c\") #'org-capture)\n</pre></div>\n\n<span id=\"index-Org-mode_002c-turning-on\"></span>\n<p>Files with the \u2018<samp>.org</samp>\u2019 extension use Org mode by default.  To turn on\nOrg mode in a file that does not have the extension \u2018<samp>.org</samp>\u2019, make the\nfirst line of a file look like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">MY PROJECTS    -*- mode: org; -*-\n</pre></div>\n\n\n<span id=\"index-org_002dinsert_002dmode_002dline_002din_002dempty_002dfile\"></span>\n<p>which selects Org mode for this buffer no matter what the file\u2019s name\nis.  See also the variable <code>org-insert-mode-line-in-empty-file</code>.\n</p>\n<p>Many commands in Org work on the region if the region is <em>active</em>.  To\nmake use of this, you need to have Transient Mark mode turned on,\nwhich is the default.  If you do not like it, you can create an active\nregion by using the mouse to select a region, or pressing\n<kbd>C-<span class=\"key\">SPC</span></kbd> twice before moving point.\n</p>\n"}, {"id": "14Feedback", "content": "\n<span id=\"Feedback\"></span>\n<span id=\"Feedback-1\"></span><h3 class=\"section\">1.4 Feedback</h3>\n\n<span id=\"index-feedback\"></span>\n<span id=\"index-bug-reports\"></span>\n<span id=\"index-reporting-a-bug\"></span>\n<span id=\"index-maintainer\"></span>\n<span id=\"index-author\"></span>\n\n<p>If you find problems with Org, or if you have questions, remarks, or\nideas about it, please send an email to the Org mailing list\n<a href=\"mailto:emacs-orgmode@gnu.org\">emacs-orgmode@gnu.org</a>.  You can subscribe to the list <a href=\"https://lists.gnu.org/mailman/listinfo/emacs-orgmode\">from this\nweb page</a>.  If you are not a member of the mailing list, your mail will\nbe passed to the list after a moderator has approved it<a id=\"DOCF2\" href=\"https://orgmode.org/org.html#FOOT2\"><sup>2</sup></a>.  We ask\nyou to read and respect the <a href=\"https://www.gnu.org/philosophy/kind-communication.html\">GNU Kind Communications Guidelines</a> when\nsending messages on this mailing list.\n</p>\n<span id=\"index-org_002dversion\"></span>\n<span id=\"index-org_002dsubmit_002dbug_002dreport\"></span>\n<p>For bug reports, please first try to reproduce the bug with the latest\nversion of Org available\u2014if you are running an outdated version, it\nis quite possible that the bug has been fixed already.  If the bug\npersists, prepare a report and provide as much information as\npossible, including the version information of Emacs (<kbd>M-x emacs-version</kbd>) and Org (<kbd>M-x org-version</kbd>), as well as\nthe Org related setup in the Emacs init file.  The easiest way to do\nthis is to use the command\n</p>\n<div class=\"example\">\n<pre class=\"example\">M-x org-submit-bug-report &lt;RET&gt;\n</pre></div>\n\n\n<p>which puts all this information into an Emacs mail buffer so that you\nonly need to add your description.  If you are not sending the Email\nfrom within Emacs, please copy and paste the content into your Email\nprogram.\n</p>\n<p>Sometimes you might face a problem due to an error in your Emacs or\nOrg mode setup.  Before reporting a bug, it is very helpful to start\nEmacs with minimal customizations and reproduce the problem.  Doing so\noften helps you determine if the problem is with your customization or\nwith Org mode itself.  You can start a typical minimal session with\na command like the example below.\n</p>\n<div class=\"example\">\n<pre class=\"example\">$ emacs -Q -l /path/to/minimal-org.el\n</pre></div>\n\n\n<p>However if you are using Org mode as distributed with Emacs, a minimal\nsetup is not necessary.  In that case it is sufficient to start Emacs\nas \u2018<samp>emacs -Q</samp>\u2019.  The \u2018<samp>minimal-org.el</samp>\u2019 setup file can have contents as\nshown below.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">;;; Minimal setup to load latest `org-mode'.\n\n;; Activate debugging.\n(setq debug-on-error t\n      debug-on-signal nil\n      debug-on-quit nil)\n\n;; Add latest Org mode to load path.\n(add-to-list 'load-path (expand-file-name \"/path/to/org-mode/lisp\"))\n</pre></div>\n\n<p>If an error occurs, a \u201cbacktrace\u201d can be very useful\u2014see below on\nhow to create one.  Often a small example file helps, along with clear\ninformation about:\n</p>\n<ol>\n<li> What exactly did you do?\n</li><li> What did you expect to happen?\n</li><li> What happened instead?\n</li></ol>\n\n<p>Thank you for helping to improve this program.\n</p>\n<span id=\"How-to-create-a-useful-backtrace\"></span><span id=\"How-to-create-a-useful-backtrace-1\"></span><h4 class=\"subheading\">How to create a useful backtrace</h4>\n\n<span id=\"index-backtrace-of-an-error\"></span>\n<p>If working with Org produces an error with a message you do not\nunderstand, you may have hit a bug.  The best way to report this is by\nproviding, in addition to what was mentioned above, a backtrace.  This\nis information from the built-in debugger about where and how the\nerror occurred.  Here is how to produce a useful backtrace:\n</p>\n<ol>\n<li> Reload uncompiled versions of all Org mode Lisp files.  The\nbacktrace contains much more information if it is produced with\nuncompiled code.  To do this, use\n\n<div class=\"example\">\n<pre class=\"example\">C-u M-x org-reload &lt;RET&gt;\n</pre></div>\n\n\n<p>or, from the menu: Org \u2192 Refresh/Reload \u2192 Reload Org uncompiled.\n</p>\n</li><li> Then, activate the debugger:\n\n<div class=\"example\">\n<pre class=\"example\">M-x toggle-debug-on-error &lt;RET&gt;\n</pre></div>\n\n\n<p>or, from the menu: Options \u2192 Enter Debugger on Error.\n</p>\n</li><li> Do whatever you have to do to hit the error.  Do not forget to\ndocument the steps you take.\n\n</li><li> When you hit the error, a \u2018<samp>*Backtrace*</samp>\u2019 buffer appears on the\nscreen.  Save this buffer to a file\u2014for example using <kbd>C-x C-w</kbd>\u2014and attach it to your bug report.\n</li></ol>\n\n"}, {"id": "15TypesettingConventionsUsedinthisManual", "content": "\n<span id=\"Conventions\"></span>\n<span id=\"Typesetting-Conventions-Used-in-this-Manual\"></span><h3 class=\"section\">1.5 Typesetting Conventions Used in this Manual</h3>\n\n\n\n<span id=\"TODO-keywords-tags-properties-etc\"></span><span id=\"TODO-keywords_002c-tags_002c-properties_002c-etc_002e\"></span><h4 class=\"subheading\">TODO keywords, tags, properties, etc.</h4>\n\n<p>Org uses various syntactical elements: TODO keywords, tags, property\nnames, keywords, blocks, etc.  In this manual we use the following\nconventions:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>TODO</samp>\u2019</dt>\n<dt>\u2018<samp>WAITING</samp>\u2019</dt>\n<dd><p>TODO keywords are written with all capitals, even if they are\nuser-defined.\n</p>\n</dd>\n<dt>\u2018<samp>boss</samp>\u2019</dt>\n<dt>\u2018<samp>ARCHIVE</samp>\u2019</dt>\n<dd><p>Tags are case-sensitive.  User-defined tags are usually written in\nlowercase; built-in tags with special meaning are written as they\nshould appear in the document, usually with all capitals.\n</p>\n</dd>\n<dt>\u2018<samp>Release</samp>\u2019</dt>\n<dt>\u2018<samp>PRIORITY</samp>\u2019</dt>\n<dd><p>User-defined properties are capitalized; built-in properties with\nspecial meaning are written with all capitals.\n</p>\n</dd>\n<dt>\u2018<samp>TITLE</samp>\u2019</dt>\n<dt>\u2018<samp>BEGIN</samp>\u2019 \u2026 \u2018<samp>END</samp>\u2019</dt>\n<dd><p>Keywords and blocks are written in uppercase to enhance their\nreadability, but you can use lowercase in your Org files.\n</p></dd>\n</dl>\n\n<span id=\"Key-bindings-and-commands\"></span><span id=\"Key-bindings-and-commands-1\"></span><h4 class=\"subheading\">Key bindings and commands</h4>\n\n<p>The manual lists both the keys and the corresponding commands for\naccessing a functionality.  Org mode often uses the same key for\ndifferent functions, depending on context.  The command that is bound\nto such keys has a generic name, like <code>org-metaright</code>.  In the manual\nwe will, wherever possible, give the function that is internally\ncalled by the generic command.  For example, in the chapter on\ndocument structure, <kbd>M-<span class=\"key\">RIGHT</span></kbd> will be listed to call\n<code>org-do-demote</code>, while in the chapter on tables, it will be listed to\ncall <code>org-table-move-column-right</code>.\n</p>\n"}, {"id": "2DocumentStructure", "content": "\n<span id=\"Document-Structure\"></span>\n<span id=\"Document-Structure-1\"></span><h2 class=\"chapter\">2 Document Structure</h2>\n\n<span id=\"index-document-structure\"></span>\n<span id=\"index-structure-of-document\"></span>\n<p>Org is an outliner.  Outlines allow a document to be organized in\na hierarchical structure, which, least for me, is the best\nrepresentation of notes and thoughts.  An overview of this structure\nis achieved by folding, i.e., hiding large parts of the document to\nshow only the general document structure and the parts currently being\nworked on.  Org greatly simplifies the use of outlines by compressing\nthe entire show and hide functionalities into a single command,\n<code>org-cycle</code>, which is bound to the <kbd><span class=\"key\">TAB</span></kbd> key.\n</p>\n\n\n"}, {"id": "21Headlines", "content": "\n<span id=\"Headlines\"></span>\n<span id=\"Headlines-1\"></span><h3 class=\"section\">2.1 Headlines</h3>\n\n<span id=\"index-headlines\"></span>\n<span id=\"index-outline-tree\"></span>\n<span id=\"index-org_002dspecial_002dctrl_002da_002fe\"></span>\n<span id=\"index-org_002dspecial_002dctrl_002dk\"></span>\n<span id=\"index-org_002dctrl_002dk_002dprotect_002dsubtree\"></span>\n\n<p>Headlines define the structure of an outline tree.  Org headlines\nstart on the left margin<a id=\"DOCF3\" href=\"https://orgmode.org/org.html#FOOT3\"><sup>3</sup></a> with one or more stars followed by\na space.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Top level headline\n** Second level\n*** Third level\n    some text\n*** Third level\n    more text\n* Another top level headline\n</pre></div>\n\n<span id=\"index-org_002dfootnote_002dsection\"></span>\n<p>The name defined in <code>org-footnote-section</code> is reserved.  Do not use it\nas a title for your own headings.\n</p>\n<p>Some people find the many stars too noisy and would prefer an outline\nthat has whitespace followed by a single star as headline starters.\nThis can be achieved using a Org Indent minor mode.  See <a href=\"https://orgmode.org/org.html#Clean-View\">Clean View</a> for more information.\n</p>\n<p>Headlines are not numbered.  However, you may want to dynamically\nnumber some, or all, of them.  See <a href=\"https://orgmode.org/org.html#Dynamic-Headline-Numbering\">Dynamic Headline Numbering</a>.\n</p>\n<span id=\"index-org_002dcycle_002dseparator_002dlines\"></span>\n<p>An empty line after the end of a subtree is considered part of it and\nis hidden when the subtree is folded.  However, if you leave at least\ntwo empty lines, one empty line remains visible after folding the\nsubtree, in order to structure the collapsed view.  See the variable\n<code>org-cycle-separator-lines</code> to modify this behavior.\n</p>\n"}, {"id": "22VisibilityCycling", "content": "\n<span id=\"Visibility-Cycling\"></span>\n<span id=\"Visibility-Cycling-1\"></span><h3 class=\"section\">2.2 Visibility Cycling</h3>\n\n<span id=\"index-cycling_002c-visibility\"></span>\n<span id=\"index-visibility-cycling\"></span>\n<span id=\"index-trees_002c-visibility\"></span>\n<span id=\"index-show-hidden-text\"></span>\n<span id=\"index-hide-text\"></span>\n\n\n\n"}, {"id": "221Globalandlocalcycling", "content": "\n<span id=\"Global-and-local-cycling\"></span>\n<span id=\"Global-and-local-cycling-1\"></span><h4 class=\"subsection\">2.2.1 Global and local cycling</h4>\n\n<span id=\"index-subtree-visibility-states\"></span>\n<span id=\"index-subtree-cycling\"></span>\n<span id=\"index-folded_002c-subtree-visibility-state\"></span>\n<span id=\"index-children_002c-subtree-visibility-state\"></span>\n<span id=\"index-subtree_002c-subtree-visibility-state\"></span>\n\n<p>Outlines make it possible to hide parts of the text in the buffer.\nOrg uses just two commands, bound to <kbd><span class=\"key\">TAB</span></kbd> and\n<kbd>S-<span class=\"key\">TAB</span></kbd> to change the visibility in the buffer.\n</p>\n<dl compact=\"compact\">\n<dt><kbd><span class=\"key\">TAB</span></kbd> (<code>org-cycle</code>)</dt>\n<dd><span id=\"index-TAB\"></span>\n<span id=\"index-org_002dcycle\"></span>\n<p><em>Subtree cycling</em>: Rotate current subtree among the states\n</p>\n<div class=\"example\">\n<pre class=\"example\">,-&gt; FOLDED -&gt; CHILDREN -&gt; SUBTREE --.\n'-----------------------------------'\n</pre></div>\n\n<span id=\"index-org_002dcycle_002demulate_002dtab\"></span>\n<p>Point must be on a headline for this to work<a id=\"DOCF4\" href=\"https://orgmode.org/org.html#FOOT4\"><sup>4</sup></a>.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">TAB</span></kbd> (<code>org-global-cycle</code>)</dt>\n<dt><kbd>C-u <span class=\"key\">TAB</span></kbd></dt>\n<dd><span id=\"index-global-visibility-states\"></span>\n<span id=\"index-global-cycling\"></span>\n<span id=\"index-overview_002c-global-visibility-state\"></span>\n<span id=\"index-contents_002c-global-visibility-state\"></span>\n<span id=\"index-show-all_002c-global-visibility-state\"></span>\n<span id=\"index-C_002du-TAB\"></span>\n<span id=\"index-S_002dTAB\"></span>\n<span id=\"index-org_002dglobal_002dcycle\"></span>\n<p><em>Global cycling</em>: Rotate the entire buffer among the states\n</p>\n<div class=\"example\">\n<pre class=\"example\">,-&gt; OVERVIEW -&gt; CONTENTS -&gt; SHOW ALL --.\n'--------------------------------------'\n</pre></div>\n\n<p>When <kbd>S-<span class=\"key\">TAB</span></kbd> is called with a numeric prefix argument\n<var>N</var>, view contents only up to headlines of level\n<var>N</var>.\n</p>\n<p>Note that inside tables (see <a href=\"https://orgmode.org/org.html#Tables\">Tables</a>), <kbd>S-<span class=\"key\">TAB</span></kbd> jumps to the\nprevious field instead.\n</p>\n<span id=\"index-org_002dcycle_002dglobal_002dat_002dbob\"></span>\n<p>You can run global cycling using <kbd><span class=\"key\">TAB</span></kbd> only if point is at\nthe very beginning of the buffer, but not on a headline, and\n<code>org-cycle-global-at-bob</code> is set to a non-<code>nil</code> value.\n</p>\n</dd>\n<dt><kbd>C-u C-u <span class=\"key\">TAB</span></kbd> (<code>org-set-startup-visibility</code>)</dt>\n<dd><span id=\"index-startup-visibility\"></span>\n<span id=\"index-C_002du-C_002du-TAB\"></span>\n<span id=\"index-org_002dset_002dstartup_002dvisibility\"></span>\n<p>Switch back to the startup visibility of the buffer (see <a href=\"https://orgmode.org/org.html#Initial-visibility\">Initial visibility</a>).\n</p>\n</dd>\n<dt><kbd>C-u C-u C-u <span class=\"key\">TAB</span></kbd> (<code>outline-show-all</code>)</dt>\n<dd><span id=\"index-show-all_002c-command\"></span>\n<span id=\"index-C_002du-C_002du-C_002du-TAB\"></span>\n<span id=\"index-outline_002dshow_002dall\"></span>\n<p>Show all, including drawers.\n</p>\n</dd>\n<dt><kbd>C-c C-r</kbd> (<code>org-reveal</code>)</dt>\n<dd><span id=\"index-revealing-context\"></span>\n<span id=\"index-C_002dc-C_002dr\"></span>\n<span id=\"index-org_002dreveal\"></span>\n<p>Reveal context around point, showing the current entry, the\nfollowing heading and the hierarchy above.  It is useful for working\nnear a location that has been exposed by a sparse tree command (see\n<a href=\"https://orgmode.org/org.html#Sparse-Trees\">Sparse Trees</a>) or an agenda command (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).  With a prefix argument, show, on each level, all sibling\nheadings.  With a double prefix argument, also show the entire\nsubtree of the parent.\n</p>\n</dd>\n<dt><kbd>C-c C-k</kbd> (<code>outline-show-branches</code>)</dt>\n<dd><span id=\"index-show-branches_002c-command\"></span>\n<span id=\"index-C_002dc-C_002dk\"></span>\n<span id=\"index-outline_002dshow_002dbranches\"></span>\n<p>Expose all the headings of the subtree, but not their bodies.\n</p>\n</dd>\n<dt><kbd>C-c <span class=\"key\">TAB</span></kbd> (<code>outline-show-children</code>)</dt>\n<dd><span id=\"index-show-children_002c-command\"></span>\n<span id=\"index-C_002dc-TAB\"></span>\n<span id=\"index-outline_002dshow_002dchildren\"></span>\n<p>Expose all direct children of the subtree.  With a numeric prefix\nargument <var>N</var>, expose all children down to level\n<var>N</var>.\n</p>\n</dd>\n<dt><kbd>C-c C-x b</kbd> (<code>org-tree-to-indirect-buffer</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-b\"></span>\n<span id=\"index-org_002dtree_002dto_002dindirect_002dbuffer\"></span>\n<p>Show the current subtree in an indirect buffer<a id=\"DOCF5\" href=\"https://orgmode.org/org.html#FOOT5\"><sup>5</sup></a>.  With\na numeric prefix argument <var>N</var>, go up to level <var>N</var>\nand then take that tree.  If <var>N</var> is negative then go up\nthat many levels.  With a <kbd>C-u</kbd> prefix, do not remove the\npreviously used indirect buffer.\n</p>\n</dd>\n<dt><kbd>C-c C-x v</kbd> (<code>org-copy-visible</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-v\"></span>\n<span id=\"index-org_002dcopy_002dvisible\"></span>\n<p>Copy the <em>visible</em> text in the region into the kill ring.\n</p></dd>\n</dl>\n\n"}, {"id": "222Initialvisibility", "content": "\n<span id=\"Initial-visibility\"></span>\n<span id=\"Initial-visibility-1\"></span><h4 class=\"subsection\">2.2.2 Initial visibility</h4>\n\n<span id=\"index-org_002dstartup_002dfolded\"></span>\n<p>When Emacs first visits an Org file, the global state is set to\n<code>showeverything</code>, i.e., all file content is visible<a id=\"DOCF6\" href=\"https://orgmode.org/org.html#FOOT6\"><sup>6</sup></a>.  This can\nbe configured through the variable <code>org-startup-folded</code>, or on\na per-file basis by adding one of the following lines anywhere in the\nbuffer:\n</p>\n<span id=\"index-STARTUP_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: overview\n#+STARTUP: content\n#+STARTUP: showall\n#+STARTUP: show2levels\n#+STARTUP: show3levels\n#+STARTUP: show4levels\n#+STARTUP: show5levels\n#+STARTUP: showeverything\n</pre></div>\n\n<span id=\"index-VISIBILITY_002c-property\"></span>\n<p>Furthermore, any entries with a \u2018<samp>VISIBILITY</samp>\u2019 property (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>) get their visibility adapted accordingly.  Allowed values\nfor this property are \u2018<samp>folded</samp>\u2019, \u2018<samp>children</samp>\u2019, \u2018<samp>content</samp>\u2019, and \u2018<samp>all</samp>\u2019.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-u C-u <span class=\"key\">TAB</span></kbd> (<code>org-set-startup-visibility</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-TAB-1\"></span>\n<span id=\"index-org_002dset_002dstartup_002dvisibility-1\"></span>\n<p>Switch back to the startup visibility of the buffer, i.e., whatever\nis requested by startup options and \u2018<samp>VISIBILITY</samp>\u2019 properties in\nindividual entries.\n</p></dd>\n</dl>\n\n"}, {"id": "223Catchinginvisibleedits", "content": "\n<span id=\"Catching-invisible-edits\"></span>\n<span id=\"Catching-invisible-edits-1\"></span><h4 class=\"subsection\">2.2.3 Catching invisible edits</h4>\n\n<span id=\"index-edits_002c-catching-invisible\"></span>\n\n<span id=\"index-org_002dcatch_002dinvisible_002dedits\"></span>\n<p>Sometimes you may inadvertently edit an invisible part of the buffer\nand be confused on what has been edited and how to undo the mistake.\nSetting <code>org-catch-invisible-edits</code> to non-<code>nil</code> helps preventing\nthis.  See the docstring of this option on how Org should catch\ninvisible edits and process them.\n</p>\n"}, {"id": "23Motion", "content": "\n<span id=\"Motion\"></span>\n<span id=\"Motion-1\"></span><h3 class=\"section\">2.3 Motion</h3>\n\n<span id=\"index-motion_002c-between-headlines\"></span>\n<span id=\"index-jumping_002c-to-headlines\"></span>\n<span id=\"index-headline-navigation\"></span>\n\n<p>The following commands jump to other headlines in the buffer.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-n</kbd> (<code>org-next-visible-heading</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dn\"></span>\n<span id=\"index-org_002dnext_002dvisible_002dheading\"></span>\n<p>Next heading.\n</p>\n</dd>\n<dt><kbd>C-c C-p</kbd> (<code>org-previous-visible-heading</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dp\"></span>\n<span id=\"index-org_002dprevious_002dvisible_002dheading\"></span>\n<p>Previous heading.\n</p>\n</dd>\n<dt><kbd>C-c C-f</kbd> (<code>org-forward-heading-same-level</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002df\"></span>\n<span id=\"index-org_002dforward_002dheading_002dsame_002dlevel\"></span>\n<p>Next heading same level.\n</p>\n</dd>\n<dt><kbd>C-c C-b</kbd> (<code>org-backward-heading-same-level</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002db\"></span>\n<span id=\"index-org_002dbackward_002dheading_002dsame_002dlevel\"></span>\n<p>Previous heading same level.\n</p>\n</dd>\n<dt><kbd>C-c C-u</kbd> (<code>outline-up-heading</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002du\"></span>\n<span id=\"index-outline_002dup_002dheading\"></span>\n<p>Backward to higher level heading.\n</p>\n</dd>\n<dt><kbd>C-c C-j</kbd> (<code>org-goto</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dj\"></span>\n<span id=\"index-org_002dgoto\"></span>\n<span id=\"index-org_002dgoto_002dauto_002disearch\"></span>\n<p>Jump to a different place without changing the current outline\nvisibility.  Shows the document structure in a temporary buffer,\nwhere you can use the following keys to find your destination:\n</p>\n<table>\n<tbody><tr><td width=\"30%\"><kbd><span class=\"key\">TAB</span></kbd></td><td width=\"70%\">Cycle visibility.</td></tr>\n<tr><td width=\"30%\"><kbd><span class=\"key\">DOWN</span></kbd> / <kbd><span class=\"key\">UP</span></kbd></td><td width=\"70%\">Next/previous visible headline.</td></tr>\n<tr><td width=\"30%\"><kbd><span class=\"key\">RET</span></kbd></td><td width=\"70%\">Select this location.</td></tr>\n<tr><td width=\"30%\"><kbd>/</kbd></td><td width=\"70%\">Do a Sparse-tree search</td></tr>\n</tbody></table>\n\n<p>The following keys work if you turn off <code>org-goto-auto-isearch</code>\n</p>\n<table>\n<tbody><tr><td width=\"30%\"><kbd>n</kbd> / <kbd>p</kbd></td><td width=\"70%\">Next/previous visible headline.</td></tr>\n<tr><td width=\"30%\"><kbd>f</kbd> / <kbd>b</kbd></td><td width=\"70%\">Next/previous headline same level.</td></tr>\n<tr><td width=\"30%\"><kbd>u</kbd></td><td width=\"70%\">One level up.</td></tr>\n<tr><td width=\"30%\"><kbd>0</kbd> \u2026 <kbd>9</kbd></td><td width=\"70%\">Digit argument.</td></tr>\n<tr><td width=\"30%\"><kbd>q</kbd></td><td width=\"70%\">Quit.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dgoto_002dinterface\"></span>\n<p>See also the variable <code>org-goto-interface</code>.\n</p></dd>\n</dl>\n\n"}, {"id": "24StructureEditing", "content": "\n<span id=\"Structure-Editing\"></span>\n<span id=\"Structure-Editing-1\"></span><h3 class=\"section\">2.4 Structure Editing</h3>\n\n<span id=\"index-structure-editing\"></span>\n<span id=\"index-headline_002c-promotion-and-demotion\"></span>\n<span id=\"index-promotion_002c-of-subtrees\"></span>\n<span id=\"index-demotion_002c-of-subtrees\"></span>\n<span id=\"index-subtree_002c-cut-and-paste\"></span>\n<span id=\"index-pasting_002c-of-subtrees\"></span>\n<span id=\"index-cutting_002c-of-subtrees\"></span>\n<span id=\"index-copying_002c-of-subtrees\"></span>\n<span id=\"index-sorting_002c-of-subtrees\"></span>\n<span id=\"index-subtrees_002c-cut-and-paste\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>M-<span class=\"key\">RET</span></kbd> (<code>org-meta-return</code>)</dt>\n<dd><span id=\"index-M_002dRET\"></span>\n<span id=\"index-org_002dmeta_002dreturn\"></span>\n<span id=\"index-org_002dM_002dRET_002dmay_002dsplit_002dline\"></span>\n<p>Insert a new heading, item or row.\n</p>\n<p>If the command is used at the <em>beginning</em> of a line, and if there is\na heading or a plain list item (see <a href=\"https://orgmode.org/org.html#Plain-Lists\">Plain Lists</a>) at point, the new\nheading/item is created <em>before</em> the current line.  When used at the\nbeginning of a regular line of text, turn that line into a heading.\n</p>\n<p>When this command is used in the middle of a line, the line is split\nand the rest of the line becomes the new item or headline.  If you\ndo not want the line to be split, customize\n<code>org-M-RET-may-split-line</code>.\n</p>\n<p>Calling the command with a <kbd>C-u</kbd> prefix unconditionally\ninserts a new heading at the end of the current subtree, thus\npreserving its contents.  With a double <kbd>C-u C-u</kbd> prefix,\nthe new heading is created at the end of the parent subtree instead.\n</p>\n</dd>\n<dt><kbd>C-<span class=\"key\">RET</span></kbd> (<code>org-insert-heading-respect-content</code>)</dt>\n<dd><span id=\"index-C_002dRET\"></span>\n<span id=\"index-org_002dinsert_002dheading_002drespect_002dcontent\"></span>\n<p>Insert a new heading at the end of the current subtree.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">RET</span></kbd> (<code>org-insert-todo-heading</code>)</dt>\n<dd><span id=\"index-M_002dS_002dRET\"></span>\n<span id=\"index-org_002dinsert_002dtodo_002dheading\"></span>\n<span id=\"index-org_002dtreat_002dinsert_002dtodo_002dheading_002das_002dstate_002dchange\"></span>\n<p>Insert new TODO entry with same level as current heading.  See also\nthe variable <code>org-treat-insert-todo-heading-as-state-change</code>.\n</p>\n</dd>\n<dt><kbd>C-S-<span class=\"key\">RET</span></kbd> (<code>org-insert-todo-heading-respect-content</code>)</dt>\n<dd><span id=\"index-C_002dS_002dRET\"></span>\n<span id=\"index-org_002dinsert_002dtodo_002dheading_002drespect_002dcontent\"></span>\n<p>Insert new TODO entry with same level as current heading.  Like\n<kbd>C-<span class=\"key\">RET</span></kbd>, the new headline is inserted after the current\nsubtree.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">TAB</span></kbd> (<code>org-cycle</code>)</dt>\n<dd><span id=\"index-TAB-1\"></span>\n<span id=\"index-org_002dcycle-1\"></span>\n<p>In a new entry with no text yet, the first <kbd><span class=\"key\">TAB</span></kbd> demotes\nthe entry to become a child of the previous one.  The next\n<kbd><span class=\"key\">TAB</span></kbd> makes it a parent, and so on, all the way to top\nlevel.  Yet another <kbd><span class=\"key\">TAB</span></kbd>, and you are back to the initial\nlevel.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">LEFT</span></kbd> (<code>org-do-promote</code>)</dt>\n<dt><kbd>M-<span class=\"key\">RIGHT</span></kbd> (<code>org-do-demote</code>)</dt>\n<dd><span id=\"index-M_002dLEFT\"></span>\n<span id=\"index-org_002ddo_002dpromote\"></span>\n<span id=\"index-M_002dRIGHT\"></span>\n<span id=\"index-org_002ddo_002ddemote\"></span>\n<p>Promote or demote current heading by one level.\n</p>\n<span id=\"index-region_002c-active\"></span>\n<span id=\"index-active-region\"></span>\n<span id=\"index-transient-mark-mode\"></span>\n<p>When there is an active region\u2014i.e., when Transient Mark mode is\nactive\u2014promotion and demotion work on all headlines in the region.\nTo select a region of headlines, it is best to place both point and\nmark at the beginning of a line, mark at the beginning of the first\nheadline, and point at the line just after the last headline to\nchange.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">LEFT</span></kbd> (<code>org-promote-subtree</code>)</dt>\n<dd><span id=\"index-M_002dS_002dLEFT\"></span>\n<span id=\"index-org_002dpromote_002dsubtree\"></span>\n<p>Promote the current subtree by one level.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">RIGHT</span></kbd> (<code>org-demote-subtree</code>)</dt>\n<dd><span id=\"index-M_002dS_002dRIGHT\"></span>\n<span id=\"index-org_002ddemote_002dsubtree\"></span>\n<p>Demote the current subtree by one level.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">UP</span></kbd> (<code>org-move-subtree-up</code>)</dt>\n<dd><span id=\"index-M_002dUP\"></span>\n<span id=\"index-org_002dmove_002dsubtree_002dup\"></span>\n<p>Move subtree up, i.e., swap with previous subtree of same level.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">DOWN</span></kbd> (<code>org-move-subtree-down</code>)</dt>\n<dd><span id=\"index-M_002dDOWN\"></span>\n<span id=\"index-org_002dmove_002dsubtree_002ddown\"></span>\n<p>Move subtree down, i.e., swap with next subtree of same level.\n</p>\n</dd>\n<dt><kbd>C-c @</kbd> (<code>org-mark-subtree</code>)</dt>\n<dd><span id=\"index-C_002dc-_0040\"></span>\n<span id=\"index-org_002dmark_002dsubtree\"></span>\n<p>Mark the subtree at point.  Hitting repeatedly marks subsequent\nsubtrees of the same level as the marked subtree.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-w</kbd> (<code>org-cut-subtree</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dw\"></span>\n<span id=\"index-org_002dcut_002dsubtree\"></span>\n<p>Kill subtree, i.e., remove it from buffer but save in kill ring.\nWith a numeric prefix argument N, kill N sequential subtrees.\n</p>\n</dd>\n<dt><kbd>C-c C-x M-w</kbd> (<code>org-copy-subtree</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-M_002dw\"></span>\n<span id=\"index-org_002dcopy_002dsubtree\"></span>\n<p>Copy subtree to kill ring.  With a numeric prefix argument N, copy\nthe N sequential subtrees.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-y</kbd> (<code>org-paste-subtree</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dy\"></span>\n<span id=\"index-org_002dpaste_002dsubtree\"></span>\n<p>Yank subtree from kill ring.  This does modify the level of the\nsubtree to make sure the tree fits in nicely at the yank position.\nThe yank level can also be specified with a numeric prefix argument,\nor by yanking after a headline marker like \u2018<samp>****</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>C-y</kbd> (<code>org-yank</code>)</dt>\n<dd><span id=\"index-C_002dy\"></span>\n<span id=\"index-org_002dyank\"></span>\n<span id=\"index-org_002dyank_002dadjusted_002dsubtrees\"></span>\n<span id=\"index-org_002dyank_002dfolded_002dsubtrees\"></span>\n<p>Depending on the variables <code>org-yank-adjusted-subtrees</code> and\n<code>org-yank-folded-subtrees</code>, Org\u2019s internal <code>yank</code> command pastes\nsubtrees folded and in a clever way, using the same command as\n<kbd>C-c C-x C-y</kbd>.  With the default settings, no level\nadjustment takes place, but the yanked tree is folded unless doing\nso would swallow text previously visible.  Any prefix argument to\nthis command forces a normal <code>yank</code> to be executed, with the prefix\npassed along.  A good way to force a normal yank is <kbd>C-u C-y</kbd>.  If you use <code>yank-pop</code> after a yank, it yanks previous kill\nitems plainly, without adjustment and folding.\n</p>\n</dd>\n<dt><kbd>C-c C-x c</kbd> (<code>org-clone-subtree-with-time-shift</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-c\"></span>\n<span id=\"index-org_002dclone_002dsubtree_002dwith_002dtime_002dshift\"></span>\n<p>Clone a subtree by making a number of sibling copies of it.  You are\nprompted for the number of copies to make, and you can also specify\nif any timestamps in the entry should be shifted.  This can be\nuseful, for example, to create a number of tasks related to a series\nof lectures to prepare.  For more details, see the docstring of the\ncommand <code>org-clone-subtree-with-time-shift</code>.\n</p>\n</dd>\n<dt><kbd>C-c C-w</kbd> (<code>org-refile</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dw\"></span>\n<span id=\"index-org_002drefile\"></span>\n<p>Refile entry or region to a different location.  See <a href=\"https://orgmode.org/org.html#Refile-and-Copy\">Refile and Copy</a>.\n</p>\n</dd>\n<dt><kbd>C-c ^</kbd> (<code>org-sort</code>)</dt>\n<dd><span id=\"index-C_002dc-_005e\"></span>\n<span id=\"index-org_002dsort\"></span>\n<p>Sort same-level entries.  When there is an active region, all\nentries in the region are sorted.  Otherwise the children of the\ncurrent headline are sorted.  The command prompts for the sorting\nmethod, which can be alphabetically, numerically, by time\u2014first\ntimestamp with active preferred, creation time, scheduled time,\ndeadline time\u2014by priority, by TODO keyword\u2014in the sequence the\nkeywords have been defined in the setup\u2014or by the value of\na property.  Reverse sorting is possible as well.  You can also\nsupply your own function to extract the sorting key.  With\na <kbd>C-u</kbd> prefix, sorting is case-sensitive.\n</p>\n</dd>\n<dt><kbd>C-x n s</kbd> (<code>org-narrow-to-subtree</code>)</dt>\n<dd><span id=\"index-C_002dx-n-s\"></span>\n<span id=\"index-org_002dnarrow_002dto_002dsubtree\"></span>\n<p>Narrow buffer to current subtree.\n</p>\n</dd>\n<dt><kbd>C-x n b</kbd> (<code>org-narrow-to-block</code>)</dt>\n<dd><span id=\"index-C_002dx-n-b\"></span>\n<span id=\"index-org_002dnarrow_002dto_002dblock\"></span>\n<p>Narrow buffer to current block.\n</p>\n</dd>\n<dt><kbd>C-x n w</kbd> (<code>widen</code>)</dt>\n<dd><span id=\"index-C_002dx-n-w\"></span>\n<span id=\"index-widen\"></span>\n<p>Widen buffer to remove narrowing.\n</p>\n</dd>\n<dt><kbd>C-c *</kbd> (<code>org-toggle-heading</code>)</dt>\n<dd><span id=\"index-C_002dc-_002a\"></span>\n<span id=\"index-org_002dtoggle_002dheading\"></span>\n<p>Turn a normal line or plain list item into a headline\u2014so that it\nbecomes a subheading at its location.  Also turn a headline into\na normal line by removing the stars.  If there is an active region,\nturn all lines in the region into headlines.  If the first line in\nthe region was an item, turn only the item lines into headlines.\nFinally, if the first line is a headline, remove the stars from all\nheadlines in the region.\n</p></dd>\n</dl>\n\n<p>Note that when point is inside a table (see <a href=\"https://orgmode.org/org.html#Tables\">Tables</a>), the Meta-Cursor\nkeys have different functionality.\n</p>\n"}, {"id": "25SparseTrees", "content": "\n<span id=\"Sparse-Trees\"></span>\n<span id=\"Sparse-Trees-1\"></span><h3 class=\"section\">2.5 Sparse Trees</h3>\n\n<span id=\"index-sparse-trees\"></span>\n<span id=\"index-trees_002c-sparse\"></span>\n<span id=\"index-folding_002c-sparse-trees\"></span>\n<span id=\"index-occur_002c-command\"></span>\n\n<span id=\"index-org_002dshow_002dcontext_002ddetail\"></span>\n<p>An important feature of Org mode is the ability to construct <em>sparse\ntrees</em> for selected information in an outline tree, so that the entire\ndocument is folded as much as possible, but the selected information\nis made visible along with the headline structure above it<a id=\"DOCF7\" href=\"https://orgmode.org/org.html#FOOT7\"><sup>7</sup></a>.\nJust try it out and you will see immediately how it works.\n</p>\n<p>Org mode contains several commands creating such trees, all these\ncommands can be accessed through a dispatcher:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c /</kbd> (<code>org-sparse-tree</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f\"></span>\n<span id=\"index-org_002dsparse_002dtree\"></span>\n<p>This prompts for an extra key to select a sparse-tree creating\ncommand.\n</p>\n</dd>\n<dt><kbd>C-c / r</kbd> or <kbd>C-c / /</kbd> (<code>org-occur</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-r\"></span>\n<span id=\"index-C_002dc-_002f-_002f\"></span>\n<span id=\"index-org_002doccur\"></span>\n<span id=\"index-org_002dremove_002dhighlights_002dwith_002dchange\"></span>\n<p>Prompts for a regexp (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>) and shows a sparse\ntree with all matches.  If the match is in a headline, the headline\nis made visible.  If the match is in the body of an entry, headline\nand body are made visible.  In order to provide minimal context,\nalso the full hierarchy of headlines above the match is shown, as\nwell as the headline following the match.  Each match is also\nhighlighted; the highlights disappear when the buffer is changed by\nan editing command, or by pressing <kbd>C-c C-c</kbd><a id=\"DOCF8\" href=\"https://orgmode.org/org.html#FOOT8\"><sup>8</sup></a>.  When\ncalled with a <kbd>C-u</kbd> prefix argument, previous highlights\nare kept, so several calls to this command can be stacked.\n</p>\n</dd>\n<dt><kbd>M-g n</kbd> or <kbd>M-g M-n</kbd> (<code>next-error</code>)</dt>\n<dd><span id=\"index-M_002dg-n\"></span>\n<span id=\"index-M_002dg-M_002dn\"></span>\n<span id=\"index-next_002derror\"></span>\n<p>Jump to the next sparse tree match in this buffer.\n</p>\n</dd>\n<dt><kbd>M-g p</kbd> or <kbd>M-g M-p</kbd> (<code>previous-error</code>)</dt>\n<dd><span id=\"index-M_002dg-p\"></span>\n<span id=\"index-M_002dg-M_002dp\"></span>\n<span id=\"index-previous_002derror\"></span>\n<p>Jump to the previous sparse tree match in this buffer.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dagenda_002dcustom_002dcommands\"></span>\n<p>For frequently used sparse trees of specific search strings, you can\nuse the variable <code>org-agenda-custom-commands</code> to define fast keyboard\naccess to specific sparse trees.  These commands will then be\naccessible through the agenda dispatcher (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).\nFor example:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"f\" occur-tree \"FIXME\")))\n</pre></div>\n\n<p>defines the key <kbd>f</kbd> as a shortcut for creating a sparse tree\nmatching the string \u2018<samp>FIXME</samp>\u2019.\n</p>\n<p>The other sparse tree commands select headings based on TODO keywords,\ntags, or properties and are discussed later in this manual.\n</p>\n<span id=\"index-C_002dc-C_002de-C_002dv\"></span>\n<span id=\"index-printing-sparse-trees\"></span>\n<span id=\"index-visible-text_002c-printing\"></span>\n<p>To print a sparse tree, you can use the Emacs command\n<code>ps-print-buffer-with-faces</code> which does not print invisible parts of\nthe document.  Or you can use the command <kbd>C-c C-e C-v</kbd> to\nexport only the visible part of the document and print the resulting\nfile.\n</p>\n"}, {"id": "26PlainLists", "content": "\n<span id=\"Plain-Lists\"></span>\n<span id=\"Plain-Lists-1\"></span><h3 class=\"section\">2.6 Plain Lists</h3>\n\n<span id=\"index-plain-lists\"></span>\n<span id=\"index-lists_002c-plain\"></span>\n<span id=\"index-lists_002c-ordered\"></span>\n<span id=\"index-ordered-lists\"></span>\n\n<p>Within an entry of the outline tree, hand-formatted lists can provide\nadditional structure.  They also provide a way to create lists of\ncheckboxes (see <a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>).  Org supports editing such lists, and\nevery exporter (see <a href=\"https://orgmode.org/org.html#Exporting\">Exporting</a>) can parse and format them.\n</p>\n<p>Org knows ordered lists, unordered lists, and description lists.\n</p>\n<ul>\n<li> <em>Unordered</em> list items start with \u2018<samp>-</samp>\u2019, \u2018<samp>+</samp>\u2019, or \u2018<samp>*</samp>\u2019<a id=\"DOCF9\" href=\"https://orgmode.org/org.html#FOOT9\"><sup>9</sup></a> as bullets.\n\n</li><li> <span id=\"index-org_002dplain_002dlist_002dordered_002ditem_002dterminator\"></span>\n<span id=\"index-org_002dalphabetical_002dlists\"></span>\n<em>Ordered</em> list items start with a numeral followed by either\na period or a right parenthesis<a id=\"DOCF10\" href=\"https://orgmode.org/org.html#FOOT10\"><sup>10</sup></a>, such as \u2018<samp>1.</samp>\u2019 or \u2018<samp>1)</samp>\u2019<a id=\"DOCF11\" href=\"https://orgmode.org/org.html#FOOT11\"><sup>11</sup></a>\nIf you want a list to start with a different value\u2014e.g.,\n20\u2014start the text of the item with \u2018<samp>[@20]</samp>\u2019<a id=\"DOCF12\" href=\"https://orgmode.org/org.html#FOOT12\"><sup>12</sup></a>.  Those\nconstructs can be used in any item of the list in order to enforce\na particular numbering.\n\n</li><li> <em>Description</em> list items are unordered list items, and contain the\nseparator \u2018<samp>::</samp>\u2019 to distinguish the description <em>term</em> from the\ndescription.\n</li></ul>\n\n<p>Items belonging to the same list must have the same indentation on the\nfirst line.  In particular, if an ordered list reaches number \u2018<samp>10.</samp>\u2019,\nthen the 2-digit numbers must be written left-aligned with the other\nnumbers in the list.  An item ends before the next line that is less\nor equally indented than its bullet/number.\n</p>\n<p>A list ends whenever every item has ended, which means before any line\nless or equally indented than items at top level.  It also ends before\ntwo blank lines.  In that case, all items are closed.  Here is an\nexample:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Lord of the Rings\nMy favorite scenes are (in this order)\n1. The attack of the Rohirrim\n2. Eowyn's fight with the witch king\n   + this was already my favorite scene in the book\n   + I really like Miranda Otto.\n3. Peter Jackson being shot by Legolas\n   - on DVD only\n   He makes a really funny face when it happens.\nBut in the end, no individual scenes matter but the film as a whole.\nImportant actors in this film are:\n- Elijah Wood :: He plays Frodo\n- Sean Astin :: He plays Sam, Frodo's friend.  I still remember him\n     very well from his role as Mikey Walsh in /The Goonies/.\n</pre></div>\n\n<p>Org supports these lists by tuning filling and wrapping commands to\ndeal with them correctly, and by exporting them properly (see\n<a href=\"https://orgmode.org/org.html#Exporting\">Exporting</a>).  Since indentation is what governs the structure of these\nlists, many structural constructs like \u2018<samp>#+BEGIN_</samp>\u2019 blocks can be\nindented to signal that they belong to a particular item.\n</p>\n<span id=\"index-org_002dlist_002ddemote_002dmodify_002dbullet\"></span>\n<span id=\"index-org_002dlist_002dindent_002doffset\"></span>\n<p>If you find that using a different bullet for a sub-list\u2014than that\nused for the current list-level\u2014improves readability, customize the\nvariable <code>org-list-demote-modify-bullet</code>.  To get a greater difference\nof indentation between items and theirs sub-items, customize\n<code>org-list-indent-offset</code>.\n</p>\n<span id=\"index-org_002dlist_002dautomatic_002drules\"></span>\n<p>The following commands act on items when point is in the first line of\nan item\u2014the line with the bullet or number.  Some of them imply the\napplication of automatic rules to keep list structure intact.  If some\nof these actions get in your way, configure <code>org-list-automatic-rules</code>\nto disable them individually.\n</p>\n<dl compact=\"compact\">\n<dt><kbd><span class=\"key\">TAB</span></kbd> (<code>org-cycle</code>)</dt>\n<dd><span id=\"index-cycling_002c-in-plain-lists\"></span>\n<span id=\"index-TAB-2\"></span>\n<span id=\"index-org_002dcycle-2\"></span>\n<span id=\"index-org_002dcycle_002dinclude_002dplain_002dlists\"></span>\n<p>Items can be folded just like headline levels.  Normally this works\nonly if point is on a plain list item.  For more details, see the\nvariable <code>org-cycle-include-plain-lists</code>.  If this variable is set\nto <code>integrate</code>, plain list items are treated like low-level\nheadlines.  The level of an item is then given by the indentation of\nthe bullet/number.  Items are always subordinate to real headlines,\nhowever; the hierarchies remain completely separated.  In a new item\nwith no text yet, the first <kbd><span class=\"key\">TAB</span></kbd> demotes the item to\nbecome a child of the previous one.  Subsequent <kbd><span class=\"key\">TAB</span></kbd>s move\nthe item to meaningful levels in the list and eventually get it back\nto its initial position.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">RET</span></kbd> (<code>org-insert-heading</code>)</dt>\n<dd><span id=\"index-M_002dRET-1\"></span>\n<span id=\"index-org_002dinsert_002dheading\"></span>\n<span id=\"index-org_002dM_002dRET_002dmay_002dsplit_002dline-1\"></span>\n<p>Insert new item at current level.  With a prefix argument, force\na new heading (see <a href=\"https://orgmode.org/org.html#Structure-Editing\">Structure Editing</a>).  If this command is used in\nthe middle of an item, that item is <em>split</em> in two, and the second\npart becomes the new item<a id=\"DOCF13\" href=\"https://orgmode.org/org.html#FOOT13\"><sup>13</sup></a>.  If this command is executed\n<em>before item\u2019s body</em>, the new item is created <em>before</em> the current\none.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">RET</span></kbd></dt>\n<dd><span id=\"index-M_002dS_002dRET-1\"></span>\n<p>Insert a new item with a checkbox (see <a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">UP</span></kbd></dt>\n<dt><kbd>S-<span class=\"key\">DOWN</span></kbd></dt>\n<dd><span id=\"index-S_002dUP\"></span>\n<span id=\"index-S_002dDOWN\"></span>\n<span id=\"index-shift_002dselection_002dmode\"></span>\n<span id=\"index-org_002dsupport_002dshift_002dselect\"></span>\n<span id=\"index-org_002dlist_002duse_002dcircular_002dmotion\"></span>\n<p>Jump to the previous/next item in the current list, but only if\n<code>org-support-shift-select</code> is off<a id=\"DOCF14\" href=\"https://orgmode.org/org.html#FOOT14\"><sup>14</sup></a>.  If not, you can still use\nparagraph jumping commands like <kbd>C-<span class=\"key\">UP</span></kbd> and\n<kbd>C-<span class=\"key\">DOWN</span></kbd> to quite similar effect.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">UP</span></kbd></dt>\n<dt><kbd>M-<span class=\"key\">DOWN</span></kbd></dt>\n<dd><span id=\"index-M_002dUP-1\"></span>\n<span id=\"index-M_002dDOWN-1\"></span>\n<p>Move the item including subitems up/down<a id=\"DOCF15\" href=\"https://orgmode.org/org.html#FOOT15\"><sup>15</sup></a>, i.e., swap with\nprevious/next item of same indentation.  If the list is ordered,\nrenumbering is automatic.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">LEFT</span></kbd></dt>\n<dt><kbd>M-<span class=\"key\">RIGHT</span></kbd></dt>\n<dd><span id=\"index-M_002dLEFT-1\"></span>\n<span id=\"index-M_002dRIGHT-1\"></span>\n<p>Decrease/increase the indentation of an item, leaving children\nalone.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">LEFT</span></kbd></dt>\n<dt><kbd>M-S-<span class=\"key\">RIGHT</span></kbd></dt>\n<dd><span id=\"index-M_002dS_002dLEFT-1\"></span>\n<span id=\"index-M_002dS_002dRIGHT-1\"></span>\n<p>Decrease/increase the indentation of the item, including subitems.\nInitially, the item tree is selected based on current indentation.\nWhen these commands are executed several times in direct succession,\nthe initially selected region is used, even if the new indentation\nwould imply a different hierarchy.  To use the new hierarchy, break\nthe command chain by moving point.\n</p>\n<p>As a special case, using this command on the very first item of\na list moves the whole list.  This behavior can be disabled by\nconfiguring <code>org-list-automatic-rules</code>.  The global indentation of\na list has no influence on the text <em>after</em> the list.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002dc\"></span>\n<p>If there is a checkbox (see <a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>) in the item line, toggle\nthe state of the checkbox.  In any case, verify bullets and\nindentation consistency in the whole list.\n</p>\n</dd>\n<dt><kbd>C-c -</kbd></dt>\n<dd><span id=\"index-C_002dc-_002d\"></span>\n<span id=\"index-org_002dplain_002dlist_002dordered_002ditem_002dterminator-1\"></span>\n<p>Cycle the entire list level through the different itemize/enumerate\nbullets (\u2018<samp>-</samp>\u2019, \u2018<samp>+</samp>\u2019, \u2018<samp>*</samp>\u2019, \u2018<samp>1.</samp>\u2019, \u2018<samp>1)</samp>\u2019) or a subset of them, depending\non <code>org-plain-list-ordered-item-terminator</code>, the type of list, and\nits indentation.  With a numeric prefix argument N, select the Nth\nbullet from this list.  If there is an active region when calling\nthis, all lines are converted to list items.  With a prefix\nargument, the selected text is changed into a single item.  If the\nfirst line already was a list item, any item marker is removed from\nthe list.  Finally, even without an active region, a normal line is\nconverted into a list item.\n</p>\n</dd>\n<dt><kbd>C-c *</kbd></dt>\n<dd><span id=\"index-C_002dc-_002a-1\"></span>\n<p>Turn a plain list item into a headline\u2014so that it becomes\na subheading at its location.  See <a href=\"https://orgmode.org/org.html#Structure-Editing\">Structure Editing</a>, for\na detailed explanation.\n</p>\n</dd>\n<dt><kbd>C-c C-*</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002d_002a\"></span>\n<p>Turn the whole plain list into a subtree of the current heading.\nCheckboxes (see <a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>) become \u2018<samp>TODO</samp>\u2019, respectively \u2018<samp>DONE</samp>\u2019,\nkeywords when unchecked, respectively checked.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd></dt>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd></dt>\n<dd><span id=\"index-org_002dsupport_002dshift_002dselect-1\"></span>\n<span id=\"index-S_002dLEFT\"></span>\n<span id=\"index-S_002dRIGHT\"></span>\n<p>This command also cycles bullet styles when point is in on the\nbullet or anywhere in an item line, details depending on\n<code>org-support-shift-select</code>.\n</p>\n</dd>\n<dt><kbd>C-c ^</kbd></dt>\n<dd><span id=\"index-C_002dc-_005e-1\"></span>\n<span id=\"index-sorting_002c-of-plain-list\"></span>\n<p>Sort the plain list.  Prompt for the sorting method: numerically,\nalphabetically, by time, or by custom function.\n</p></dd>\n</dl>\n\n"}, {"id": "27Drawers", "content": "\n<span id=\"Drawers\"></span>\n<span id=\"Drawers-1\"></span><h3 class=\"section\">2.7 Drawers</h3>\n\n<span id=\"index-drawers\"></span>\n<span id=\"index-visibility-cycling_002c-drawers\"></span>\n\n<p>Sometimes you want to keep information associated with an entry, but\nyou normally do not want to see it.  For this, Org mode has <em>drawers</em>.\nThey can contain anything but a headline and another drawer.  Drawers\nlook like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** This is a headline\nStill outside the drawer\n:DRAWERNAME:\nThis is inside the drawer.\n:END:\nAfter the drawer.\n</pre></div>\n\n<span id=\"index-C_002dc-C_002dx-d\"></span>\n<span id=\"index-org_002dinsert_002ddrawer\"></span>\n<p>You can interactively insert a drawer at point by calling\n<code>org-insert-drawer</code>, which is bound to <kbd>C-c C-x d</kbd>.  With an\nactive region, this command puts the region inside the drawer.  With\na prefix argument, this command calls <code>org-insert-property-drawer</code>,\nwhich creates a \u2018<samp>PROPERTIES</samp>\u2019 drawer right below the current headline.\nOrg mode uses this special drawer for storing properties (see\n<a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>).  You cannot use it for anything else.\n</p>\n<p>Completion over drawer keywords is also possible using\n<kbd>M-<span class=\"key\">TAB</span></kbd><a id=\"DOCF16\" href=\"https://orgmode.org/org.html#FOOT16\"><sup>16</sup></a>.\n</p>\n<p>Visibility cycling (see <a href=\"https://orgmode.org/org.html#Visibility-Cycling\">Visibility Cycling</a>) on the headline hides and\nshows the entry, but keep the drawer collapsed to a single line.  In\norder to look inside the drawer, you need to move point to the drawer\nline and press <kbd><span class=\"key\">TAB</span></kbd> there.\n</p>\n<p>You can also arrange for state change notes (see <a href=\"https://orgmode.org/org.html#Tracking-TODO-state-changes\">Tracking TODO state changes</a>) and clock times (see <a href=\"https://orgmode.org/org.html#Clocking-Work-Time\">Clocking Work Time</a>) to be stored in\na \u2018<samp>LOGBOOK</samp>\u2019 drawer.  If you want to store a quick note there, in\na similar way to state changes, use\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-z</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002dz\"></span>\n<p>Add a time-stamped note to the \u2018<samp>LOGBOOK</samp>\u2019 drawer.\n</p></dd>\n</dl>\n\n"}, {"id": "28Blocks", "content": "\n<span id=\"Blocks\"></span>\n<span id=\"Blocks-1\"></span><h3 class=\"section\">2.8 Blocks</h3>\n\n<span id=\"index-org_002dhide_002dblock_002dstartup\"></span>\n<span id=\"index-blocks_002c-folding\"></span>\n\n<p>Org mode uses \u2018<samp>#+BEGIN</samp>\u2019 \u2026 \u2018<samp>#+END</samp>\u2019 blocks for various purposes from\nincluding source code examples (see <a href=\"https://orgmode.org/org.html#Literal-Examples\">Literal Examples</a>) to capturing\ntime logging information (see <a href=\"https://orgmode.org/org.html#Clocking-Work-Time\">Clocking Work Time</a>).  These blocks can\nbe folded and unfolded by pressing <kbd><span class=\"key\">TAB</span></kbd> in the \u2018<samp>#+BEGIN</samp>\u2019\nline.  You can also get all blocks folded at startup by configuring\nthe variable <code>org-hide-block-startup</code> or on a per-file basis by using\n</p>\n<span id=\"index-STARTUP_002c-keyword-1\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: hideblocks\n#+STARTUP: nohideblocks\n</pre></div>\n\n"}, {"id": "3Tables", "content": "\n<span id=\"Tables\"></span>\n<span id=\"Tables-1\"></span><h2 class=\"chapter\">3 Tables</h2>\n\n<span id=\"index-tables\"></span>\n<span id=\"index-editing-tables\"></span>\n\n<p>Org comes with a fast and intuitive table editor.  Spreadsheet-like\ncalculations are supported using the Emacs Calc package (see <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/calc.html#Top\">(calc)GNU Emacs\nCalculator Manual</a>).\n</p>\n\n\n"}, {"id": "31BuiltinTableEditor", "content": "\n<span id=\"Built_002din-Table-Editor\"></span>\n<span id=\"Built_002din-Table-Editor-1\"></span><h3 class=\"section\">3.1 Built-in Table Editor</h3>\n\n<span id=\"index-table-editor_002c-built_002din\"></span>\n\n<span id=\"index-header-lines_002c-in-tables\"></span>\n<span id=\"index-horizontal-rule_002c-in-tables\"></span>\n<span id=\"index-row-separator_002c-in-tables\"></span>\n<span id=\"index-table-syntax\"></span>\n<p>Org makes it easy to format tables in plain ASCII.  Any line with \u2018<samp>|</samp>\u2019\nas the first non-whitespace character is considered part of a table.\n\u2018<samp>|</samp>\u2019 is also the column separator<a id=\"DOCF17\" href=\"https://orgmode.org/org.html#FOOT17\"><sup>17</sup></a>.  Moreover, a line starting\nwith \u2018<samp>|-</samp>\u2019 is a horizontal rule.  It separates rows explicitly.  Rows\nbefore the first horizontal rule are header lines.  A table might look\nlike this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">| Name  | Phone | Age |\n|-------+-------+-----|\n| Peter |  1234 |  17 |\n| Anna  |  4321 |  25 |\n</pre></div>\n\n<p>A table is re-aligned automatically each time you press\n<kbd><span class=\"key\">TAB</span></kbd>, <kbd><span class=\"key\">RET</span></kbd> or <kbd>C-c C-c</kbd> inside the table.\n<kbd><span class=\"key\">TAB</span></kbd> also moves to the next field\u2014<kbd><span class=\"key\">RET</span></kbd> to the\nnext row\u2014and creates new table rows at the end of the table or\nbefore horizontal lines.  The indentation of the table is set by the\nfirst line.  Horizontal rules are automatically expanded on every\nre-align to span the whole table width.  So, to create the above\ntable, you would only type\n</p>\n<div class=\"example\">\n<pre class=\"example\">|Name|Phone|Age|\n|-\n</pre></div>\n\n<p>and then press <kbd><span class=\"key\">TAB</span></kbd> to align the table and start filling in\nfields.  Even faster would be to type \u2018<samp>|Name|Phone|Age</samp>\u2019 followed by\n<kbd>C-c <span class=\"key\">RET</span></kbd>.\n</p>\n<p>When typing text into a field, Org treats <kbd>DEL</kbd>,\n<kbd>Backspace</kbd>, and all character keys in a special way, so that\ninserting and deleting avoids shifting other fields.  Also, when\ntyping <em>immediately</em> after point was moved into a new field with\n<kbd><span class=\"key\">TAB</span></kbd>, <kbd>S-<span class=\"key\">TAB</span></kbd> or <kbd><span class=\"key\">RET</span></kbd>, the field is\nautomatically made blank.  If this behavior is too unpredictable for\nyou, configure the option <code>org-table-auto-blank-field</code>.\n</p>\n<span id=\"Creation-and-conversion\"></span><span id=\"Creation-and-conversion-1\"></span><h4 class=\"subheading\">Creation and conversion</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c |</kbd> (<code>org-table-create-or-convert-from-region</code>)</dt>\n<dd><span id=\"index-C_002dc-_007c\"></span>\n<span id=\"index-org_002dtable_002dcreate_002dor_002dconvert_002dfrom_002dregion\"></span>\n<p>Convert the active region to table.  If every line contains at least\none <kbd><span class=\"key\">TAB</span></kbd> character, the function assumes that the material\nis tab separated.  If every line contains a comma, comma-separated\nvalues (CSV) are assumed.  If not, lines are split at whitespace\ninto fields.  You can use a prefix argument to force a specific\nseparator: <kbd>C-u</kbd> forces CSV, <kbd>C-u C-u</kbd> forces\n<kbd><span class=\"key\">TAB</span></kbd>, <kbd>C-u C-u C-u</kbd> prompts for a regular\nexpression to match the separator, and a numeric argument\nN indicates that at least N consecutive spaces, or alternatively\na <kbd><span class=\"key\">TAB</span></kbd> will be the separator.\n</p>\n<p>If there is no active region, this command creates an empty Org\ntable.  But it is easier just to start typing, like <kbd>| N a m e | P h o n e | A g e <span class=\"key\">RET</span> | - <span class=\"key\">TAB</span></kbd>.\n</p></dd>\n</dl>\n\n<span id=\"Re_002daligning-and-field-motion\"></span><span id=\"Re_002daligning-and-field-motion-1\"></span><h4 class=\"subheading\">Re-aligning and field motion</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-c</kbd> (<code>org-table-align</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-1\"></span>\n<span id=\"index-org_002dtable_002dalign\"></span>\n<p>Re-align the table without moving point.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">TAB</span></kbd> (<code>org-table-next-field</code>)</dt>\n<dd><span id=\"index-TAB-3\"></span>\n<span id=\"index-org_002dtable_002dnext_002dfield\"></span>\n<p>Re-align the table, move to the next field.  Creates a new row if\nnecessary.\n</p>\n</dd>\n<dt><kbd>M-x org-table-blank-field</kbd></dt>\n<dd><span id=\"index-org_002dtable_002dblank_002dfield\"></span>\n<p>Blank the field at point.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">TAB</span></kbd> (<code>org-table-previous-field</code>)</dt>\n<dd><span id=\"index-S_002dTAB-1\"></span>\n<span id=\"index-org_002dtable_002dprevious_002dfield\"></span>\n<p>Re-align, move to previous field.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">RET</span></kbd> (<code>org-table-next-row</code>)</dt>\n<dd><span id=\"index-RET\"></span>\n<span id=\"index-org_002dtable_002dnext_002drow\"></span>\n<p>Re-align the table and move down to next row.  Creates a new row if\nnecessary.  At the beginning or end of a line, <kbd><span class=\"key\">RET</span></kbd> still\ninserts a new line, so it can be used to split a table.\n</p>\n</dd>\n<dt><kbd>M-a</kbd> (<code>org-table-beginning-of-field</code>)</dt>\n<dd><span id=\"index-M_002da\"></span>\n<span id=\"index-org_002dtable_002dbeginning_002dof_002dfield\"></span>\n<p>Move to beginning of the current table field, or on to the previous\nfield.\n</p>\n</dd>\n<dt><kbd>M-e</kbd> (<code>org-table-end-of-field</code>)</dt>\n<dd><span id=\"index-M_002de\"></span>\n<span id=\"index-org_002dtable_002dend_002dof_002dfield\"></span>\n<p>Move to end of the current table field, or on to the next field.\n</p></dd>\n</dl>\n\n<span id=\"Column-and-row-editing\"></span><span id=\"Column-and-row-editing-1\"></span><h4 class=\"subheading\">Column and row editing</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>M-<span class=\"key\">LEFT</span></kbd> (<code>org-table-move-column-left</code>)</dt>\n<dd><span id=\"index-M_002dLEFT-2\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcolumn_002dleft\"></span>\n<p>Move the current column left.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">RIGHT</span></kbd> (<code>org-table-move-column-right</code>)</dt>\n<dd><span id=\"index-M_002dRIGHT-2\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcolumn_002dright\"></span>\n<p>Move the current column right.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">LEFT</span></kbd> (<code>org-table-delete-column</code>)</dt>\n<dd><span id=\"index-M_002dS_002dLEFT-2\"></span>\n<span id=\"index-org_002dtable_002ddelete_002dcolumn\"></span>\n<p>Kill the current column.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">RIGHT</span></kbd> (<code>org-table-insert-column</code>)</dt>\n<dd><span id=\"index-M_002dS_002dRIGHT-2\"></span>\n<span id=\"index-org_002dtable_002dinsert_002dcolumn\"></span>\n<p>Insert a new column at point position.  Move the recent column and\nall cells to the right of this column to the right.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">UP</span></kbd> (<code>org-table-move-row-up</code>)</dt>\n<dd><span id=\"index-M_002dUP-2\"></span>\n<span id=\"index-org_002dtable_002dmove_002drow_002dup\"></span>\n<p>Move the current row up.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">DOWN</span></kbd> (<code>org-table-move-row-down</code>)</dt>\n<dd><span id=\"index-M_002dDOWN-2\"></span>\n<span id=\"index-org_002dtable_002dmove_002drow_002ddown\"></span>\n<p>Move the current row down.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">UP</span></kbd> (<code>org-table-kill-row</code>)</dt>\n<dd><span id=\"index-M_002dS_002dUP\"></span>\n<span id=\"index-org_002dtable_002dkill_002drow\"></span>\n<p>Kill the current row or horizontal line.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">UP</span></kbd> (<code>org-table-move-cell-up</code>)</dt>\n<dd><span id=\"index-S_002dUP-1\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcell_002dup\"></span>\n<p>Move cell up by swapping with adjacent cell.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">DOWN</span></kbd> (<code>org-table-move-cell-down</code>)</dt>\n<dd><span id=\"index-S_002dDOWN-1\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcell_002ddown\"></span>\n<p>Move cell down by swapping with adjacent cell.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd> (<code>org-table-move-cell-left</code>)</dt>\n<dd><span id=\"index-S_002dLEFT-1\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcell_002dleft\"></span>\n<p>Move cell left by swapping with adjacent cell.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-table-move-cell-right</code>)</dt>\n<dd><span id=\"index-S_002dRIGHT-1\"></span>\n<span id=\"index-org_002dtable_002dmove_002dcell_002dright\"></span>\n<p>Move cell right by swapping with adjacent cell.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">DOWN</span></kbd> (<code>org-table-insert-row</code>)</dt>\n<dd><span id=\"index-M_002dS_002dDOWN\"></span>\n<span id=\"index-org_002dtable_002dinsert_002drow\"></span>\n<p>Insert a new row above the current row.  With a prefix argument, the\nline is created below the current one.\n</p>\n</dd>\n<dt><kbd>C-c -</kbd> (<code>org-table-insert-hline</code>)</dt>\n<dd><span id=\"index-C_002dc-_002d-1\"></span>\n<span id=\"index-org_002dtable_002dinsert_002dhline\"></span>\n<p>Insert a horizontal line below current row.  With a prefix argument,\nthe line is created above the current line.\n</p>\n</dd>\n<dt><kbd>C-c <span class=\"key\">RET</span></kbd> (<code>org-table-hline-and-move</code>)</dt>\n<dd><span id=\"index-C_002dc-RET\"></span>\n<span id=\"index-org_002dtable_002dhline_002dand_002dmove\"></span>\n<p>Insert a horizontal line below current row, and move point into the\nrow below that line.\n</p>\n</dd>\n<dt><kbd>C-c ^</kbd> (<code>org-table-sort-lines</code>)</dt>\n<dd><span id=\"index-C_002dc-_005e-2\"></span>\n<span id=\"index-org_002dtable_002dsort_002dlines\"></span>\n<p>Sort the table lines in the region.  The position of point indicates\nthe column to be used for sorting, and the range of lines is the\nrange between the nearest horizontal separator lines, or the entire\ntable.  If point is before the first column, you are prompted for\nthe sorting column.  If there is an active region, the mark\nspecifies the first line and the sorting column, while point should\nbe in the last line to be included into the sorting.  The command\nprompts for the sorting type, alphabetically, numerically, or by\ntime.  You can sort in normal or reverse order.  You can also supply\nyour own key extraction and comparison functions.  When called with\na prefix argument, alphabetic sorting is case-sensitive.\n</p></dd>\n</dl>\n\n<span id=\"Regions\"></span><span id=\"Regions-1\"></span><h4 class=\"subheading\">Regions</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x M-w</kbd> (<code>org-table-copy-region</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-M_002dw-1\"></span>\n<span id=\"index-org_002dtable_002dcopy_002dregion\"></span>\n<p>Copy a rectangular region from a table to a special clipboard.\nPoint and mark determine edge fields of the rectangle.  If there is\nno active region, copy just the current field.  The process ignores\nhorizontal separator lines.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-w</kbd> (<code>org-table-cut-region</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dw-1\"></span>\n<span id=\"index-org_002dtable_002dcut_002dregion\"></span>\n<p>Copy a rectangular region from a table to a special clipboard, and\nblank all fields in the rectangle.  So this is the \u201ccut\u201d operation.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-y</kbd> (<code>org-table-paste-rectangle</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dy-1\"></span>\n<span id=\"index-org_002dtable_002dpaste_002drectangle\"></span>\n<p>Paste a rectangular region into a table.  The upper left corner ends\nup in the current field.  All involved fields are overwritten.  If\nthe rectangle does not fit into the present table, the table is\nenlarged as needed.  The process ignores horizontal separator lines.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">RET</span></kbd> (<code>org-table-wrap-region</code>)</dt>\n<dd><span id=\"index-M_002dRET-2\"></span>\n<span id=\"index-org_002dtable_002dwrap_002dregion\"></span>\n<p>Split the current field at point position and move the rest to the\nline below.  If there is an active region, and both point and mark\nare in the same column, the text in the column is wrapped to minimum\nwidth for the given number of lines.  A numeric prefix argument may\nbe used to change the number of desired lines.  If there is no\nregion, but you specify a prefix argument, the current field is made\nblank, and the content is appended to the field above.\n</p></dd>\n</dl>\n\n<span id=\"Calculations\"></span><span id=\"Calculations-1\"></span><h4 class=\"subheading\">Calculations</h4>\n\n<span id=\"index-formula_002c-in-tables\"></span>\n<span id=\"index-calculations_002c-in-tables\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c +</kbd> (<code>org-table-sum</code>)</dt>\n<dd><span id=\"index-C_002dc-_002b\"></span>\n<span id=\"index-org_002dtable_002dsum\"></span>\n<p>Sum the numbers in the current column, or in the rectangle defined\nby the active region.  The result is shown in the echo area and can\nbe inserted with <kbd>C-y</kbd>.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RET</span></kbd> (<code>org-table-copy-down</code>)</dt>\n<dd><span id=\"index-S_002dRET\"></span>\n<span id=\"index-org_002dtable_002dcopy_002ddown\"></span>\n<span id=\"index-org_002dtable_002dcopy_002dincrement\"></span>\n<p>When current field is empty, copy from first non-empty field above.\nWhen not empty, copy current field down to next row and move point\nalong with it.\n</p>\n<p>Depending on the variable <code>org-table-copy-increment</code>, integer and\ntime stamp field values, and fields prefixed or suffixed with\na whole number, can be incremented during copy.  Also, a <code>0</code> prefix\nargument temporarily disables the increment.\n</p>\n<p>This key is also used by shift-selection and related modes (see\n<a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>).\n</p></dd>\n</dl>\n\n<span id=\"Miscellaneous-_00281_0029\"></span><span id=\"Miscellaneous-2\"></span><h4 class=\"subheading\">Miscellaneous</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c `</kbd> (<code>org-table-edit-field</code>)</dt>\n<dd><span id=\"index-C_002dc-_0060\"></span>\n<span id=\"index-org_002dtable_002dedit_002dfield\"></span>\n<p>Edit the current field in a separate window.  This is useful for\nfields that are not fully visible (see <a href=\"https://orgmode.org/org.html#Column-Width-and-Alignment\">Column Width and Alignment</a>).\nWhen called with a <kbd>C-u</kbd> prefix, just make the full field\nvisible, so that it can be edited in place.  When called with two\n<kbd>C-u</kbd> prefixes, make the editor window follow point through\nthe table and always show the current field.  The follow mode exits\nautomatically when point leaves the table, or when you repeat this\ncommand with <kbd>C-u C-u C-c `</kbd>.\n</p>\n</dd>\n<dt><kbd>M-x org-table-import</kbd></dt>\n<dd><span id=\"index-org_002dtable_002dimport\"></span>\n<p>Import a file as a table.  The table should be TAB or whitespace\nseparated.  Use, for example, to import a spreadsheet table or data\nfrom a database, because these programs generally can write\nTAB-separated text files.  This command works by inserting the file\ninto the buffer and then converting the region to a table.  Any\nprefix argument is passed on to the converter, which uses it to\ndetermine the separator.\n</p>\n</dd>\n<dt><kbd>C-c |</kbd> (<code>org-table-create-or-convert-from-region</code>)</dt>\n<dd><span id=\"index-C_002dc-_007c-1\"></span>\n<span id=\"index-org_002dtable_002dcreate_002dor_002dconvert_002dfrom_002dregion-1\"></span>\n<p>Tables can also be imported by pasting tabular text into the Org\nbuffer, selecting the pasted text with <kbd>C-x C-x</kbd> and then\nusing the <kbd>C-c |</kbd> command (see <a href=\"https://orgmode.org/org.html#Creation-and-conversion\">Creation and conversion</a>).\n</p>\n</dd>\n<dt><kbd>M-x org-table-export</kbd></dt>\n<dd><span id=\"index-org_002dtable_002dexport\"></span>\n<span id=\"index-org_002dtable_002dexport_002ddefault_002dformat\"></span>\n<p>Export the table, by default as a TAB-separated file.  Use for data\nexchange with, for example, spreadsheet or database programs.  The\nformat used to export the file can be configured in the variable\n<code>org-table-export-default-format</code>.  You may also use properties\n\u2018<samp>TABLE_EXPORT_FILE</samp>\u2019 and \u2018<samp>TABLE_EXPORT_FORMAT</samp>\u2019 to specify the file\nname and the format for table export in a subtree.  Org supports\nquite general formats for exported tables.  The exporter format is\nthe same as the format used by Orgtbl radio tables, see <a href=\"https://orgmode.org/org.html#Translator-functions\">Translator functions</a>, for a detailed description.\n</p>\n</dd>\n<dt><kbd>M-x org-table-header-line-mode</kbd></dt>\n<dd><span id=\"index-org_002dtable_002dheader_002dline_002dmode\"></span>\n<span id=\"index-org_002dtable_002dheader_002dline_002dp\"></span>\n<p>Turn on the display of the first data row of the table at point in\nthe window header line when this first row is not visible anymore in\nthe buffer.  You can activate this minor mode by default by setting\nthe option <code>org-table-header-line-p</code> to <code>t</code>.\n</p>\n</dd>\n<dt><kbd>M-x org-table-transpose-table-at-point</kbd></dt>\n<dd><span id=\"index-org_002dtable_002dtranspose_002dtable_002dat_002dpoint\"></span>\n<p>Transpose the table at point and eliminate hlines.\n</p></dd>\n</dl>\n\n"}, {"id": "32ColumnWidthandAlignment", "content": "\n<span id=\"Column-Width-and-Alignment\"></span>\n<span id=\"Column-Width-and-Alignment-1\"></span><h3 class=\"section\">3.2 Column Width and Alignment</h3>\n\n<span id=\"index-narrow-columns-in-tables\"></span>\n<span id=\"index-alignment-in-tables\"></span>\n\n<p>The width of columns is automatically determined by the table editor.\nThe alignment of a column is determined automatically from the\nfraction of number-like versus non-number fields in the column.\n</p>\n<span id=\"index-org_002dtable_002dautomatic_002drealign\"></span>\n<p>Editing a field may modify alignment of the table.  Moving\na contiguous row or column\u2014i.e., using <kbd><span class=\"key\">TAB</span></kbd> or\n<kbd><span class=\"key\">RET</span></kbd>\u2014automatically re-aligns it.  If you want to disable\nthis behavior, set <code>org-table-automatic-realign</code> to <code>nil</code>.  In any\ncase, you can always align manually a table:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-c</kbd> (<code>org-table-align</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-2\"></span>\n<span id=\"index-org_002dtable_002dalign-1\"></span>\n<p>Align the current table.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dstartup_002dalign_002dall_002dtables\"></span>\n<p>Setting the option <code>org-startup-align-all-tables</code> re-aligns all tables\nin a file upon visiting it.  You can also set this option on\na per-file basis with:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: align\n#+STARTUP: noalign\n</pre></div>\n\n<p>Sometimes a single field or a few fields need to carry more text,\nleading to inconveniently wide columns.  Maybe you want to hide away\nseveral columns or display them with a fixed width, regardless of\ncontent, as shown in the following example.\n</p>\n<div class=\"example\">\n<pre class=\"example\">|---+---------------------+--------|           |---+-------\u2026+\u2026|\n|   | &lt;6&gt;                 |        |           |   | &lt;6&gt;   \u2026|\u2026|\n| 1 | one                 | some   |   ----\\   | 1 | one   \u2026|\u2026|\n| 2 | two                 | boring |   ----/   | 2 | two   \u2026|\u2026|\n| 3 | This is a long text | column |           | 3 | This i\u2026|\u2026|\n|---+---------------------+--------|           |---+-------\u2026+\u2026|\n</pre></div>\n\n<p>To set the width of a column, one field anywhere in the column may\ncontain just the string \u2018<samp>&lt;N&gt;</samp>\u2019 where <var>N</var> specifies the width\nas a number of characters.  You control displayed width of columns\nwith the following tools:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c <span class=\"key\">TAB</span></kbd> (<code>org-table-toggle-column-width</code>)</dt>\n<dd><span id=\"index-C_002dc-TAB-1\"></span>\n<span id=\"index-org_002dtable_002dtoggle_002dcolumn_002dwidth\"></span>\n<p>Shrink or expand current column.\n</p>\n<p>If a width cookie specifies a width W for the column, shrinking it\ndisplays the first W visible characters only.  Otherwise, the column\nis shrunk to a single character.\n</p>\n<p>When called before the first column or after the last one, ask for\na list of column ranges to operate on.\n</p>\n</dd>\n<dt><kbd>C-u C-c <span class=\"key\">TAB</span></kbd> (<code>org-table-shrink</code>)</dt>\n<dd><span id=\"index-C_002du-C_002dc-TAB\"></span>\n<span id=\"index-org_002dtable_002dshrink\"></span>\n<p>Shrink all columns with a column width.  Expand the others.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-c <span class=\"key\">TAB</span></kbd> (<code>org-table-expand</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-C_002dc-TAB\"></span>\n<span id=\"index-org_002dtable_002dexpand\"></span>\n<p>Expand all columns.\n</p></dd>\n</dl>\n\n<p>To see the full text of a shrunk field, hold the mouse over it:\na tool-tip window then shows the full contents of the field.\nAlternatively, <kbd>C-h .</kbd> (<code>display-local-help</code>) reveals them,\ntoo.  For convenience, any change near the shrunk part of a column\nexpands it.\n</p>\n<span id=\"index-org_002dstartup_002dshrink_002dall_002dtables\"></span>\n<p>Setting the option <code>org-startup-shrink-all-tables</code> shrinks all columns\ncontaining a width cookie in a file the moment it is visited.  You can\nalso set this option on a per-file basis with:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: shrink\n</pre></div>\n\n\n<p>If you would like to overrule the automatic alignment of number-rich\ncolumns to the right and of string-rich columns to the left, you can\nuse \u2018<samp>&lt;r&gt;</samp>\u2019, \u2018<samp>&lt;c&gt;</samp>\u2019 or \u2018<samp>&lt;l&gt;</samp>\u2019 in a similar fashion.  You may also combine\nalignment and field width like this: \u2018<samp>&lt;r10&gt;</samp>\u2019.\n</p>\n<p>Lines which only contain these formatting cookies are removed\nautomatically upon exporting the document.\n</p>\n"}, {"id": "33ColumnGroups", "content": "\n<span id=\"Column-Groups\"></span>\n<span id=\"Column-Groups-1\"></span><h3 class=\"section\">3.3 Column Groups</h3>\n\n<span id=\"index-grouping-columns-in-tables\"></span>\n\n<p>When Org exports tables, it does so by default without vertical lines\nbecause that is visually more satisfying in general.  Occasionally\nhowever, vertical lines can be useful to structure a table into groups\nof columns, much like horizontal lines can do for groups of rows.  In\norder to specify column groups, you can use a special row where the\nfirst field contains only \u2018<samp>/</samp>\u2019.  The further fields can either contain\n\u2018<samp>&lt;</samp>\u2019 to indicate that this column should start a group, \u2018<samp>&gt;</samp>\u2019 to indicate\nthe end of a column, or \u2018<samp>&lt;&gt;</samp>\u2019 (no space between \u2018<samp>&lt;</samp>\u2019 and \u2018<samp>&gt;</samp>\u2019) to make\na column a group of its own.  Upon export, boundaries between column\ngroups are marked with vertical lines.  Here is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">| N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |\n|---+-----+-----+-----+---------+------------|\n| / |  &lt;  |     |  &gt;  |       &lt; |          &gt; |\n| 1 |  1  |  1  |  1  |       1 |          1 |\n| 2 |  4  |  8  | 16  |  1.4142 |     1.1892 |\n| 3 |  9  | 27  | 81  |  1.7321 |     1.3161 |\n|---+-----+-----+-----+---------+------------|\n#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))\n</pre></div>\n\n<p>It is also sufficient to just insert the column group starters after\nevery vertical line you would like to have:\n</p>\n<div class=\"example\">\n<pre class=\"example\">| N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |\n|---+-----+-----+-----+---------+------------|\n| / | &lt;   |     |     | &lt;       |            |\n</pre></div>\n\n"}, {"id": "34TheOrgtblMinorMode", "content": "\n<span id=\"Orgtbl-Mode\"></span>\n<span id=\"The-Orgtbl-Minor-Mode\"></span><h3 class=\"section\">3.4 The Orgtbl Minor Mode</h3>\n\n<span id=\"index-Orgtbl-mode\"></span>\n<span id=\"index-minor-mode-for-tables\"></span>\n\n<span id=\"index-orgtbl_002dmode\"></span>\n<p>If you like the intuitive way the Org table editor works, you might\nalso want to use it in other modes like Text mode or Mail mode.  The\nminor mode Orgtbl mode makes this possible.  You can always toggle the\nmode with <kbd>M-x orgtbl-mode</kbd>.  To turn it on by default, for\nexample in Message mode, use\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'message-mode-hook #'turn-on-orgtbl)\n</pre></div>\n\n<p>Furthermore, with some special setup, it is possible to maintain\ntables in arbitrary syntax with Orgtbl mode.  For example, it is\npossible to construct LaTeX tables with the underlying ease and power\nof Orgtbl mode, including spreadsheet capabilities.  For details, see\n<a href=\"https://orgmode.org/org.html#Tables-in-Arbitrary-Syntax\">Tables in Arbitrary Syntax</a>.\n</p>\n"}, {"id": "35TheSpreadsheet", "content": "\n<span id=\"The-Spreadsheet\"></span>\n<span id=\"The-Spreadsheet-1\"></span><h3 class=\"section\">3.5 The Spreadsheet</h3>\n\n<span id=\"index-calculations_002c-in-tables-1\"></span>\n<span id=\"index-spreadsheet-capabilities\"></span>\n<span id=\"index-Calc-package\"></span>\n\n<p>The table editor makes use of the Emacs Calc package to implement\nspreadsheet-like capabilities.  It can also evaluate Emacs Lisp forms\nto derive fields from other fields.  While fully featured, Org\u2019s\nimplementation is not identical to other spreadsheets.  For example,\nOrg knows the concept of a <em>column formula</em> that will be applied to\nall non-header fields in a column without having to copy the formula\nto each relevant field.  There is also a formula debugger, and a\nformula editor with features for highlighting fields in the table\ncorresponding to the references at point in the formula, moving these\nreferences by arrow keys.\n</p>\n\n\n"}, {"id": "351References", "content": "\n<span id=\"References\"></span>\n<span id=\"References-1\"></span><h4 class=\"subsection\">3.5.1 References</h4>\n\n<span id=\"index-references\"></span>\n\n<p>To compute fields in the table from other fields, formulas must\nreference other fields or ranges.  In Org, fields can be referenced by\nname, by absolute coordinates, and by relative coordinates.  To find\nout what the coordinates of a field are, press <kbd>C-c ?</kbd> in\nthat field, or press <kbd>C-c }</kbd> to toggle the display of a grid.\n</p>\n<span id=\"Field-references\"></span><span id=\"Field-references-1\"></span><h4 class=\"subsubheading\">Field references</h4>\n\n<span id=\"index-field-references\"></span>\n<span id=\"index-references_002c-to-fields\"></span>\n<p>Formulas can reference the value of another field in two ways.  Like\nin any other spreadsheet, you may reference fields with\na letter/number combination like \u2018<samp>B3</samp>\u2019, meaning the second field in the\nthird row.  However, Org prefers to use another, more general\nrepresentation that looks like this:<a id=\"DOCF18\" href=\"https://orgmode.org/org.html#FOOT18\"><sup>18</sup></a>\n</p>\n<div class=\"example\">\n<pre class=\"example\">@ROW$COLUMN\n</pre></div>\n\n\n<p>Column specifications can be absolute like \u2018<samp>$1</samp>\u2019, \u2018<samp>$2</samp>\u2019, \u2026, \u2018<samp>$N</samp>\u2019, or\nrelative to the current column, i.e., the column of the field which is\nbeing computed, like \u2018<samp>$+1</samp>\u2019 or \u2018<samp>$-2</samp>\u2019.  \u2018<samp>$&lt;</samp>\u2019 and \u2018<samp>$&gt;</samp>\u2019 are immutable\nreferences to the first and last column, respectively, and you can use\n\u2018<samp>$&gt;&gt;&gt;</samp>\u2019 to indicate the third column from the right.\n</p>\n<p>The row specification only counts data lines and ignores horizontal\nseparator lines, or \u201chlines\u201d.  Like with columns, you can use absolute\nrow numbers \u2018<samp>@1</samp>\u2019, \u2018<samp>@2</samp>\u2019, \u2026, \u2018<samp>@N</samp>\u2019, and row numbers relative to the\ncurrent row like \u2018<samp>@+3</samp>\u2019 or \u2018<samp>@-1</samp>\u2019.  \u2018<samp>@&lt;</samp>\u2019 and \u2018<samp>@&gt;</samp>\u2019 are immutable\nreferences the first and last row in the table, respectively.  You may\nalso specify the row relative to one of the hlines: \u2018<samp>@I</samp>\u2019 refers to the\nfirst hline, \u2018<samp>@II</samp>\u2019 to the second, etc.  \u2018<samp>@-I</samp>\u2019 refers to the first such\nline above the current line, \u2018<samp>@+I</samp>\u2019 to the first such line below the\ncurrent line.  You can also write \u2018<samp>@III+2</samp>\u2019 which is the second data\nline after the third hline in the table.\n</p>\n<p>\u2018<samp>@0</samp>\u2019 and \u2018<samp>$0</samp>\u2019 refer to the current row and column, respectively, i.e.,\nto the row/column for the field being computed.  Also, if you omit\neither the column or the row part of the reference, the current\nrow/column is implied.\n</p>\n<p>Org\u2019s references with <em>unsigned</em> numbers are fixed references in the\nsense that if you use the same reference in the formula for two\ndifferent fields, the same field is referenced each time.  Org\u2019s\nreferences with <em>signed</em> numbers are floating references because the\nsame reference operator can reference different fields depending on\nthe field being calculated by the formula.\n</p>\n<p>Here are a few examples:\n</p>\n<table>\n<tbody><tr><td width=\"20%\">\u2018<samp>@2$3</samp>\u2019</td><td width=\"80%\">2nd row, 3rd column (same as \u2018<samp>C2</samp>\u2019)</td></tr>\n<tr><td width=\"20%\">\u2018<samp>$5</samp>\u2019</td><td width=\"80%\">column 5 in the current row (same as \u2018<samp>E&amp;</samp>\u2019)</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@2</samp>\u2019</td><td width=\"80%\">current column, row 2</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@-1$-3</samp>\u2019</td><td width=\"80%\">field one row up, three columns to the left</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@-I$2</samp>\u2019</td><td width=\"80%\">field just under hline above current row, column 2</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@&gt;$5</samp>\u2019</td><td width=\"80%\">field in the last row, in column 5</td></tr>\n</tbody></table>\n\n<span id=\"Range-references\"></span><span id=\"Range-references-1\"></span><h4 class=\"subsubheading\">Range references</h4>\n\n<span id=\"index-range-references\"></span>\n<span id=\"index-references_002c-to-ranges\"></span>\n<p>You may reference a rectangular range of fields by specifying two\nfield references connected by two dots \u2018<samp>..</samp>\u2019.  The ends are included in\nthe range.  If both fields are in the current row, you may simply use\n\u2018<samp>$2..$7</samp>\u2019, but if at least one field is in a different row, you need to\nuse the general \u2018<samp>@ROW$COLUMN</samp>\u2019 format at least for the first field,\ni.e., the reference must start with \u2018<samp>@</samp>\u2019 in order to be interpreted\ncorrectly.  Examples:\n</p>\n<table>\n<tbody><tr><td width=\"20%\">\u2018<samp>$1..$3</samp>\u2019</td><td width=\"80%\">first three fields in the current row</td></tr>\n<tr><td width=\"20%\">\u2018<samp>$P..$Q</samp>\u2019</td><td width=\"80%\">range, using column names (see <a href=\"https://orgmode.org/org.html#Advanced-features\">Advanced features</a>)</td></tr>\n<tr><td width=\"20%\">\u2018<samp>$&lt;&lt;&lt;..$&gt;&gt;</samp>\u2019</td><td width=\"80%\">start in third column, continue to the last but one</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@2$1..@4$3</samp>\u2019</td><td width=\"80%\">nine fields between these two fields (same as \u2018<samp>A2..C4</samp>\u2019)</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@-1$-2..@-1</samp>\u2019</td><td width=\"80%\">3 fields in the row above, starting from 2 columns on the left</td></tr>\n<tr><td width=\"20%\">\u2018<samp>@I..II</samp>\u2019</td><td width=\"80%\">between first and second hline, short for \u2018<samp>@I..@II</samp>\u2019</td></tr>\n</tbody></table>\n\n<p>Range references return a vector of values that can be fed into Calc\nvector functions.  Empty fields in ranges are normally suppressed, so\nthat the vector contains only the non-empty fields.  For other options\nwith the mode switches \u2018<samp>E</samp>\u2019, \u2018<samp>N</samp>\u2019 and examples, see <a href=\"https://orgmode.org/org.html#Formula-syntax-for-Calc\">Formula syntax for Calc</a>.\n</p>\n<span id=\"Field-coordinates-in-formulas\"></span><span id=\"Field-coordinates-in-formulas-1\"></span><h4 class=\"subsubheading\">Field coordinates in formulas</h4>\n\n<span id=\"index-field-coordinates\"></span>\n<span id=\"index-coordinates_002c-of-field\"></span>\n<span id=\"index-row_002c-of-field-coordinates\"></span>\n<span id=\"index-column_002c-of-field-coordinates\"></span>\n<span id=\"index-org_002dtable_002dcurrent_002dcolumn\"></span>\n<span id=\"index-org_002dtable_002dcurrent_002ddline\"></span>\n<p>One of the very first actions during evaluation of Calc formulas and\nLisp formulas is to substitute \u2018<samp>@#</samp>\u2019 and \u2018<samp>$#</samp>\u2019 in the formula with the\nrow or column number of the field where the current result will go to.\nThe traditional Lisp formula equivalents are <code>org-table-current-dline</code>\nand <code>org-table-current-column</code>.  Examples:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>if(@# % 2, $#, string(\"\"))</samp>\u2019</dt>\n<dd><p>Insert column number on odd rows, set field to empty on even rows.\n</p>\n</dd>\n<dt>\u2018<samp>$2 = '(identity remote(FOO, @@#$1))</samp>\u2019</dt>\n<dd><p>Copy text or values of each row of column 1 of the table named\n<var>FOO</var> into column 2 of the current table.\n</p>\n</dd>\n<dt>\u2018<samp>@3 = 2 * remote(FOO, @1$$#)</samp>\u2019</dt>\n<dd><p>Insert the doubled value of each column of row 1 of the table\nnamed <var>FOO</var> into row 3 of the current table.\n</p></dd>\n</dl>\n\n<p>For the second and third examples, table <var>FOO</var> must have at\nleast as many rows or columns as the current table.  Note that this is\ninefficient<a id=\"DOCF19\" href=\"https://orgmode.org/org.html#FOOT19\"><sup>19</sup></a> for large number of rows.\n</p>\n<span id=\"Named-references\"></span><span id=\"Named-references-1\"></span><h4 class=\"subsubheading\">Named references</h4>\n\n<span id=\"index-named-references\"></span>\n<span id=\"index-references_002c-named\"></span>\n<span id=\"index-name_002c-of-column-or-field\"></span>\n<span id=\"index-constants_002c-in-calculations\"></span>\n<span id=\"index-CONSTANTS_002c-keyword\"></span>\n<span id=\"index-org_002dtable_002dformula_002dconstants\"></span>\n\n<p>\u2018<samp>$name</samp>\u2019 is interpreted as the name of a column, parameter or constant.\nConstants are defined globally through the variable\n<code>org-table-formula-constants</code>, and locally\u2014for the file\u2014through\na line like this example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6\n</pre></div>\n\n\n<span id=\"index-constants_002dunit_002dsystem\"></span>\n<span id=\"index-constants_002eel-1\"></span>\n<p>Also, properties (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>) can be used as\nconstants in table formulas: for a property \u2018<samp>Xyz</samp>\u2019 use the name\n\u2018<samp>$PROP_Xyz</samp>\u2019, and the property will be searched in the current outline\nentry and in the hierarchy above it.  If you have the \u2018<samp>constants.el</samp>\u2019\npackage, it will also be used to resolve constants, including natural\nconstants like \u2018<samp>$h</samp>\u2019 for Planck\u2019s constant, and units like \u2018<samp>$km</samp>\u2019 for\nkilometers<a id=\"DOCF20\" href=\"https://orgmode.org/org.html#FOOT20\"><sup>20</sup></a>.  Column names and parameters can be specified in\nspecial table lines.  These are described below, see <a href=\"https://orgmode.org/org.html#Advanced-features\">Advanced features</a>.  All names must start with a letter, and further consist\nof letters and numbers.\n</p>\n<span id=\"Remote-references\"></span><span id=\"Remote-references-1\"></span><h4 class=\"subsubheading\">Remote references</h4>\n\n<span id=\"index-remote-references\"></span>\n<span id=\"index-references_002c-remote\"></span>\n<span id=\"index-references_002c-to-a-different-table\"></span>\n<span id=\"index-name_002c-of-column-or-field-1\"></span>\n<span id=\"index-NAME_002c-keyword\"></span>\n<p>You may also reference constants, fields and ranges from a different\ntable, either in the current file or even in a different file.  The\nsyntax is\n</p>\n<div class=\"example\">\n<pre class=\"example\">remote(NAME,REF)\n</pre></div>\n\n\n<p>where <var>NAME</var> can be the name of a table in the current file\nas set by a \u2018<samp>#+NAME:</samp>\u2019 line before the table.  It can also be the ID of\nan entry, even in a different file, and the reference then refers to\nthe first table in that entry.  <var>REF</var> is an absolute field or\nrange reference as described above for example \u2018<samp>@3$3</samp>\u2019 or \u2018<samp>$somename</samp>\u2019,\nvalid in the referenced table.\n</p>\n<span id=\"index-table-indirection\"></span>\n<p>When <var>NAME</var> has the format \u2018<samp>@ROW$COLUMN</samp>\u2019, it is substituted\nwith the name or ID found in this field of the current table.  For\nexample \u2018<samp>remote($1, @@&gt;$2)</samp>\u2019 \u21d2 \u2018<samp>remote(year_2013, @@&gt;$1)</samp>\u2019.  The format\n\u2018<samp>B3</samp>\u2019 is not supported because it can not be distinguished from a plain\ntable name or ID.\n</p>\n"}, {"id": "352FormulasyntaxforCalc", "content": "\n<span id=\"Formula-syntax-for-Calc\"></span>\n<span id=\"Formula-syntax-for-Calc-1\"></span><h4 class=\"subsection\">3.5.2 Formula syntax for Calc</h4>\n\n<span id=\"index-formula-syntax_002c-Calc\"></span>\n<span id=\"index-syntax_002c-of-formulas\"></span>\n\n<p>A formula can be any algebraic expression understood by the Emacs Calc\npackage.  Note that Calc has the non-standard convention that \u2018<samp>/</samp>\u2019 has\nlower precedence than \u2018<samp>*</samp>\u2019, so that \u2018<samp>a/b*c</samp>\u2019 is interpreted as\n\u2018<samp>(a/(b*c))</samp>\u2019.  Before evaluation by <code>calc-eval</code> (see <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/calc.html#Calling-Calc-from-Your-Programs\">(calc)Calling Calc from\nYour Lisp Programs</a>), variable substitution takes place according to\nthe rules described above.\n</p>\n<span id=\"index-vectors_002c-in-table-calculations\"></span>\n<p>The range vectors can be directly fed into the Calc vector functions\nlike <code>vmean</code> and <code>vsum</code>.\n</p>\n<span id=\"index-format-specifier_002c-in-spreadsheet\"></span>\n<span id=\"index-mode_002c-for-Calc\"></span>\n<span id=\"index-org_002dcalc_002ddefault_002dmodes\"></span>\n<p>A formula can contain an optional mode string after a semicolon.  This\nstring consists of flags to influence Calc and other modes during\nexecution.  By default, Org uses the standard Calc modes (precision\n12, angular units degrees, fraction and symbolic modes off).  The\ndisplay format, however, has been changed to \u2018<samp>(float 8)</samp>\u2019 to keep\ntables compact.  The default settings can be configured using the\nvariable <code>org-calc-default-modes</code>.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>p20</samp>\u2019</dt>\n<dd><p>Set the internal Calc calculation precision to 20 digits.\n</p>\n</dd>\n<dt>\u2018<samp>n3</samp>\u2019, \u2018<samp>s3</samp>\u2019, \u2018<samp>e2</samp>\u2019, \u2018<samp>f4</samp>\u2019</dt>\n<dd><p>Normal, scientific, engineering or fixed format of the result of\nCalc passed back to Org.  Calc formatting is unlimited in precision\nas long as the Calc calculation precision is greater.\n</p>\n</dd>\n<dt>\u2018<samp>D</samp>\u2019, \u2018<samp>R</samp>\u2019</dt>\n<dd><p>Degree and radian angle modes of Calc.\n</p>\n</dd>\n<dt>\u2018<samp>F</samp>\u2019, \u2018<samp>S</samp>\u2019</dt>\n<dd><p>Fraction and symbolic modes of Calc.\n</p>\n</dd>\n<dt>\u2018<samp>u</samp>\u2019</dt>\n<dd><p>Units simplification mode of Calc.  Calc is also a symbolic\ncalculator and is capable of working with values having a unit,\nrepresented with numerals followed by a unit string in Org table\ncells.  This mode instructs Calc to simplify the units in the\ncomputed expression before returning the result.\n</p>\n</dd>\n<dt>\u2018<samp>T</samp>\u2019, \u2018<samp>t</samp>\u2019, \u2018<samp>U</samp>\u2019</dt>\n<dd><p>Duration computations in Calc or Lisp, <a href=\"https://orgmode.org/org.html#Durations-and-time-values\">Durations and time values</a>.\n</p>\n</dd>\n<dt>\u2018<samp>E</samp>\u2019</dt>\n<dd><p>If and how to consider empty fields.  Without \u2018<samp>E</samp>\u2019 empty fields in\nrange references are suppressed so that the Calc vector or Lisp list\ncontains only the non-empty fields.  With \u2018<samp>E</samp>\u2019 the empty fields are\nkept.  For empty fields in ranges or empty field references the\nvalue \u2018<samp>nan</samp>\u2019 (not a number) is used in Calc formulas and the empty\nstring is used for Lisp formulas.  Add \u2018<samp>N</samp>\u2019 to use 0 instead for both\nformula types.  For the value of a field the mode \u2018<samp>N</samp>\u2019 has higher\nprecedence than \u2018<samp>E</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>N</samp>\u2019</dt>\n<dd><p>Interpret all fields as numbers, use 0 for non-numbers.  See the\nnext section to see how this is essential for computations with Lisp\nformulas.  In Calc formulas it is used only occasionally because\nthere number strings are already interpreted as numbers without \u2018<samp>N</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>L</samp>\u2019</dt>\n<dd><p>Literal, for Lisp formulas only.  See the next section.\n</p></dd>\n</dl>\n\n<p>Unless you use large integer numbers or high-precision calculation and\ndisplay for floating point numbers you may alternatively provide\na <code>printf</code> format specifier to reformat the Calc result after it has\nbeen passed back to Org instead of letting Calc already do the\nformatting<a id=\"DOCF21\" href=\"https://orgmode.org/org.html#FOOT21\"><sup>21</sup></a>.  A few examples:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>$1+$2</samp>\u2019</td><td>Sum of first and second field</td></tr>\n<tr><td>\u2018<samp>$1+$2;%.2f</samp>\u2019</td><td>Same, format result to two decimals</td></tr>\n<tr><td>\u2018<samp>exp($2)+exp($1)</samp>\u2019</td><td>Math functions can be used</td></tr>\n<tr><td>\u2018<samp>$0;%.1f</samp>\u2019</td><td>Reformat current cell to 1 decimal</td></tr>\n<tr><td>\u2018<samp>($3-32)*5/9</samp>\u2019</td><td>Degrees F \u2192 C conversion</td></tr>\n<tr><td>\u2018<samp>$c/$1/$cm</samp>\u2019</td><td>Hz \u2192 cm conversion, using \u2018<samp>constants.el</samp>\u2019</td></tr>\n<tr><td>\u2018<samp>tan($1);Dp3s1</samp>\u2019</td><td>Compute in degrees, precision 3, display SCI 1</td></tr>\n<tr><td>\u2018<samp>sin($1);Dp3%.1e</samp>\u2019</td><td>Same, but use <code>printf</code> specifier for display</td></tr>\n<tr><td>\u2018<samp>vmean($2..$7)</samp>\u2019</td><td>Compute column range mean, using vector function</td></tr>\n<tr><td>\u2018<samp>vmean($2..$7);EN</samp>\u2019</td><td>Same, but treat empty fields as 0</td></tr>\n<tr><td>\u2018<samp>taylor($3,x=7,2)</samp>\u2019</td><td>Taylor series of $3, at x=7, second degree</td></tr>\n</tbody></table>\n\n<p>Calc also contains a complete set of logical operations (see <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/calc.html#Logical-Operations\">(calc)Logical\nOperations</a>).  For example\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>if($1 &lt; 20, teen, string(\"\"))</samp>\u2019</dt>\n<dd><p>\u2018<samp>\"teen\"</samp>\u2019 if age \u2018<samp>$1</samp>\u2019 is less than 20, else the Org table result\nfield is set to empty with the empty string.\n</p>\n</dd>\n<dt>\u2018<samp>if(\"$1\" =\u200b= \"nan\" || \"$2\" =\u200b= \"nan\", string(\"\"), $1 + $2); E f-1</samp>\u2019</dt>\n<dd><p>Sum of the first two columns.  When at least one of the input fields\nis empty the Org table result field is set to empty.  \u2018<samp>E</samp>\u2019 is\nrequired to not convert empty fields to 0.  \u2018<samp>f-1</samp>\u2019 is an optional\nCalc format string similar to \u2018<samp>%.1f</samp>\u2019 but leaves empty results empty.\n</p>\n</dd>\n<dt>\u2018<samp>if(typeof(vmean($1..$7)) =\u200b= 12, string(\"\"), vmean($1..$7); E</samp>\u2019</dt>\n<dd><p>Mean value of a range unless there is any empty field.  Every field\nin the range that is empty is replaced by \u2018<samp>nan</samp>\u2019 which lets \u2018<samp>vmean</samp>\u2019\nresult in \u2018<samp>nan</samp>\u2019.  Then \u2018<samp>typeof =</samp>\u2019 12= detects the \u2018<samp>nan</samp>\u2019 from <code>vmean</code>\nand the Org table result field is set to empty.  Use this when the\nsample set is expected to never have missing values.\n</p>\n</dd>\n<dt>\u2018<samp>if(\"$1..$7\" =\u200b= \"[]\", string(\"\"), vmean($1..$7))</samp>\u2019</dt>\n<dd><p>Mean value of a range with empty fields skipped.  Every field in the\nrange that is empty is skipped.  When all fields in the range are\nempty the mean value is not defined and the Org table result field\nis set to empty.  Use this when the sample set can have a variable\nsize.\n</p>\n</dd>\n<dt>\u2018<samp>vmean($1..$7); EN</samp>\u2019</dt>\n<dd><p>To complete the example before: Mean value of a range with empty\nfields counting as samples with value 0.  Use this only when\nincomplete sample sets should be padded with 0 to the full size.\n</p></dd>\n</dl>\n\n<p>You can add your own Calc functions defined in Emacs Lisp with\n<code>defmath</code> and use them in formula syntax for Calc.\n</p>\n"}, {"id": "353EmacsLispformsasformulas", "content": "\n<span id=\"Formula-syntax-for-Lisp\"></span>\n<span id=\"Emacs-Lisp-forms-as-formulas\"></span><h4 class=\"subsection\">3.5.3 Emacs Lisp forms as formulas</h4>\n\n<span id=\"index-Lisp-forms_002c-as-table-formulas\"></span>\n\n<p>It is also possible to write a formula in Emacs Lisp.  This can be\nuseful for string manipulation and control structures, if Calc\u2019s\nfunctionality is not enough.\n</p>\n<p>A formula is evaluated as a Lisp form when it starts with a\nsingle-quote followed by an opening parenthesis.  Cell table\nreferences are interpolated into the Lisp form before execution.  The\nevaluation should return either a string or a number.  Evaluation\nmodes and a <code>printf</code> format used to render the returned values can be\nspecified after a semicolon.\n</p>\n<p>By default, references are interpolated as literal Lisp strings: the\nfield content is replaced in the Lisp form stripped of leading and\ntrailing white space and surrounded in double-quotes.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">'(concat $1 $2)\n</pre></div>\n\n\n<p>concatenates the content of columns 1 and column 2.\n</p>\n<p>When the \u2018<samp>N</samp>\u2019 flag is used, all referenced elements are parsed as\nnumbers and interpolated as Lisp numbers, without quotes.  Fields that\ncannot be parsed as numbers are interpolated as zeros.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">'(+ $1 $2);N\n</pre></div>\n\n\n<p>adds columns 1 and 2, equivalent to Calc\u2019s \u2018<samp>$1+$2</samp>\u2019.  Ranges are\ninserted as space-separated fields, so they can be embedded in list or\nvector syntax.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">'(apply '+ '($1..$4));N\n</pre></div>\n\n\n<p>computes the sum of columns 1 to 4, like Calc\u2019s \u2018<samp>vsum($1..$4)</samp>\u2019.\n</p>\n<p>When the \u2018<samp>L</samp>\u2019 flag is used, all fields are interpolated literally: the\ncell content is replaced in the Lisp form stripped of leading and\ntrailing white space and without quotes.  If a reference is intended\nto be interpreted as a string by the Lisp form, the reference operator\nitself should be enclosed in double-quotes, like \u2018<samp>\"$3\"</samp>\u2019.  The \u2018<samp>L</samp>\u2019 flag\nis useful when strings and numbers are used in the same Lisp form.  For\nexample:\n</p>\n<div class=\"example\">\n<pre class=\"example\">'(substring \"$1\" $2 $3);L\n</pre></div>\n\n\n<p>extracts the part of the string in column 1 between the character\npositions specified in the integers in column 2 and 3 and it is easier\nto read than the equivalent:\n</p>\n<div class=\"example\">\n<pre class=\"example\">'(substring $1 (string-to-number $2) (string-to-number $3))\n</pre></div>\n\n"}, {"id": "354Durationsandtimevalues", "content": "\n<span id=\"Durations-and-time-values\"></span>\n<span id=\"Durations-and-time-values-1\"></span><h4 class=\"subsection\">3.5.4 Durations and time values</h4>\n\n<span id=\"index-duration_002c-computing\"></span>\n<span id=\"index-time_002c-computing\"></span>\n<span id=\"index-org_002dtable_002dduration_002dcustom_002dformat\"></span>\n\n<p>If you want to compute time values use the \u2018<samp>T</samp>\u2019, \u2018<samp>t</samp>\u2019, or \u2018<samp>U</samp>\u2019 flag,\neither in Calc formulas or Elisp formulas:\n</p>\n<div class=\"example\">\n<pre class=\"example\">|  Task 1 |   Task 2 |    Total |\n|---------+----------+----------|\n|    2:12 |     1:47 | 03:59:00 |\n|    2:12 |     1:47 |    03:59 |\n| 3:02:20 | -2:07:00 |     0.92 |\n#+TBLFM: @2$3=$1+$2;T::@3$3=$1+$2;U::@4$3=$1+$2;t\n</pre></div>\n\n<p>Input duration values must be of the form \u2018<samp>HH:MM[:SS]</samp>\u2019, where seconds\nare optional.  With the \u2018<samp>T</samp>\u2019 flag, computed durations are displayed as\n\u2018<samp>HH:MM:SS</samp>\u2019 (see the first formula above).  With the \u2018<samp>U</samp>\u2019 flag, seconds\nare omitted so that the result is only \u2018<samp>HH:MM</samp>\u2019 (see second formula\nabove).  Zero-padding of the hours field depends upon the value of the\nvariable <code>org-table-duration-hour-zero-padding</code>.\n</p>\n<p>With the \u2018<samp>t</samp>\u2019 flag, computed durations are displayed according to the\nvalue of the option <code>org-table-duration-custom-format</code>, which defaults\nto <code>hours</code> and displays the result as a fraction of hours (see the\nthird formula in the example above).\n</p>\n<p>Negative duration values can be manipulated as well, and integers are\nconsidered as seconds in addition and subtraction.\n</p>\n"}, {"id": "355Fieldandrangeformulas", "content": "\n<span id=\"Field-and-range-formulas\"></span>\n<span id=\"Field-and-range-formulas-1\"></span><h4 class=\"subsection\">3.5.5 Field and range formulas</h4>\n\n<span id=\"index-field-formula\"></span>\n<span id=\"index-range-formula\"></span>\n<span id=\"index-formula_002c-for-individual-table-field\"></span>\n<span id=\"index-formula_002c-for-range-of-fields\"></span>\n\n<p>To assign a formula to a particular field, type it directly into the\nfield, preceded by \u2018<samp>:=</samp>\u2019, for example \u2018<samp>vsum(@II..III)</samp>\u2019.  When you press\n<kbd><span class=\"key\">TAB</span></kbd> or <kbd><span class=\"key\">RET</span></kbd> or <kbd>C-c C-c</kbd> with point\nstill in the field, the formula is stored as the formula for this\nfield, evaluated, and the current field is replaced with the result.\n</p>\n<span id=\"index-TBLFM_002c-keyword\"></span>\n<p>Formulas are stored in a special \u2018<samp>TBLFM</samp>\u2019 keyword located directly\nbelow the table.  If you type the equation in the fourth field of the\nthird data line in the table, the formula looks like \u2018<samp>@3$4=$1+$2</samp>\u2019.\nWhen inserting/deleting/swapping column and rows with the appropriate\ncommands, <em>absolute references</em> (but not relative ones) in stored\nformulas are modified in order to still reference the same field.  To\navoid this from happening, in particular in range references, anchor\nranges at the table borders (using \u2018<samp>@&lt;</samp>\u2019, \u2018<samp>@&gt;</samp>\u2019, \u2018<samp>$&lt;</samp>\u2019, \u2018<samp>$&gt;</samp>\u2019), or at\nhlines using the \u2018<samp>@I</samp>\u2019 notation.  Automatic adaptation of field\nreferences does not happen if you edit the table structure with normal\nediting commands\u2014you must fix the formulas yourself.\n</p>\n<p>Instead of typing an equation into the field, you may also use the\nfollowing command\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-u C-c =</kbd> (<code>org-table-eval-formula</code>)</dt>\n<dd><span id=\"index-C_002du-C_002dc-_003d\"></span>\n<span id=\"index-org_002dtable_002deval_002dformula\"></span>\n<p>Install a new formula for the current field.  The command prompts\nfor a formula with default taken from the \u2018<samp>TBLFM</samp>\u2019 keyword,\napplies it to the current field, and stores it.\n</p></dd>\n</dl>\n\n<p>The left-hand side of a formula can also be a special expression in\norder to assign the formula to a number of different fields.  There is\nno keyboard shortcut to enter such range formulas.  To add them, use\nthe formula editor (see <a href=\"https://orgmode.org/org.html#Editing-and-debugging-formulas\">Editing and debugging formulas</a>) or edit\nthe \u2018<samp>TBLFM</samp>\u2019 keyword directly.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>$2=</samp>\u2019</dt>\n<dd><p>Column formula, valid for the entire column.  This is so common that\nOrg treats these formulas in a special way, see <a href=\"https://orgmode.org/org.html#Column-formulas\">Column formulas</a>.\n</p>\n</dd>\n<dt>\u2018<samp>@3=</samp>\u2019</dt>\n<dd><p>Row formula, applies to all fields in the specified row.  \u2018<samp>@&gt;=</samp>\u2019\nmeans the last row.\n</p>\n</dd>\n<dt>\u2018<samp>@1$2..@4$3=</samp>\u2019</dt>\n<dd><p>Range formula, applies to all fields in the given rectangular range.\nThis can also be used to assign a formula to some but not all fields\nin a row.\n</p>\n</dd>\n<dt>\u2018<samp>$NAME=</samp>\u2019</dt>\n<dd><p>Named field, see <a href=\"https://orgmode.org/org.html#Advanced-features\">Advanced features</a>.\n</p></dd>\n</dl>\n\n"}, {"id": "356Columnformulas", "content": "\n<span id=\"Column-formulas\"></span>\n<span id=\"Column-formulas-1\"></span><h4 class=\"subsection\">3.5.6 Column formulas</h4>\n\n<span id=\"index-column-formula\"></span>\n<span id=\"index-formula_002c-for-table-column\"></span>\n\n<p>When you assign a formula to a simple column reference like \u2018<samp>$3=</samp>\u2019, the\nsame formula is used in all fields of that column, with the following\nvery convenient exceptions: (i) If the table contains horizontal\nseparator hlines with rows above and below, everything before the\nfirst such hline is considered part of the table <em>header</em> and is not\nmodified by column formulas.  Therefore a header is mandatory when you\nuse column formulas and want to add hlines to group rows, like for\nexample to separate a total row at the bottom from the summand rows\nabove.  (ii) Fields that already get a value from a field/range\nformula are left alone by column formulas.  These conditions make\ncolumn formulas very easy to use.\n</p>\n<p>To assign a formula to a column, type it directly into any field in\nthe column, preceded by an equal sign, like \u2018<samp>=$1+$2</samp>\u2019.  When you press\n<kbd><span class=\"key\">TAB</span></kbd> or <kbd><span class=\"key\">RET</span></kbd> or <kbd>C-c C-c</kbd> with point\nstill in the field, the formula is stored as the formula for the\ncurrent column, evaluated and the current field replaced with the\nresult.  If the field contains only \u2018<samp>=</samp>\u2019, the previously stored formula\nfor this column is used.  For each column, Org only remembers the most\nrecently used formula.  In the \u2018<samp>TBLFM</samp>\u2019 keyword, column formulas look\nlike \u2018<samp>$4=$1+$2</samp>\u2019.  The left-hand side of a column formula can not be\nthe name of column, it must be the numeric column reference or \u2018<samp>$&gt;</samp>\u2019.\n</p>\n<p>Instead of typing an equation into the field, you may also use the\nfollowing command:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c =</kbd> (<code>org-table-eval-formula</code>)</dt>\n<dd><span id=\"index-C_002dc-_003d\"></span>\n<span id=\"index-org_002dtable_002deval_002dformula-1\"></span>\n<p>Install a new formula for the current column and replace current\nfield with the result of the formula.  The command prompts for\na formula, with default taken from the \u2018<samp>TBLFM</samp>\u2019 keyword, applies it\nto the current field and stores it.  With a numeric prefix argument,\ne.g., <kbd>C-5 C-c =</kbd>, the command applies it to that many\nconsecutive fields in the current column.\n</p></dd>\n</dl>\n\n"}, {"id": "357Lookupfunctions", "content": "\n<span id=\"Lookup-functions\"></span>\n<span id=\"Lookup-functions-1\"></span><h4 class=\"subsection\">3.5.7 Lookup functions</h4>\n\n<span id=\"index-lookup-functions-in-tables\"></span>\n<span id=\"index-table-lookup-functions\"></span>\n\n<p>Org has three predefined Emacs Lisp functions for lookups in tables.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>(org-lookup-first VAL S-LIST R-LIST &amp;optional PREDICATE)</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlookup_002dfirst\"></span>\n<p>Searches for the first element <var>S</var> in list\n<var>S-LIST</var> for which\n</p><div class=\"lisp\">\n<pre class=\"lisp\">(PREDICATE VAL S)\n</pre></div>\n<p>is non-<code>nil</code>; returns the value from the corresponding position in\nlist <var>R-LIST</var>.  The default <var>PREDICATE</var> is\n<code>equal</code>.  Note that the parameters <var>VAL</var> and <var>S</var>\nare passed to <var>PREDICATE</var> in the same order as the\ncorresponding parameters are in the call to <code>org-lookup-first</code>,\nwhere <var>VAL</var> precedes <var>S-LIST</var>.  If\n<var>R-LIST</var> is <code>nil</code>, the matching element <var>S</var> of\n<var>S-LIST</var> is returned.\n</p>\n</dd>\n<dt>\u2018<samp>(org-lookup-last VAL S-LIST R-LIST &amp;optional PREDICATE)</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlookup_002dlast\"></span>\n<p>Similar to <code>org-lookup-first</code> above, but searches for the <em>last</em>\nelement for which <var>PREDICATE</var> is non-<code>nil</code>.\n</p>\n</dd>\n<dt>\u2018<samp>(org-lookup-all VAL S-LIST R-LIST &amp;optional PREDICATE)</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlookup_002dall\"></span>\n<p>Similar to <code>org-lookup-first</code>, but searches for <em>all</em> elements for\nwhich <var>PREDICATE</var> is non-<code>nil</code>, and returns <em>all</em>\ncorresponding values.  This function can not be used by itself in\na formula, because it returns a list of values.  However, powerful\nlookups can be built when this function is combined with other Emacs\nLisp functions.\n</p></dd>\n</dl>\n\n<p>If the ranges used in these functions contain empty fields, the \u2018<samp>E</samp>\u2019\nmode for the formula should usually be specified: otherwise empty\nfields are not included in <var>S-LIST</var> and/or <var>R-LIST</var>\nwhich can, for example, result in an incorrect mapping from an element\nof <var>S-LIST</var> to the corresponding element of\n<var>R-LIST</var>.\n</p>\n<p>These three functions can be used to implement associative arrays,\ncount matching cells, rank results, group data, etc.  For practical\nexamples see <a href=\"https://orgmode.org/worg/org-tutorials/org-lookups.html\">this tutorial on Worg</a>.\n</p>\n"}, {"id": "358Editinganddebuggingformulas", "content": "\n<span id=\"Editing-and-debugging-formulas\"></span>\n<span id=\"Editing-and-debugging-formulas-1\"></span><h4 class=\"subsection\">3.5.8 Editing and debugging formulas</h4>\n\n<span id=\"index-formula-editing\"></span>\n<span id=\"index-editing_002c-of-table-formulas\"></span>\n\n<span id=\"index-org_002dtable_002duse_002dstandard_002dreferences\"></span>\n<p>You can edit individual formulas in the minibuffer or directly in the\nfield.  Org can also prepare a special buffer with all active formulas\nof a table.  When offering a formula for editing, Org converts\nreferences to the standard format (like \u2018<samp>B3</samp>\u2019 or \u2018<samp>D&amp;</samp>\u2019) if possible.  If\nyou prefer to only work with the internal format (like \u2018<samp>@3$2</samp>\u2019 or\n\u2018<samp>$4</samp>\u2019), configure the variable <code>org-table-use-standard-references</code>.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c =</kbd> or <kbd>C-u C-c =</kbd> (<code>org-table-eval-formula</code>)</dt>\n<dd><span id=\"index-C_002dc-_003d-1\"></span>\n<span id=\"index-C_002du-C_002dc-_003d-1\"></span>\n<span id=\"index-org_002dtable_002deval_002dformula-2\"></span>\n<p>Edit the formula associated with the current column/field in the\nminibuffer.  See <a href=\"https://orgmode.org/org.html#Column-formulas\">Column formulas</a>, and <a href=\"https://orgmode.org/org.html#Field-and-range-formulas\">Field and range formulas</a>.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-c =</kbd> (<code>org-table-eval-formula</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-C_002dc-_003d\"></span>\n<span id=\"index-org_002dtable_002deval_002dformula-3\"></span>\n<p>Re-insert the active formula (either a field formula, or a column\nformula) into the current field, so that you can edit it directly in\nthe field.  The advantage over editing in the minibuffer is that you\ncan use the command <kbd>C-c ?</kbd>.\n</p>\n</dd>\n<dt><kbd>C-c ?</kbd> (<code>org-table-field-info</code>)</dt>\n<dd><span id=\"index-C_002dc-_003f\"></span>\n<span id=\"index-org_002dtable_002dfield_002dinfo\"></span>\n<p>While editing a formula in a table field, highlight the field(s)\nreferenced by the reference at point position in the formula.\n</p>\n</dd>\n<dt><kbd>C-c }</kbd> (<code>org-table-toggle-coordinate-overlays</code>)</dt>\n<dd><span id=\"index-C_002dc-_007d\"></span>\n<span id=\"index-org_002dtable_002dtoggle_002dcoordinate_002doverlays\"></span>\n<p>Toggle the display of row and column numbers for a table, using\noverlays.  These are updated each time the table is aligned; you can\nforce it with <kbd>C-c C-c</kbd>.\n</p>\n</dd>\n<dt><kbd>C-c {</kbd> (<code>org-table-toggle-formula-debugger</code>)</dt>\n<dd><span id=\"index-C_002dc-_007b\"></span>\n<span id=\"index-org_002dtable_002dtoggle_002dformula_002ddebugger\"></span>\n<p>Toggle the formula debugger on and off.  See below.\n</p>\n</dd>\n<dt><kbd>C-c '</kbd> (<code>org-table-edit-formulas</code>)</dt>\n<dd><span id=\"index-C_002dc-_0027\"></span>\n<span id=\"index-org_002dtable_002dedit_002dformulas\"></span>\n<p>Edit all formulas for the current table in a special buffer, where\nthe formulas are displayed one per line.  If the current field has\nan active formula, point in the formula editor marks it.  While\ninside the special buffer, Org automatically highlights any field or\nrange reference at point position.  You may edit, remove and add\nformulas, and use the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-c</kbd> or <kbd>C-x C-s</kbd> (<code>org-table-fedit-finish</code>)</dt>\n<dd><span id=\"index-C_002dx-C_002ds\"></span>\n<span id=\"index-C_002dc-C_002dc-3\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dfinish\"></span>\n<p>Exit the formula editor and store the modified formulas.  With\n<kbd>C-u</kbd> prefix, also apply the new formulas to the\nentire table.\n</p>\n</dd>\n<dt><kbd>C-c C-q</kbd> (<code>org-table-fedit-abort</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dq\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dabort\"></span>\n<p>Exit the formula editor without installing changes.\n</p>\n</dd>\n<dt><kbd>C-c C-r</kbd> (<code>org-table-fedit-toggle-ref-type</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dr-1\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dtoggle_002dref_002dtype\"></span>\n<p>Toggle all references in the formula editor between standard (like\n\u2018<samp>B3</samp>\u2019) and internal (like \u2018<samp>@3$2</samp>\u2019).\n</p>\n</dd>\n<dt><kbd><span class=\"key\">TAB</span></kbd> (<code>org-table-fedit-lisp-indent</code>)</dt>\n<dd><span id=\"index-TAB-4\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dlisp_002dindent\"></span>\n<p>Pretty-print or indent Lisp formula at point.  When in a line\ncontaining a Lisp formula, format the formula according to Emacs\nLisp rules.  Another <kbd><span class=\"key\">TAB</span></kbd> collapses the formula back\nagain.  In the open formula, <kbd><span class=\"key\">TAB</span></kbd> re-indents just like\nin Emacs Lisp mode.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">TAB</span></kbd> (<code>lisp-complete-symbol</code>)</dt>\n<dd><span id=\"index-M_002dTAB\"></span>\n<span id=\"index-lisp_002dcomplete_002dsymbol\"></span>\n<p>Complete Lisp symbols, just like in Emacs Lisp mode.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">UP</span></kbd>, <kbd>S-<span class=\"key\">DOWN</span></kbd>, <kbd>S-<span class=\"key\">LEFT</span></kbd>, <kbd>S-<span class=\"key\">RIGHT</span></kbd></dt>\n<dd><span id=\"index-S_002dUP-2\"></span>\n<span id=\"index-S_002dDOWN-2\"></span>\n<span id=\"index-S_002dLEFT-2\"></span>\n<span id=\"index-S_002dRIGHT-2\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dref_002dup\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dref_002ddown\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dref_002dleft\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dref_002dright\"></span>\n<p>Shift the reference at point.  For example, if the reference is\n\u2018<samp>B3</samp>\u2019 and you press <kbd>S-<span class=\"key\">RIGHT</span></kbd>, it becomes \u2018<samp>C3</samp>\u2019.  This also\nworks for relative references and for hline references.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">UP</span></kbd> (<code>org-table-fedit-line-up</code>)</dt>\n<dd><span id=\"index-M_002dS_002dUP-1\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dline_002dup\"></span>\n<p>Move the test line for column formulas up in the Org buffer.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">DOWN</span></kbd> (<code>org-table-fedit-line-down</code>)</dt>\n<dd><span id=\"index-M_002dS_002dDOWN-1\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dline_002ddown\"></span>\n<p>Move the test line for column formulas down in the Org buffer.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">UP</span></kbd> (<code>org-table-fedit-scroll-up</code>)</dt>\n<dd><span id=\"index-M_002dUP-3\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dscroll_002dup\"></span>\n<p>Scroll up the window displaying the table.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">DOWN</span></kbd> (<code>org-table-fedit-scroll-down</code>)</dt>\n<dd><span id=\"index-M_002dDOWN-3\"></span>\n<span id=\"index-org_002dtable_002dfedit_002dscroll_002ddown\"></span>\n<p>Scroll down the window displaying the table.\n</p>\n</dd>\n<dt><kbd>C-c }</kbd></dt>\n<dd><span id=\"index-C_002dc-_007d-1\"></span>\n<span id=\"index-org_002dtable_002dtoggle_002dcoordinate_002doverlays-1\"></span>\n<p>Turn the coordinate grid in the table on and off.\n</p></dd>\n</dl>\n</dd>\n</dl>\n\n<p>Making a table field blank does not remove the formula associated with\nthe field, because that is stored in a different line\u2014the \u2018<samp>TBLFM</samp>\u2019\nkeyword line.  During the next recalculation, the field will be filled\nagain.  To remove a formula from a field, you have to give an empty\nreply when prompted for the formula, or to edit the \u2018<samp>TBLFM</samp>\u2019 keyword.\n</p>\n<span id=\"index-C_002dc-C_002dc-4\"></span>\n<p>You may edit the \u2018<samp>TBLFM</samp>\u2019 keyword directly and re-apply the changed\nequations with <kbd>C-c C-c</kbd> in that line or with the normal\nrecalculation commands in the table.\n</p>\n<span id=\"Using-multiple-TBLFM-lines\"></span><span id=\"Using-multiple-TBLFM-lines-1\"></span><h4 class=\"subsubheading\">Using multiple \u2018<samp>TBLFM</samp>\u2019 lines</h4>\n\n<span id=\"index-multiple-formula-lines\"></span>\n<span id=\"index-TBLFM-keywords_002c-multiple\"></span>\n<span id=\"index-TBLFM_002c-switching\"></span>\n\n<span id=\"index-C_002dc-C_002dc-5\"></span>\n<p>You may apply the formula temporarily.  This is useful when you want\nto switch the formula applied to the table.  Place multiple \u2018<samp>TBLFM</samp>\u2019\nkeywords right after the table, and then press <kbd>C-c C-c</kbd> on\nthe formula to apply.  Here is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">| x | y |\n|---+---|\n| 1 |   |\n| 2 |   |\n#+TBLFM: $2=$1*1\n#+TBLFM: $2=$1*2\n</pre></div>\n\n<p>Pressing <kbd>C-c C-c</kbd> in the line of \u2018<samp>#+TBLFM: $2=$1*2</samp>\u2019 yields:\n</p>\n<div class=\"example\">\n<pre class=\"example\">| x | y |\n|---+---|\n| 1 | 2 |\n| 2 | 4 |\n#+TBLFM: $2=$1*1\n#+TBLFM: $2=$1*2\n</pre></div>\n\n<p>If you recalculate this table, with <kbd>C-u C-c *</kbd>, for example,\nyou get the following result from applying only the first \u2018<samp>TBLFM</samp>\u2019\nkeyword.\n</p>\n<div class=\"example\">\n<pre class=\"example\">| x | y |\n|---+---|\n| 1 | 1 |\n| 2 | 2 |\n#+TBLFM: $2=$1*1\n#+TBLFM: $2=$1*2\n</pre></div>\n\n<span id=\"Debugging-formulas\"></span><span id=\"Debugging-formulas-1\"></span><h4 class=\"subsubheading\">Debugging formulas</h4>\n\n<span id=\"index-formula-debugging\"></span>\n<span id=\"index-debugging_002c-of-table-formulas\"></span>\n\n<p>When the evaluation of a formula leads to an error, the field content\nbecomes the string \u2018<samp>#ERROR</samp>\u2019.  If you would like to see what is going\non during variable substitution and calculation in order to find\na bug, turn on formula debugging in the Tbl menu and repeat the\ncalculation, for example by pressing <kbd>C-u C-u C-c = <span class=\"key\">RET</span></kbd> in\na field.  Detailed information are displayed.\n</p>\n"}, {"id": "359Updatingthetable", "content": "\n<span id=\"Updating-the-table\"></span>\n<span id=\"Updating-the-table-1\"></span><h4 class=\"subsection\">3.5.9 Updating the table</h4>\n\n<span id=\"index-recomputing-table-fields\"></span>\n<span id=\"index-updating_002c-table\"></span>\n\n<p>Recalculation of a table is normally not automatic, but needs to be\ntriggered by a command.  To make recalculation at least\nsemi-automatic, see <a href=\"https://orgmode.org/org.html#Advanced-features\">Advanced features</a>.\n</p>\n<p>In order to recalculate a line of a table or the entire table, use the\nfollowing commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c *</kbd> (<code>org-table-recalculate</code>)</dt>\n<dd><span id=\"index-C_002dc-_002a-2\"></span>\n<span id=\"index-org_002dtable_002drecalculate\"></span>\n<p>Recalculate the current row by first applying the stored column\nformulas from left to right, and all field/range formulas in the\ncurrent row.\n</p>\n</dd>\n<dt><kbd>C-u C-c *</kbd> or <kbd>C-u C-c C-c</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-_002a\"></span>\n<span id=\"index-C_002du-C_002dc-C_002dc\"></span>\n<p>Recompute the entire table, line by line.  Any lines before the\nfirst hline are left alone, assuming that these are part of the\ntable header.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-c *</kbd> or <kbd>C-u C-u C-c C-c</kbd> (<code>org-table-iterate</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-C_002dc-_002a\"></span>\n<span id=\"index-C_002du-C_002du-C_002dc-C_002dc\"></span>\n<span id=\"index-org_002dtable_002diterate\"></span>\n<p>Iterate the table by recomputing it until no further changes occur.\nThis may be necessary if some computed fields use the value of other\nfields that are computed <em>later</em> in the calculation sequence.\n</p>\n</dd>\n<dt><kbd>M-x org-table-recalculate-buffer-tables</kbd></dt>\n<dd><span id=\"index-org_002dtable_002drecalculate_002dbuffer_002dtables\"></span>\n<p>Recompute all tables in the current buffer.\n</p>\n</dd>\n<dt><kbd>M-x org-table-iterate-buffer-tables</kbd></dt>\n<dd><span id=\"index-org_002dtable_002diterate_002dbuffer_002dtables\"></span>\n<p>Iterate all tables in the current buffer, in order to converge\ntable-to-table dependencies.\n</p></dd>\n</dl>\n\n"}, {"id": "3510Advancedfeatures", "content": "\n<span id=\"Advanced-features\"></span>\n<span id=\"Advanced-features-1\"></span><h4 class=\"subsection\">3.5.10 Advanced features</h4>\n\n<p>If you want the recalculation of fields to happen automatically, or if\nyou want to be able to assign <em>names</em><a id=\"DOCF22\" href=\"https://orgmode.org/org.html#FOOT22\"><sup>22</sup></a> to fields and columns,\nyou need to reserve the first column of the table for special marking\ncharacters.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-#</kbd> (<code>org-table-rotate-recalc-marks</code>)</dt>\n<dd><span id=\"index-C_002d_0023\"></span>\n<span id=\"index-org_002dtable_002drotate_002drecalc_002dmarks\"></span>\n<p>Rotate the calculation mark in first column through the states \u2018<samp>#</samp>\u2019,\n\u2018<samp>*</samp>\u2019, \u2018<samp>!</samp>\u2019, \u2018<samp>$</samp>\u2019.  When there is an active region, change all marks in\nthe region.\n</p></dd>\n</dl>\n\n<p>Here is an example of a table that collects exam results of students\nand makes use of these features:\n</p>\n<div class=\"example\">\n<pre class=\"example\">|---+---------+--------+--------+--------+-------+------|\n|   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |\n|---+---------+--------+--------+--------+-------+------|\n| ! |         |     P1 |     P2 |     P3 |   Tot |      |\n| # | Maximum |     10 |     15 |     25 |    50 | 10.0 |\n| ^ |         |     m1 |     m2 |     m3 |    mt |      |\n|---+---------+--------+--------+--------+-------+------|\n| # | Peter   |     10 |      8 |     23 |    41 |  8.2 |\n| # | Sam     |      2 |      4 |      3 |     9 |  1.8 |\n|---+---------+--------+--------+--------+-------+------|\n|   | Average |        |        |        |  25.0 |      |\n| ^ |         |        |        |        |    at |      |\n| $ | max=50  |        |        |        |       |      |\n|---+---------+--------+--------+--------+-------+------|\n#+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@-II..@-I);%.1f\n</pre></div>\n\n<blockquote>\n<p><b>Important:</b> Please note that for these special tables, recalculating the table\nwith <kbd>C-u C-c *</kbd> only affects rows that are marked \u2018<samp>#</samp>\u2019 or\n\u2018<samp>*</samp>\u2019, and fields that have a formula assigned to the field itself.  The\ncolumn formulas are not applied in rows with empty first field.\n</p>\n</blockquote>\n\n<span id=\"index-marking-characters_002c-tables\"></span>\n<p>The marking characters have the following meaning:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>!</samp>\u2019</dt>\n<dd><p>The fields in this line define names for the columns, so that you\nmay refer to a column as \u2018<samp>$Tot</samp>\u2019 instead of \u2018<samp>$6</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>^</samp>\u2019</dt>\n<dd><p>This row defines names for the fields <em>above</em> the row.  With such\na definition, any formula in the table may use \u2018<samp>$m1</samp>\u2019 to refer to the\nvalue \u2018<samp>10</samp>\u2019.  Also, if you assign a formula to a names field, it is\nstored as \u2018<samp>$name = ...</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>_</samp>\u2019</dt>\n<dd><p>Similar to \u2018<samp>^</samp>\u2019, but defines names for the fields in the row <em>below</em>.\n</p>\n</dd>\n<dt>\u2018<samp>$</samp>\u2019</dt>\n<dd><p>Fields in this row can define <em>parameters</em> for formulas.  For\nexample, if a field in a \u2018<samp>$</samp>\u2019 row contains \u2018<samp>max=50</samp>\u2019, then formulas in\nthis table can refer to the value 50 using \u2018<samp>$max</samp>\u2019.  Parameters work\nexactly like constants, only that they can be defined on a per-table\nbasis.\n</p>\n</dd>\n<dt>\u2018<samp>#</samp>\u2019</dt>\n<dd><p>Fields in this row are automatically recalculated when pressing\n<kbd><span class=\"key\">TAB</span></kbd> or <kbd><span class=\"key\">RET</span></kbd> or <kbd>S-<span class=\"key\">TAB</span></kbd> in this row.\nAlso, this row is selected for a global recalculation with\n<kbd>C-u C-c *</kbd>.  Unmarked lines are left alone by this\ncommand.\n</p>\n</dd>\n<dt>\u2018<samp>*</samp>\u2019</dt>\n<dd><p>Selects this line for global recalculation with <kbd>C-u C-c *</kbd>, but not for automatic recalculation.  Use this when automatic\nrecalculation slows down editing too much.\n</p>\n</dd>\n<dt>\u2018<samp>/</samp>\u2019</dt>\n<dd><p>Do not export this line.  Useful for lines that contain the\nnarrowing \u2018<samp>&lt;N&gt;</samp>\u2019 markers or column group markers.\n</p></dd>\n</dl>\n\n<p>Finally, just to whet your appetite for what can be done with the\nfantastic Calc package, here is a table that computes the Taylor\nseries of degree n at location x for a couple of functions.\n</p>\n<div class=\"example\">\n<pre class=\"example\">|---+-------------+---+-----+--------------------------------------|\n|   | Func        | n | x   | Result                               |\n|---+-------------+---+-----+--------------------------------------|\n| # | exp(x)      | 1 | x   | 1 + x                                |\n| # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |\n| # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |\n| # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |\n| # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |\n| * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |\n|---+-------------+---+-----+--------------------------------------|\n#+TBLFM: $5=taylor($2,$4,$3);n3\n</pre></div>\n\n"}, {"id": "36OrgPlot", "content": "\n<span id=\"Org-Plot\"></span>\n<span id=\"Org-Plot-1\"></span><h3 class=\"section\">3.6 Org Plot</h3>\n\n<span id=\"index-graph_002c-in-tables\"></span>\n<span id=\"index-plot-tables-using-Gnuplot\"></span>\n\n<p>Org Plot can produce graphs of information stored in Org tables,\neither graphically or in ASCII art.\n</p>\n<span id=\"Graphical-plots-using-Gnuplot\"></span><span id=\"Graphical-plots-using-Gnuplot-1\"></span><h4 class=\"subheading\">Graphical plots using Gnuplot</h4>\n\n<span id=\"index-PLOT_002c-keyword\"></span>\n<p>Org Plot can produce 2D and 3D graphs of information stored in Org\ntables using <a href=\"https://www.gnuplot.info/\">Gnuplot</a> and <a href=\"http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html\">Gnuplot mode</a>.  To see this in action, ensure\nthat you have both Gnuplot and Gnuplot mode installed on your system,\nthen call <kbd>C-c \" g</kbd> or <kbd>M-x org-plot/gnuplot</kbd> on the\nfollowing table.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+PLOT: title:\"Citas\" ind:1 deps:(3) type:2d with:histograms set:\"yrange [0:]\"\n| Sede      | Max cites | H-index |\n|-----------+-----------+---------|\n| Chile     |    257.72 |   21.39 |\n| Leeds     |    165.77 |   19.68 |\n| Sao Paolo |     71.00 |   11.50 |\n| Stockholm |    134.19 |   14.33 |\n| Morelia   |    257.56 |   17.67 |\n</pre></div>\n\n<p>Org Plot supports a range of plot types, and provides the ability to add more.\nFor example, a radar plot can be generated like so:\n</p><div class=\"example\">\n<pre class=\"example\">#+PLOT: title:\"An evaluation of plaintext document formats\" transpose:yes type:radar min:0 max:4\n| Format            | Fine-grained-control | Initial Effort | Syntax simplicity | Editor Support | Integrations | Ease-of-referencing | Versatility |\n|-------------------+----------------------+----------------+-------------------+----------------+--------------+---------------------+-------------|\n| Word              |                    2 |              4 |                 4 |              2 |            3 |                   2 |           2 |\n| LaTeX             |                    4 |              1 |                 1 |              3 |            2 |                   4 |           3 |\n| Org Mode          |                    4 |              2 |               3.5 |              1 |            4 |                   4 |           4 |\n| Markdown          |                    1 |              3 |                 3 |              4 |            3 |                   3 |           1 |\n| Markdown + Pandoc |                  2.5 |            2.5 |               2.5 |              3 |            3 |                   3 |           2 |\n</pre></div>\n\n<p>Notice that Org Plot is smart enough to apply the table\u2019s headers as\nlabels.  Further control over the labels, type, content, and\nappearance of plots can be exercised through the \u2018<samp>PLOT</samp>\u2019 keyword\npreceding a table.  See below for a complete list of Org Plot options.\nFor more information and examples see the <a href=\"https://orgmode.org/worg/org-tutorials/org-plot.html\">Org Plot tutorial</a>.\n</p>\n<span id=\"Plot-options\"></span><span id=\"Plot-options-1\"></span><h4 class=\"subsubheading\">Plot options</h4>\n\n<dl compact=\"compact\">\n<dt>\u2018<samp>set</samp>\u2019</dt>\n<dd><p>Specify any Gnuplot option to be set when graphing.\n</p>\n</dd>\n<dt>\u2018<samp>title</samp>\u2019</dt>\n<dd><p>Specify the title of the plot.\n</p>\n</dd>\n<dt>\u2018<samp>ind</samp>\u2019</dt>\n<dd><p>Specify which column of the table to use as the \u2018<samp>x</samp>\u2019 axis.\n</p>\n</dd>\n<dt>\u2018<samp>deps</samp>\u2019</dt>\n<dd><p>Specify the columns to graph as a Lisp style list, surrounded by\nparentheses and separated by spaces for example \u2018<samp>dep:(3 4)</samp>\u2019 to graph\nthe third and fourth columns.  Defaults to graphing all other\ncolumns aside from the \u2018<samp>ind</samp>\u2019 column.\n</p>\n</dd>\n<dt>transpose</dt>\n<dd><p>When \u2018<samp>y</samp>\u2019, \u2018<samp>yes</samp>\u2019, or \u2018<samp>t</samp>\u2019 attempt to transpose the table data before\nplotting.  Also recognises the shorthand option \u2018<samp>trans</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>type</samp>\u2019</dt>\n<dd><p>Specify the type of the plot, by default one of  \u2018<samp>2d</samp>\u2019, \u2018<samp>3d</samp>\u2019, \u2018<samp>radar</samp>\u2019, or \u2018<samp>grid</samp>\u2019.\nAvailable types can be customised with <code>org-plot/preset-plot-types</code>.\n</p>\n</dd>\n<dt>\u2018<samp>with</samp>\u2019</dt>\n<dd><p>Specify a \u2018<samp>with</samp>\u2019 option to be inserted for every column being\nplotted, e.g., \u2018<samp>lines</samp>\u2019, \u2018<samp>points</samp>\u2019, \u2018<samp>boxes</samp>\u2019, \u2018<samp>impulses</samp>\u2019.  Defaults to\n\u2018<samp>lines</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>file</samp>\u2019</dt>\n<dd><p>If you want to plot to a file, specify\n\u2018<samp>\"path/to/desired/output-file\"</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>labels</samp>\u2019</dt>\n<dd><p>List of labels to be used for the \u2018<samp>deps</samp>\u2019.  Defaults to the column\nheaders if they exist.\n</p>\n</dd>\n<dt>\u2018<samp>line</samp>\u2019</dt>\n<dd><p>Specify an entire line to be inserted in the Gnuplot script.\n</p>\n</dd>\n<dt>\u2018<samp>map</samp>\u2019</dt>\n<dd><p>When plotting \u2018<samp>3d</samp>\u2019 or \u2018<samp>grid</samp>\u2019 types, set this to \u2018<samp>t</samp>\u2019 to graph a flat\nmapping rather than a \u2018<samp>3d</samp>\u2019 slope.\n</p>\n</dd>\n<dt>min</dt>\n<dd><p>Provides a minimum axis value that may be used by a plot type.\nImplicitly assumes the \u2018<samp>y</samp>\u2019 axis is being referred to.  Can\nexplicitly provide a value for a either the \u2018<samp>x</samp>\u2019 or \u2018<samp>y</samp>\u2019 axis with\n\u2018<samp>xmin</samp>\u2019 and \u2018<samp>ymin</samp>\u2019.\n</p>\n</dd>\n<dt>max</dt>\n<dd><p>Provides a maximum axis value that may be used by a plot type.\nImplicitly assumes the \u2018<samp>y</samp>\u2019 axis is being referred to.  Can\nexplicitly provide a value for a either the \u2018<samp>x</samp>\u2019 or \u2018<samp>y</samp>\u2019 axis with\n\u2018<samp>xmax</samp>\u2019 and \u2018<samp>ymax</samp>\u2019.\n</p>\n</dd>\n<dt>ticks</dt>\n<dd><p>Provides a desired number of axis ticks to display, that may be used\nby a plot type.  If none is given a plot type that requires ticks\nwill use <code>org--plot/sensible-tick-num</code> to try to determine a good\nvalue.\n</p>\n</dd>\n<dt>\u2018<samp>timefmt</samp>\u2019</dt>\n<dd><p>Specify format of Org mode timestamps as they will be parsed by\nGnuplot.  Defaults to \u2018<samp>%Y-%m-%d-%H:%M:%S</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>script</samp>\u2019</dt>\n<dd><p>If you want total control, you can specify a script file\u2014place the\nfile name between double-quotes\u2014which will be used to plot.\nBefore plotting, every instance of \u2018<samp>$datafile</samp>\u2019 in the specified\nscript will be replaced with the path to the generated data file.\nNote: even if you set this option, you may still want to specify the\nplot type, as that can impact the content of the data file.\n</p></dd>\n</dl>\n\n<span id=\"ASCII-bar-plots\"></span><span id=\"ASCII-bar-plots-1\"></span><h4 class=\"subheading\">ASCII bar plots</h4>\n\n<p>While point is on a column, typing <kbd>C-c `` a</kbd> or <kbd>M-x orgtbl-ascii-plot</kbd> create a new column containing an ASCII-art bars\nplot.  The plot is implemented through a regular column formula.  When\nthe source column changes, the bar plot may be updated by refreshing\nthe table, for example typing <kbd>C-u C-c *</kbd>.\n</p>\n<div class=\"example\">\n<pre class=\"example\">| Sede          | Max cites |              |\n|---------------+-----------+--------------|\n| Chile         |    257.72 | WWWWWWWWWWWW |\n| Leeds         |    165.77 | WWWWWWWh     |\n| Sao Paolo     |     71.00 | WWW;         |\n| Stockholm     |    134.19 | WWWWWW:      |\n| Morelia       |    257.56 | WWWWWWWWWWWH |\n| Rochefourchat |      0.00 |              |\n#+TBLFM: $3='(orgtbl-ascii-draw $2 0.0 257.72 12)\n</pre></div>\n\n<p>The formula is an Elisp call.\n</p>\n<dl>\n<dt id=\"index-orgtbl_002dascii_002ddraw\">Function: <strong>orgtbl-ascii-draw</strong> <em>value min max &amp;optional width</em></dt>\n<dd><p>Draw an ASCII bar in a table.\n</p>\n<p><var>VALUE</var> is the value to plot.\n</p>\n<p><var>MIN</var> is the value displayed as an empty bar.  <var>MAX</var>\nis the value filling all the <var>WIDTH</var>.  Sources values outside\nthis range are displayed as \u2018<samp>too small</samp>\u2019 or \u2018<samp>too large</samp>\u2019.\n</p>\n<p><var>WIDTH</var> is the number of characters of the bar plot.  It\ndefaults to \u2018<samp>12</samp>\u2019.\n</p></dd></dl>\n\n"}, {"id": "4Hyperlinks", "content": "\n<span id=\"Hyperlinks\"></span>\n<span id=\"Hyperlinks-1\"></span><h2 class=\"chapter\">4 Hyperlinks</h2>\n\n<span id=\"index-hyperlinks\"></span>\n\n<p>Like HTML, Org provides support for links inside a file, external\nlinks to other files, Usenet articles, emails, and much more.\n</p>\n\n\n"}, {"id": "41LinkFormat", "content": "\n<span id=\"Link-Format\"></span>\n<span id=\"Link-Format-1\"></span><h3 class=\"section\">4.1 Link Format</h3>\n\n<span id=\"index-link-format\"></span>\n<span id=\"index-format_002c-of-links\"></span>\n\n<span id=\"index-angle-bracket-links\"></span>\n<span id=\"index-plain-links\"></span>\n<p>Org recognizes plain URIs, possibly wrapped within angle\nbrackets<a id=\"DOCF23\" href=\"https://orgmode.org/org.html#FOOT23\"><sup>23</sup></a>, and activate them as clickable links.\n</p>\n<span id=\"index-bracket-links\"></span>\n<p>The general link format, however, looks like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[LINK][DESCRIPTION]]\n</pre></div>\n\n\n<p>or alternatively\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[LINK]]\n</pre></div>\n\n\n<span id=\"index-escape-syntax_002c-for-links\"></span>\n<span id=\"index-backslashes_002c-in-links\"></span>\n<p>Some \u2018<samp>\\</samp>\u2019, \u2018<samp>[</samp>\u2019 and \u2018<samp>]</samp>\u2019 characters in the <var>LINK</var> part need to\nbe \u201cescaped\u201d, i.e., preceded by another \u2018<samp>\\</samp>\u2019 character.  More\nspecifically, the following characters, and only them, must be\nescaped:\n</p>\n<ol>\n<li> all \u2018<samp>[</samp>\u2019 and \u2018<samp>]</samp>\u2019 characters,\n</li><li> every \u2018<samp>\\</samp>\u2019 character preceding either \u2018<samp>]</samp>\u2019 or \u2018<samp>[</samp>\u2019,\n</li><li> every \u2018<samp>\\</samp>\u2019 character at the end of the link.\n</li></ol>\n\n<span id=\"index-org_002dlink_002descape\"></span>\n<p>Functions inserting links (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>) properly escape\nambiguous characters.  You only need to bother about the rules above\nwhen inserting directly, or yanking, a URI within square brackets.\nWhen in doubt, you may use the function <code>org-link-escape</code>, which turns\na link string into its escaped form.\n</p>\n<p>Once a link in the buffer is complete, with all brackets present, Org\nchanges the display so that \u2018<samp>DESCRIPTION</samp>\u2019 is displayed instead of\n\u2018<samp>[[LINK][DESCRIPTION]]</samp>\u2019 and \u2018<samp>LINK</samp>\u2019 is displayed instead of \u2018<samp>[[LINK]]</samp>\u2019.\nLinks are highlighted in the <code>org-link</code> face, which, by default, is an\nunderlined face.\n</p>\n<p>You can directly edit the visible part of a link.  This can be either\nthe <var>LINK</var> part, if there is no description, or the\n<var>DESCRIPTION</var> part otherwise.  To also edit the invisible\n<var>LINK</var> part, use <kbd>C-c C-l</kbd> with point on the link\n(see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>).\n</p>\n<p>If you place point at the beginning or just behind the end of the\ndisplayed text and press <kbd><span class=\"key\">BS</span></kbd>, you remove\nthe\u2014invisible\u2014bracket at that location<a id=\"DOCF24\" href=\"https://orgmode.org/org.html#FOOT24\"><sup>24</sup></a>.  This makes the link\nincomplete and the internals are again displayed as plain text.\nInserting the missing bracket hides the link internals again.  To show\nthe internal structure of all links, use the menu: Org \u2192 Hyperlinks \u2192\nLiteral links.\n</p>\n"}, {"id": "42InternalLinks", "content": "\n<span id=\"Internal-Links\"></span>\n<span id=\"Internal-Links-1\"></span><h3 class=\"section\">4.2 Internal Links</h3>\n\n<span id=\"index-internal-links\"></span>\n<span id=\"index-links_002c-internal\"></span>\n\n<p>A link that does not look like a URL\u2014i.e., does not start with\na known scheme or a file name\u2014refers to the current document.  You\ncan follow it with <kbd>C-c C-o</kbd> when point is on the link, or\nwith a mouse click (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>).\n</p>\n<span id=\"index-CUSTOM_005fID_002c-property\"></span>\n<p>Org provides several refinements to internal navigation within\na document.  Most notably, a construct like \u2018<samp>[[#my-custom-id]]</samp>\u2019\nspecifically targets the entry with the \u2018<samp>CUSTOM_ID</samp>\u2019 property set to\n\u2018<samp>my-custom-id</samp>\u2019.  Also, an internal link looking like \u2018<samp>[[*Some\nsection]]</samp>\u2019 points to a headline with the name \u2018<samp>Some section</samp>\u2019<a id=\"DOCF25\" href=\"https://orgmode.org/org.html#FOOT25\"><sup>25</sup></a>.\n</p>\n<span id=\"index-targets_002c-for-links\"></span>\n<p>When the link does not belong to any of the cases above, Org looks for\na <em>dedicated target</em>: the same string in double angular brackets, like\n\u2018<samp>&lt;&lt;My Target&gt;&gt;</samp>\u2019.\n</p>\n<span id=\"index-NAME_002c-keyword-1\"></span>\n<p>If no dedicated target exists, the link tries to match the exact name\nof an element within the buffer.  Naming is done, unsurprisingly, with\nthe \u2018<samp>NAME</samp>\u2019 keyword, which has to be put in the line before the element\nit refers to, as in the following example\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: My Target\n| a  | table      |\n|----+------------|\n| of | four cells |\n</pre></div>\n\n<span id=\"index-org_002dlink_002dsearch_002dmust_002dmatch_002dexact_002dheadline\"></span>\n<p>Ultimately, if none of the above succeeds, Org searches for a headline\nthat is exactly the link text but may also include a TODO keyword and\ntags, or initiates a plain text search, according to the value of\n<code>org-link-search-must-match-exact-headline</code>.\n</p>\n<p>Note that you must make sure custom IDs, dedicated targets, and names\nare unique throughout the document.  Org provides a linter to assist\nyou in the process, if needed.  See <a href=\"https://orgmode.org/org.html#Org-Syntax\">Org Syntax</a>.\n</p>\n<p>During export, internal links are used to mark objects and assign them\na number.  Marked objects are then referenced by links pointing to\nthem.  In particular, links without a description appear as the number\nassigned to the marked object<a id=\"DOCF26\" href=\"https://orgmode.org/org.html#FOOT26\"><sup>26</sup></a>.  In the following excerpt from\nan Org buffer\n</p>\n<div class=\"example\">\n<pre class=\"example\">1. one item\n2. &lt;&lt;target&gt;&gt;another item\nHere we refer to item [[target]].\n</pre></div>\n\n<p>The last sentence will appear as \u2018<samp>Here we refer to item 2</samp>\u2019 when\nexported.\n</p>\n<p>In non-Org files, the search looks for the words in the link text.  In\nthe above example the search would be for \u2018<samp>target</samp>\u2019.\n</p>\n<p>Following a link pushes a mark onto Org\u2019s own mark ring.  You can\nreturn to the previous position with <kbd>C-c &amp;</kbd>.  Using this\ncommand several times in direct succession goes back to positions\nrecorded earlier.\n</p>\n"}, {"id": "43RadioTargets", "content": "\n<span id=\"Radio-Targets\"></span>\n<span id=\"Radio-Targets-1\"></span><h3 class=\"section\">4.3 Radio Targets</h3>\n\n<span id=\"index-radio-targets\"></span>\n<span id=\"index-targets_002c-radio\"></span>\n<span id=\"index-links_002c-radio-targets\"></span>\n\n<p>Org can automatically turn any occurrences of certain target names in\nnormal text into a link.  So without explicitly creating a link, the\ntext connects to the target radioing its position.  Radio targets are\nenclosed by triple angular brackets.  For example, a target \u2018<samp>&lt;&lt;&lt;My\nTarget&gt;&gt;&gt;</samp>\u2019 causes each occurrence of \u2018<samp>my target</samp>\u2019 in normal text to\nbecome activated as a link.  The Org file is scanned automatically for\nradio targets only when the file is first loaded into Emacs.  To\nupdate the target list during editing, press <kbd>C-c C-c</kbd> with\npoint on or at a target.\n</p>\n"}, {"id": "44ExternalLinks", "content": "\n<span id=\"External-Links\"></span>\n<span id=\"External-Links-1\"></span><h3 class=\"section\">4.4 External Links</h3>\n\n<span id=\"index-links_002c-external\"></span>\n<span id=\"index-external-links\"></span>\n<span id=\"index-attachment-links\"></span>\n<span id=\"index-BBDB-links\"></span>\n<span id=\"index-Elisp-links\"></span>\n<span id=\"index-file-links\"></span>\n<span id=\"index-Gnus-links\"></span>\n<span id=\"index-Help-links\"></span>\n<span id=\"index-IRC-links\"></span>\n<span id=\"index-Info-links\"></span>\n<span id=\"index-MH_002dE-links\"></span>\n<span id=\"index-Rmail-links\"></span>\n<span id=\"index-shell-links\"></span>\n<span id=\"index-URL-links\"></span>\n<span id=\"index-Usenet-links\"></span>\n\n<p>Org supports links to files, websites, Usenet and email messages, BBDB\ndatabase entries and links to both IRC conversations and their logs.\nExternal links are URL-like locators.  They start with a short\nidentifying string followed by a colon.  There can be no space after\nthe colon.\n</p>\n<p>Here is the full set of built-in link types:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>file</samp>\u2019</dt>\n<dd><p>File links.  File name may be remote, absolute, or relative.\n</p>\n<p>Additionally, you can specify a line number, or a text search.\nIn Org files, you may link to a headline name, a custom ID, or a\ncode reference instead.\n</p>\n<p>As a special case, \u201cfile\u201d prefix may be omitted if the file name\nis complete, e.g., it starts with \u2018<samp>./</samp>\u2019, or \u2018<samp>/</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>attachment</samp>\u2019</dt>\n<dd><p>Same as file links but for files and folders attached to the current\nnode (see <a href=\"https://orgmode.org/org.html#Attachments\">Attachments</a>).  Attachment links are intended to behave\nexactly as file links but for files relative to the attachment\ndirectory.\n</p>\n</dd>\n<dt>\u2018<samp>bbdb</samp>\u2019</dt>\n<dd><p>Link to a BBDB record, with possible regexp completion.\n</p>\n</dd>\n<dt>\u2018<samp>docview</samp>\u2019</dt>\n<dd><p>Link to a document opened with DocView mode.  You may specify a page\nnumber.\n</p>\n</dd>\n<dt>\u2018<samp>doi</samp>\u2019</dt>\n<dd><p>Link to an electronic resource, through its handle.\n</p>\n</dd>\n<dt>\u2018<samp>elisp</samp>\u2019</dt>\n<dd><p>Execute an Elisp command upon activation.\n</p>\n</dd>\n<dt>\u2018<samp>gnus</samp>\u2019, \u2018<samp>rmail</samp>\u2019, \u2018<samp>mhe</samp>\u2019</dt>\n<dd><p>Link to messages or folders from a given Emacs\u2019 MUA.\n</p>\n</dd>\n<dt>\u2018<samp>help</samp>\u2019</dt>\n<dd><p>Display documentation of a symbol in \u2018<samp>*Help*</samp>\u2019 buffer.\n</p>\n</dd>\n<dt>\u2018<samp>http</samp>\u2019, \u2018<samp>https</samp>\u2019</dt>\n<dd><p>Web links.\n</p>\n</dd>\n<dt>\u2018<samp>id</samp>\u2019</dt>\n<dd><p>Link to a specific headline by its ID property, in an Org file.\n</p>\n</dd>\n<dt>\u2018<samp>info</samp>\u2019</dt>\n<dd><p>Link to an Info manual, or to a specific node.\n</p>\n</dd>\n<dt>\u2018<samp>irc</samp>\u2019</dt>\n<dd><p>Link to an IRC channel.\n</p>\n</dd>\n<dt>\u2018<samp>mailto</samp>\u2019</dt>\n<dd><p>Link to message composition.\n</p>\n</dd>\n<dt>\u2018<samp>news</samp>\u2019</dt>\n<dd><p>Usenet links.\n</p>\n</dd>\n<dt>\u2018<samp>shell</samp>\u2019</dt>\n<dd><p>Execute a shell command upon activation.\n</p></dd>\n</dl>\n\n<p>The following table illustrates the link types above, along with their\noptions:\n</p>\n<table>\n<thead><tr><th>Link Type</th><th>Example</th></tr></thead>\n<tbody><tr><td>http</td><td>\u2018<samp>http://staff.science.uva.nl/c.dominik/</samp>\u2019</td></tr>\n<tr><td>https</td><td>\u2018<samp>https://orgmode.org/</samp>\u2019</td></tr>\n<tr><td>doi</td><td>\u2018<samp>doi:10.1000/182</samp>\u2019</td></tr>\n<tr><td>file</td><td>\u2018<samp>file:/home/dominik/images/jupiter.jpg</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>/home/dominik/images/jupiter.jpg</samp>\u2019 (same as above)</td></tr>\n<tr><td></td><td>\u2018<samp>file:papers/last.pdf</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>./papers/last.pdf</samp>\u2019 (same as above)</td></tr>\n<tr><td></td><td>\u2018<samp>file:/ssh:me@some.where:papers/last.pdf</samp>\u2019 (remote)</td></tr>\n<tr><td></td><td>\u2018<samp>/ssh:me@some.where:papers/last.pdf</samp>\u2019 (same as above)</td></tr>\n<tr><td></td><td>\u2018<samp>file:sometextfile::NNN</samp>\u2019 (jump to line number)</td></tr>\n<tr><td></td><td>\u2018<samp>file:projects.org</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>file:projects.org::some words</samp>\u2019 (text search)<a id=\"DOCF27\" href=\"https://orgmode.org/org.html#FOOT27\"><sup>27</sup></a></td></tr>\n<tr><td></td><td>\u2018<samp>file:projects.org::*task title</samp>\u2019 (headline search)</td></tr>\n<tr><td></td><td>\u2018<samp>file:projects.org::#custom-id</samp>\u2019 (headline search)</td></tr>\n<tr><td>attachment</td><td>\u2018<samp>attachment:projects.org</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>attachment:projects.org::some words</samp>\u2019 (text search)</td></tr>\n<tr><td>docview</td><td>\u2018<samp>docview:papers/last.pdf::NNN</samp>\u2019</td></tr>\n<tr><td>id</td><td>\u2018<samp>id:B7423F4D-2E8A-471B-8810-C40F074717E9</samp>\u2019</td></tr>\n<tr><td>news</td><td>\u2018<samp>news:comp.emacs</samp>\u2019</td></tr>\n<tr><td>mailto</td><td>\u2018<samp>mailto:adent@galaxy.net</samp>\u2019</td></tr>\n<tr><td>mhe</td><td>\u2018<samp>mhe:folder</samp>\u2019 (folder link)</td></tr>\n<tr><td></td><td>\u2018<samp>mhe:folder#id</samp>\u2019 (message link)</td></tr>\n<tr><td>rmail</td><td>\u2018<samp>rmail:folder</samp>\u2019 (folder link)</td></tr>\n<tr><td></td><td>\u2018<samp>rmail:folder#id</samp>\u2019 (message link)</td></tr>\n<tr><td>gnus</td><td>\u2018<samp>gnus:group</samp>\u2019 (group link)</td></tr>\n<tr><td></td><td>\u2018<samp>gnus:group#id</samp>\u2019 (article link)</td></tr>\n<tr><td>bbdb</td><td>\u2018<samp>bbdb:R.*Stallman</samp>\u2019 (record with regexp)</td></tr>\n<tr><td>irc</td><td>\u2018<samp>irc:/irc.com/#emacs/bob</samp>\u2019</td></tr>\n<tr><td>help</td><td>\u2018<samp>help:org-store-link</samp>\u2019</td></tr>\n<tr><td>info</td><td>\u2018<samp>info:org#External links</samp>\u2019</td></tr>\n<tr><td>shell</td><td>\u2018<samp>shell:ls *.org</samp>\u2019</td></tr>\n<tr><td>elisp</td><td>\u2018<samp>elisp:(find-file \"Elisp.org\")</samp>\u2019 (Elisp form to evaluate)</td></tr>\n<tr><td></td><td>\u2018<samp>elisp:org-agenda</samp>\u2019 (interactive Elisp command)</td></tr>\n</tbody></table>\n\n<span id=\"index-VM-links\"></span>\n<span id=\"index-Wanderlust-links\"></span>\n<p>On top of these built-in link types, additional ones are available\nthrough the \u2018<samp>org-contrib</samp>\u2019 repository (see <a href=\"https://orgmode.org/org.html#Installation\">Installation</a>).  For\nexample, these links to VM or Wanderlust messages are available when\nyou load the corresponding libraries from the \u2018<samp>org-contrib</samp>\u2019\nrepository:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>vm:folder</samp>\u2019</td><td>VM folder link</td></tr>\n<tr><td>\u2018<samp>vm:folder#id</samp>\u2019</td><td>VM message link</td></tr>\n<tr><td>\u2018<samp>vm://myself@some.where.org/folder#id</samp>\u2019</td><td>VM on remote machine</td></tr>\n<tr><td>\u2018<samp>vm-imap:account:folder</samp>\u2019</td><td>VM IMAP folder link</td></tr>\n<tr><td>\u2018<samp>vm-imap:account:folder#id</samp>\u2019</td><td>VM IMAP message link</td></tr>\n<tr><td>\u2018<samp>wl:folder</samp>\u2019</td><td>Wanderlust folder link</td></tr>\n<tr><td>\u2018<samp>wl:folder#id</samp>\u2019</td><td>Wanderlust message link</td></tr>\n</tbody></table>\n\n<p>For information on customizing Org to add new link types, see <a href=\"https://orgmode.org/org.html#Adding-Hyperlink-Types\">Adding Hyperlink Types</a>.\n</p>\n<p>A link should be enclosed in double brackets and may contain\ndescriptive text to be displayed instead of the URL (see <a href=\"https://orgmode.org/org.html#Link-Format\">Link Format</a>), for example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[https://www.gnu.org/software/emacs/][GNU Emacs]]\n</pre></div>\n\n\n<p>If the description is a file name or URL that points to an image, HTML\nexport (see <a href=\"https://orgmode.org/org.html#HTML-Export\">HTML Export</a>) inlines the image as a clickable button.  If\nthere is no description at all and the link points to an image, that\nimage is inlined into the exported HTML file.\n</p>\n<span id=\"index-square-brackets_002c-around-links\"></span>\n<span id=\"index-angular-brackets_002c-around-links\"></span>\n<span id=\"index-plain-text-external-links\"></span>\n<p>Org also recognizes external links amid normal text and activates them\nas links.  If spaces must be part of the link (for example in\n\u2018<samp>bbdb:R.*Stallman</samp>\u2019), or if you need to remove ambiguities about the\nend of the link, enclose the link in square or angular brackets.\n</p>\n"}, {"id": "45HandlingLinks", "content": "\n<span id=\"Handling-Links\"></span>\n<span id=\"Handling-Links-1\"></span><h3 class=\"section\">4.5 Handling Links</h3>\n\n<span id=\"index-links_002c-handling\"></span>\n\n<p>Org provides methods to create a link in the correct syntax, to insert\nit into an Org file, and to follow the link.\n</p>\n<span id=\"index-org_002dstore_002dlink-1\"></span>\n<span id=\"index-storing-links\"></span>\n<p>The main function is <code>org-store-link</code>, called with <kbd>M-x org-store-link</kbd>.  Because of its importance, we suggest to bind it\nto a widely available key (see <a href=\"https://orgmode.org/org.html#Activation\">Activation</a>).  It stores a link to the\ncurrent location.  The link is stored for later insertion into an Org\nbuffer\u2014see below.  The kind of link that is created depends on the\ncurrent buffer:\n</p>\n<dl compact=\"compact\">\n<dt><em>Org mode buffers</em></dt>\n<dd><p>For Org files, if there is a \u2018<samp>&lt;&lt;target&gt;&gt;</samp>\u2019 at point, the link points\nto the target.  Otherwise it points to the current headline, which\nis also the description<a id=\"DOCF28\" href=\"https://orgmode.org/org.html#FOOT28\"><sup>28</sup></a>.\n</p>\n<span id=\"index-org_002did_002dlink_002dto_002dorg_002duse_002did\"></span>\n<span id=\"index-CUSTOM_005fID_002c-property-1\"></span>\n<span id=\"index-ID_002c-property\"></span>\n<p>If the headline has a \u2018<samp>CUSTOM_ID</samp>\u2019 property, store a link to this\ncustom ID.  In addition or alternatively, depending on the value of\n<code>org-id-link-to-org-use-id</code>, create and/or use a globally unique\n\u2018<samp>ID</samp>\u2019 property for the link<a id=\"DOCF29\" href=\"https://orgmode.org/org.html#FOOT29\"><sup>29</sup></a>.  So using this command in Org\nbuffers potentially creates two links: a human-readable link from\nthe custom ID, and one that is globally unique and works even if the\nentry is moved from file to file.  The \u2018<samp>ID</samp>\u2019 property can be either a\nUUID (default) or a timestamp, depending on <code>org-id-method</code>.  Later,\nwhen inserting the link, you need to decide which one to use.\n</p>\n</dd>\n<dt><em>Email/News clients: VM, Rmail, Wanderlust, MH-E, Gnus</em></dt>\n<dd><span id=\"index-org_002dlink_002demail_002ddescription_002dformat\"></span>\n<p>Pretty much all Emacs mail clients are supported.  The link points\nto the current article, or, in some Gnus buffers, to the group.  The\ndescription is constructed according to the variable\n<code>org-link-email-description-format</code>.  By default, it refers to the\naddressee and the subject.\n</p>\n</dd>\n<dt><em>Web browsers: W3, W3M and EWW</em></dt>\n<dd><p>Here the link is the current URL, with the page title as the\ndescription.\n</p>\n</dd>\n<dt><em>Contacts: BBDB</em></dt>\n<dd><p>Links created in a BBDB buffer point to the current entry.\n</p>\n</dd>\n<dt><em>Chat: IRC</em></dt>\n<dd><span id=\"index-org_002dirc_002dlinks_002dto_002dlogs\"></span>\n<p>For IRC links, if the variable <code>org-irc-link-to-logs</code> is non-<code>nil</code>,\ncreate a \u2018<samp>file</samp>\u2019 style link to the relevant point in the logs for the\ncurrent conversation.  Otherwise store an \u2018<samp>irc</samp>\u2019 style link to the\nuser/channel/server under the point.\n</p>\n</dd>\n<dt><em>Other files</em></dt>\n<dd><p>For any other file, the link points to the file, with a search\nstring (see <a href=\"https://orgmode.org/org.html#Search-Options\">Search Options</a>) pointing to the contents\nof the current line.  If there is an active region, the selected\nwords form the basis of the search string.  You can write custom Lisp\nfunctions to select the search string and perform the search for\nparticular file types (see <a href=\"https://orgmode.org/org.html#Custom-Searches\">Custom Searches</a>).\n</p>\n<p>You can also define dedicated links to other files.  See <a href=\"https://orgmode.org/org.html#Adding-Hyperlink-Types\">Adding Hyperlink Types</a>.\n</p>\n</dd>\n<dt><em>Agenda view</em></dt>\n<dd><p>When point is in an agenda view, the created link points to the\nentry referenced by the current line.\n</p></dd>\n</dl>\n\n<p>From an Org buffer, the following commands create, navigate or, more\ngenerally, act on links.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-l</kbd> (<code>org-insert-link</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dl\"></span>\n<span id=\"index-org_002dinsert_002dlink\"></span>\n<span id=\"index-link-completion\"></span>\n<span id=\"index-completion_002c-of-links\"></span>\n<span id=\"index-inserting-links\"></span>\n<span id=\"index-org_002dlink_002dkeep_002dstored_002dafter_002dinsertion\"></span>\n<p>Insert a link<a id=\"DOCF30\" href=\"https://orgmode.org/org.html#FOOT30\"><sup>30</sup></a>.  This prompts for a link to be inserted into\nthe buffer.  You can just type a link, using text for an internal\nlink, or one of the link type prefixes mentioned in the examples\nabove.  The link is inserted into the buffer, along with\na descriptive text<a id=\"DOCF31\" href=\"https://orgmode.org/org.html#FOOT31\"><sup>31</sup></a>.  If some text was selected at this time,\nit becomes the default description.\n</p>\n<dl compact=\"compact\">\n<dt><em>Inserting stored links</em></dt>\n<dd><p>All links stored during the current session are part of the\nhistory for this prompt, so you can access them with <kbd><span class=\"key\">UP</span></kbd>\nand <kbd><span class=\"key\">DOWN</span></kbd> (or <kbd>M-p</kbd>, <kbd>M-n</kbd>).\n</p>\n</dd>\n<dt><em>Completion support</em></dt>\n<dd><p>Completion with <kbd><span class=\"key\">TAB</span></kbd> helps you to insert valid link\nprefixes like \u2018<samp>http</samp>\u2019 or \u2018<samp>ftp</samp>\u2019, including the prefixes defined\nthrough link abbreviations (see <a href=\"https://orgmode.org/org.html#Link-Abbreviations\">Link Abbreviations</a>).  If you\npress <kbd><span class=\"key\">RET</span></kbd> after inserting only the prefix, Org offers\nspecific completion support for some link types<a id=\"DOCF32\" href=\"https://orgmode.org/org.html#FOOT32\"><sup>32</sup></a>.  For\nexample, if you type <kbd>f i l e <span class=\"key\">RET</span></kbd>\u2014alternative access:\n<kbd>C-u C-c C-l</kbd>, see below\u2014Org offers file name\ncompletion, and after <kbd>b b d b <span class=\"key\">RET</span></kbd> you can complete\ncontact names.\n</p></dd>\n</dl>\n\n</dd>\n<dt><kbd>C-u C-c C-l</kbd></dt>\n<dd><span id=\"index-file-name-completion\"></span>\n<span id=\"index-completion_002c-of-file-names\"></span>\n<span id=\"index-C_002du-C_002dc-C_002dl\"></span>\n<p>When <kbd>C-c C-l</kbd> is called with a <kbd>C-u</kbd> prefix\nargument, insert a link to a file.  You may use file name completion\nto select the name of the file.  The path to the file is inserted\nrelative to the directory of the current Org file, if the linked\nfile is in the current directory or in a sub-directory of it, or if\nthe path is written relative to the current directory using \u2018<samp>../</samp>\u2019.\nOtherwise an absolute path is used, if possible with \u2018<samp>~/</samp>\u2019 for your\nhome directory.  You can force an absolute path with two\n<kbd>C-u</kbd> prefixes.\n</p>\n</dd>\n<dt><kbd>C-c C-l</kbd> (with point on existing link)</dt>\n<dd><span id=\"index-following-links\"></span>\n<p>When point is on an existing link, <kbd>C-c C-l</kbd> allows you to\nedit the link and description parts of the link.\n</p>\n</dd>\n<dt><kbd>C-c C-o</kbd> (<code>org-open-at-point</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002do\"></span>\n<span id=\"index-org_002dopen_002dat_002dpoint\"></span>\n<span id=\"index-org_002dfile_002dapps\"></span>\n<p>Open link at point.  This launches a web browser for URL (using\n<code>browse-url-at-point</code>), run VM/MH-E/Wanderlust/Rmail/Gnus/BBDB for\nthe corresponding links, and execute the command in a shell link.\nWhen point is on an internal link, this command runs the\ncorresponding search.  When point is on the tags part of a headline,\nit creates the corresponding tags view (see <a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a>).  If point is on a timestamp, it compiles the agenda for\nthat date.  Furthermore, it visits text and remote files in \u2018<samp>file</samp>\u2019\nlinks with Emacs and select a suitable application for local\nnon-text files.  Classification of files is based on file extension\nonly.  See option <code>org-file-apps</code>.  If you want to override the\ndefault application and visit the file with Emacs, use\na <kbd>C-u</kbd> prefix.  If you want to avoid opening in Emacs, use\na <kbd>C-u C-u</kbd> prefix.\n</p>\n<span id=\"index-org_002dlink_002dframe_002dsetup\"></span>\n<p>If point is on a headline, but not on a link, offer all links in the\nheadline and entry text.  If you want to setup the frame\nconfiguration for following links, customize <code>org-link-frame-setup</code>.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">RET</span></kbd></dt>\n<dd><span id=\"index-org_002dreturn_002dfollows_002dlink\"></span>\n<span id=\"index-RET-1\"></span>\n<p>When <code>org-return-follows-link</code> is set, <kbd><span class=\"key\">RET</span></kbd> also follows\nthe link at point.\n</p>\n</dd>\n<dt><kbd>mouse-2</kbd> or <kbd>mouse-1</kbd></dt>\n<dd><span id=\"index-mouse_002d2\"></span>\n<span id=\"index-mouse_002d1\"></span>\n<p>On links, <kbd>mouse-1</kbd> and <kbd>mouse-2</kbd> opens the link\njust as <kbd>C-c C-o</kbd> does.\n</p>\n</dd>\n<dt><kbd>mouse-3</kbd></dt>\n<dd><span id=\"index-org_002dlink_002duse_002dindirect_002dbuffer_002dfor_002dinternals\"></span>\n<span id=\"index-mouse_002d3\"></span>\n<p>Like <kbd>mouse-2</kbd>, but force file links to be opened with\nEmacs, and internal links to be displayed in another window<a id=\"DOCF33\" href=\"https://orgmode.org/org.html#FOOT33\"><sup>33</sup></a>.\n</p>\n</dd>\n<dt><kbd>C-c %</kbd> (<code>org-mark-ring-push</code>)</dt>\n<dd><span id=\"index-C_002dc-_0025\"></span>\n<span id=\"index-org_002dmark_002dring_002dpush\"></span>\n<span id=\"index-mark-ring\"></span>\n<p>Push the current position onto the Org mark ring, to be able to\nreturn easily.  Commands following an internal link do this\nautomatically.\n</p>\n</dd>\n<dt><kbd>C-c &amp;</kbd> (<code>org-mark-ring-goto</code>)</dt>\n<dd><span id=\"index-C_002dc-_0026\"></span>\n<span id=\"index-org_002dmark_002dring_002dgoto\"></span>\n<span id=\"index-links_002c-returning-to\"></span>\n<p>Jump back to a recorded position.  A position is recorded by the\ncommands following internal links, and by <kbd>C-c %</kbd>.  Using\nthis command several times in direct succession moves through a ring\nof previously recorded positions.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-n</kbd> (<code>org-next-link</code>)</dt>\n<dt><kbd>C-c C-x C-p</kbd> (<code>org-previous-link</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dp\"></span>\n<span id=\"index-org_002dprevious_002dlink\"></span>\n<span id=\"index-C_002dc-C_002dx-C_002dn\"></span>\n<span id=\"index-org_002dnext_002dlink\"></span>\n<span id=\"index-links_002c-finding-next_002fprevious\"></span>\n<p>Move forward/backward to the next link in the buffer.  At the limit\nof the buffer, the search fails once, and then wraps around.  The\nkey bindings for this are really too long; you might want to bind\nthis also to <kbd>M-n</kbd> and <kbd>M-p</kbd>.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(with-eval-after-load 'org\n  (define-key org-mode-map (kbd \"M-n\") #'org-next-link)\n  (define-key org-mode-map (kbd \"M-p\") #'org-previous-link))\n</pre></div>\n</dd>\n</dl>\n\n"}, {"id": "46UsingLinksOutsideOrg", "content": "\n<span id=\"Using-Links-Outside-Org\"></span>\n<span id=\"Using-Links-Outside-Org-1\"></span><h3 class=\"section\">4.6 Using Links Outside Org</h3>\n\n<span id=\"index-org_002dinsert_002dlink_002dglobal\"></span>\n<span id=\"index-org_002dopen_002dat_002dpoint_002dglobal\"></span>\n<p>You can insert and follow links that have Org syntax not only in Org,\nbut in any Emacs buffer.  For this, Org provides two functions:\n<code>org-insert-link-global</code> and <code>org-open-at-point-global</code>.\n</p>\n<p>You might want to bind them to globally available keys.  See\n<a href=\"https://orgmode.org/org.html#Activation\">Activation</a> for some advice.\n</p>\n"}, {"id": "47LinkAbbreviations", "content": "\n<span id=\"Link-Abbreviations\"></span>\n<span id=\"Link-Abbreviations-1\"></span><h3 class=\"section\">4.7 Link Abbreviations</h3>\n\n<span id=\"index-link-abbreviations\"></span>\n<span id=\"index-abbreviation_002c-links\"></span>\n\n<p>Long URL can be cumbersome to type, and often many similar links are\nneeded in a document.  For this you can use link abbreviations.  An\nabbreviated link looks like this\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[linkword:tag][description]]\n</pre></div>\n\n\n<p><span id=\"index-org_002dlink_002dabbrev_002dalist\"></span>\nwhere the tag is optional.  The <em>linkword</em> must be a word, starting\nwith a letter, followed by letters, numbers, \u2018<samp>-</samp>\u2019, and \u2018<samp>_</samp>\u2019.\nAbbreviations are resolved according to the information in the\nvariable <code>org-link-abbrev-alist</code> that relates the linkwords to\nreplacement text.  Here is an example:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-link-abbrev-alist\n      '((\"bugzilla\"        . \"http://10.1.2.9/bugzilla/show_bug.cgi?id=\")\n        (\"Nu Html Checker\" . \"https://validator.w3.org/nu/?doc=%h\")\n        (\"duckduckgo\"      . \"https://duckduckgo.com/?q=%s\")\n        (\"omap\"            . \"http://nominatim.openstreetmap.org/search?q=%s&amp;polygon=1\")\n        (\"ads\"             . \"https://ui.adsabs.harvard.edu/search/q=%20author%3A\\\"%s\\\"\")))\n</pre></div>\n\n<p>If the replacement text contains the string \u2018<samp>%s</samp>\u2019, it is replaced with\nthe tag.  Using \u2018<samp>%h</samp>\u2019 instead of \u2018<samp>%s</samp>\u2019 percent-encodes the tag (see the\nexample above, where we need to encode the URL parameter).  Using\n\u2018<samp>%(my-function)</samp>\u2019 passes the tag to a custom Lisp function, and replace\nit by the resulting string.\n</p>\n<p>If the replacement text do not contain any specifier, it is simply\nappended to the string in order to create the link.\n</p>\n<p>Instead of a string, you may also specify a Lisp function to create\nthe link.  Such a function will be called with the tag as the only\nargument.\n</p>\n<p>With the above setting, you could link to a specific bug with\n\u2018<samp>[[bugzilla:129]]</samp>\u2019, search the web for \u2018<samp>OrgMode</samp>\u2019 with \u2018<samp>[[duckduckgo:OrgMode]]</samp>\u2019,\nshow the map location of the Free Software Foundation \u2018<samp>[[gmap:51\nFranklin Street, Boston]]</samp>\u2019 or of Carsten office \u2018<samp>[[omap:Science Park 904,\nAmsterdam, The Netherlands]]</samp>\u2019 and find out what the Org author is doing\nbesides Emacs hacking with \u2018<samp>[[ads:Dominik,C]]</samp>\u2019.\n</p>\n<p>If you need special abbreviations just for a single Org buffer, you\ncan define them in the file with\n</p>\n<span id=\"index-LINK_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=\n#+LINK: duckduckgo https://duckduckgo.com/?q=%s\n</pre></div>\n\n<p>In-buffer completion (see <a href=\"https://orgmode.org/org.html#Completion\">Completion</a>) can be used after \u2018<samp>[</samp>\u2019 to\ncomplete link abbreviations.  You may also define a Lisp function that\nimplements special (e.g., completion) support for inserting such a\nlink with <kbd>C-c C-l</kbd>.  Such a function should not accept any\narguments, and should return the full link with a prefix.  You can set\nthe link completion function like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-link-set-parameter \"type\" :complete #'some-completion-function)\n</pre></div>\n\n"}, {"id": "48SearchOptionsinFileLinks", "content": "\n<span id=\"Search-Options\"></span>\n<span id=\"Search-Options-in-File-Links\"></span><h3 class=\"section\">4.8 Search Options in File Links</h3>\n\n<span id=\"index-search-option-in-file-links\"></span>\n<span id=\"index-file-links_002c-searching\"></span>\n<span id=\"index-attachment-links_002c-searching\"></span>\n\n<p>File links can contain additional information to make Emacs jump to a\nparticular location in the file when following a link.  This can be a\nline number or a search option after a double colon<a id=\"DOCF34\" href=\"https://orgmode.org/org.html#FOOT34\"><sup>34</sup></a>.  For\nexample, when the command <code>org-store-link</code> creates a link (see\n<a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>) to a file, it encodes the words in the current line\nas a search string that can be used to find this line back later when\nfollowing the link with <kbd>C-c C-o</kbd>.\n</p>\n<p>Note that all search options apply for Attachment links in the same\nway that they apply for File links.\n</p>\n<p>Here is the syntax of the different ways to attach a search to a file\nlink, together with explanations for each:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[file:~/code/main.c::255]]\n[[file:~/xx.org::My Target]]\n[[file:~/xx.org::*My Target]]\n[[file:~/xx.org::#my-custom-id]]\n[[file:~/xx.org::/regexp/]]\n[[attachment:main.c::255]]\n</pre></div>\n\n<dl compact=\"compact\">\n<dt>\u2018<samp>255</samp>\u2019</dt>\n<dd><p>Jump to line 255.\n</p>\n</dd>\n<dt>\u2018<samp>My Target</samp>\u2019</dt>\n<dd><p>Search for a link target \u2018<samp>&lt;&lt;My Target&gt;&gt;</samp>\u2019, or do a text search for\n\u2018<samp>my target</samp>\u2019, similar to the search in internal links, see <a href=\"https://orgmode.org/org.html#Internal-Links\">Internal Links</a>.  In HTML export (see <a href=\"https://orgmode.org/org.html#HTML-Export\">HTML Export</a>), such a file link becomes\na HTML reference to the corresponding named anchor in the linked\nfile.\n</p>\n</dd>\n<dt>\u2018<samp>*My Target</samp>\u2019</dt>\n<dd><p>In an Org file, restrict search to headlines.\n</p>\n</dd>\n<dt>\u2018<samp>#my-custom-id</samp>\u2019</dt>\n<dd><p>Link to a heading with a \u2018<samp>CUSTOM_ID</samp>\u2019 property\n</p>\n</dd>\n<dt>\u2018<samp>/REGEXP/</samp>\u2019</dt>\n<dd><p>Do a regular expression search for <var>REGEXP</var> (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>).  This uses the Emacs command <code>occur</code> to list all\nmatches in a separate window.  If the target file is in Org mode,\n<code>org-occur</code> is used to create a sparse tree with the matches.\n</p></dd>\n</dl>\n\n<p>As a degenerate case, a file link with an empty file name can be used\nto search the current file.  For example, \u2018<samp>[[file:::find me]]</samp>\u2019 does\na search for \u2018<samp>find me</samp>\u2019 in the current file, just as \u2018<samp>[[find me]]</samp>\u2019\nwould.\n</p>\n"}, {"id": "49CustomSearches", "content": "\n<span id=\"Custom-Searches\"></span>\n<span id=\"Custom-Searches-1\"></span><h3 class=\"section\">4.9 Custom Searches</h3>\n\n<span id=\"index-custom-search-strings\"></span>\n<span id=\"index-search-strings_002c-custom\"></span>\n\n<p>The default mechanism for creating search strings and for doing the\nactual search related to a file link may not work correctly in all\ncases.  For example, BibTeX database files have many entries like\n<code>year=\"1993\"</code> which would not result in good search strings, because\nthe only unique identification for a BibTeX entry is the citation key.\n</p>\n<span id=\"index-org_002dcreate_002dfile_002dsearch_002dfunctions\"></span>\n<span id=\"index-org_002dexecute_002dfile_002dsearch_002dfunctions\"></span>\n<p>If you come across such a problem, you can write custom functions to\nset the right search string for a particular file type, and to do the\nsearch for the string in the file.  Using <code>add-hook</code>, these functions\nneed to be added to the hook variables\n<code>org-create-file-search-functions</code> and\n<code>org-execute-file-search-functions</code>.  See the docstring for these\nvariables for more information.  Org actually uses this mechanism for\nBibTeX database files, and you can use the corresponding code as an\nimplementation example.  See the file \u2018<samp>ol-bibtex.el</samp>\u2019.\n</p>\n"}, {"id": "5TODOItems", "content": "\n<span id=\"TODO-Items\"></span>\n<span id=\"TODO-Items-1\"></span><h2 class=\"chapter\">5 TODO Items</h2>\n\n<span id=\"index-TODO-items\"></span>\n\n<p>Org mode does not maintain TODO lists as separate documents<a id=\"DOCF35\" href=\"https://orgmode.org/org.html#FOOT35\"><sup>35</sup></a>.\nInstead, TODO items are an integral part of the notes file, because\nTODO items usually come up while taking notes!  With Org mode, simply\nmark any entry in a tree as being a TODO item.  In this way,\ninformation is not duplicated, and the entire context from which the\nTODO item emerged is always present.\n</p>\n<p>Of course, this technique for managing TODO items scatters them\nthroughout your notes file.  Org mode compensates for this by\nproviding methods to give you an overview of all the things that you\nhave to do.\n</p>\n\n\n"}, {"id": "51BasicTODOFunctionality", "content": "\n<span id=\"TODO-Basics\"></span>\n<span id=\"Basic-TODO-Functionality\"></span><h3 class=\"section\">5.1 Basic TODO Functionality</h3>\n\n<p>Any headline becomes a TODO item when it starts with the word \u2018<samp>TODO</samp>\u2019,\nfor example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** TODO Write letter to Sam Fortune\n</pre></div>\n\n\n<p>The most important commands to work with TODO entries are:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-t</kbd> (<code>org-todo</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dt\"></span>\n<span id=\"index-cycling_002c-of-TODO-states\"></span>\n<p>Rotate the TODO state of the current item among\n</p>\n<div class=\"example\">\n<pre class=\"example\">,-&gt; (unmarked) -&gt; TODO -&gt; DONE --.\n'--------------------------------'\n</pre></div>\n\n<p>If TODO keywords have fast access keys (see <a href=\"https://orgmode.org/org.html#Fast-access-to-TODO-states\">Fast access to TODO states</a>), prompt for a TODO keyword through the fast selection\ninterface; this is the default behavior when\n<code>org-use-fast-todo-selection</code> is non-<code>nil</code>.\n</p>\n<p>The same state changing can also be done \u201cremotely\u201d from the agenda\nbuffer with the <kbd>t</kbd> command key (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> <kbd>S-<span class=\"key\">LEFT</span></kbd></dt>\n<dd><span id=\"index-S_002dRIGHT-3\"></span>\n<span id=\"index-S_002dLEFT-3\"></span>\n<span id=\"index-org_002dtreat_002dS_002dcursor_002dtodo_002dselection_002das_002dstate_002dchange\"></span>\n<p>Select the following/preceding TODO state, similar to cycling.\nUseful mostly if more than two TODO states are possible (see\n<a href=\"https://orgmode.org/org.html#TODO-Extensions\">TODO Extensions</a>).  See also <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>, for a discussion of the interaction with\nshift-selection.  See also the variable\n<code>org-treat-S-cursor-todo-selection-as-state-change</code>.\n</p>\n</dd>\n<dt><kbd>C-c / t</kbd> (<code>org-show-todo-tree</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-t\"></span>\n<span id=\"index-sparse-tree_002c-for-TODO\"></span>\n<span id=\"index-org_002dtodo_002dkeywords\"></span>\n<span id=\"index-org_002dshow_002dtodo_002dtree\"></span>\n<p>View TODO items in a <em>sparse tree</em> (see <a href=\"https://orgmode.org/org.html#Sparse-Trees\">Sparse Trees</a>).  Folds the\nentire buffer, but shows all TODO items\u2014with not-DONE state\u2014and\nthe headings hierarchy above them.  With a prefix argument, or by\nusing <kbd>C-c / T</kbd>, search for a specific TODO.  You are\nprompted for the keyword, and you can also give a list of keywords\nlike \u2018<samp>KWD1|KWD2|...</samp>\u2019 to list entries that match any one of these\nkeywords.  With a numeric prefix argument N, show the tree for the\nNth keyword in the variable <code>org-todo-keywords</code>.  With two prefix\narguments, find all TODO states, both un-done and done.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda t</kbd> (<code>org-todo-list</code>)</dt>\n<dd><span id=\"index-t-_0028Agenda-dispatcher_0029\"></span>\n<p>Show the global TODO list.  Collects the TODO items (with not-DONE\nstates) from all agenda files (see <a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>) into a single\nbuffer.  The new buffer is in Org Agenda mode, which provides\ncommands to examine and manipulate the TODO entries from the new\nbuffer (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).  See <a href=\"https://orgmode.org/org.html#Global-TODO-list\">Global TODO list</a>, for more information.\n</p>\n</dd>\n<dt><kbd>S-M-<span class=\"key\">RET</span></kbd> (<code>org-insert-todo-heading</code>)</dt>\n<dd><span id=\"index-S_002dM_002dRET\"></span>\n<span id=\"index-org_002dinsert_002dtodo_002dheading-1\"></span>\n<p>Insert a new TODO entry below the current one.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dtodo_002dstate_002dtags_002dtriggers\"></span>\n<p>Changing a TODO state can also trigger tag changes.  See the docstring\nof the option <code>org-todo-state-tags-triggers</code> for details.\n</p>\n"}, {"id": "52ExtendedUseofTODOKeywords", "content": "\n<span id=\"TODO-Extensions\"></span>\n<span id=\"Extended-Use-of-TODO-Keywords\"></span><h3 class=\"section\">5.2 Extended Use of TODO Keywords</h3>\n\n<span id=\"index-extended-TODO-keywords\"></span>\n\n<span id=\"index-org_002dtodo_002dkeywords-1\"></span>\n<p>By default, marked TODO entries have one of only two states: TODO and\nDONE.  Org mode allows you to classify TODO items in more complex ways\nwith <em>TODO keywords</em> (stored in <code>org-todo-keywords</code>).  With special\nsetup, the TODO keyword system can work differently in different\nfiles.\n</p>\n<p>Note that <em>tags</em> are another way to classify headlines in general and\nTODO items in particular (see <a href=\"https://orgmode.org/org.html#Tags\">Tags</a>).\n</p>\n\n\n"}, {"id": "521TODOkeywordsasworkflowstates", "content": "\n<span id=\"Workflow-states\"></span>\n<span id=\"TODO-keywords-as-workflow-states\"></span><h4 class=\"subsection\">5.2.1 TODO keywords as workflow states</h4>\n\n<span id=\"index-TODO-workflow\"></span>\n<span id=\"index-workflow-states-as-TODO-keywords\"></span>\n\n<p>You can use TODO keywords to indicate different, possibly <em>sequential</em>\nstates in the process of working on an item, for example<a id=\"DOCF36\" href=\"https://orgmode.org/org.html#FOOT36\"><sup>36</sup></a>:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keywords\n      '((sequence \"TODO\" \"FEEDBACK\" \"VERIFY\" \"|\" \"DONE\" \"DELEGATED\")))\n</pre></div>\n\n<p>The vertical bar separates the TODO keywords (states that <em>need\naction</em>) from the DONE states (which need <em>no further action</em>).  If\nyou do not provide the separator bar, the last state is used as the\nDONE state.\n</p>\n<span id=\"index-completion_002c-of-TODO-keywords\"></span>\n<p>With this setup, the command <kbd>C-c C-t</kbd> cycles an entry from\n\u2018<samp>TODO</samp>\u2019 to \u2018<samp>FEEDBACK</samp>\u2019, then to \u2018<samp>VERIFY</samp>\u2019, and finally to \u2018<samp>DONE</samp>\u2019 and\n\u2018<samp>DELEGATED</samp>\u2019.  You may also use a numeric prefix argument to quickly\nselect a specific state.  For example <kbd>C-3 C-c C-t</kbd> changes\nthe state immediately to \u2018<samp>VERIFY</samp>\u2019.  Or you can use <kbd>S-<span class=\"key\">RIGHT</span></kbd>\nand <kbd>S-<span class=\"key\">LEFT</span></kbd> to go forward and backward through the states.\nIf you define many keywords, you can use in-buffer completion (see\n<a href=\"https://orgmode.org/org.html#Completion\">Completion</a>) or a special one-key selection scheme (see <a href=\"https://orgmode.org/org.html#Fast-access-to-TODO-states\">Fast access to TODO states</a>) to insert these words into the buffer.\nChanging a TODO state can be logged with a timestamp, see <a href=\"https://orgmode.org/org.html#Tracking-TODO-state-changes\">Tracking TODO state changes</a>, for more information.\n</p>\n"}, {"id": "522TODOkeywordsastypes", "content": "\n<span id=\"TODO-types\"></span>\n<span id=\"TODO-keywords-as-types\"></span><h4 class=\"subsection\">5.2.2 TODO keywords as types</h4>\n\n<span id=\"index-TODO-types\"></span>\n<span id=\"index-names-as-TODO-keywords\"></span>\n<span id=\"index-types-as-TODO-keywords\"></span>\n\n<p>The second possibility is to use TODO keywords to indicate different\n<em>types</em> of action items.  For example, you might want to indicate that\nitems are for \u201cwork\u201d or \u201chome\u201d.  Or, when you work with several people\non a single project, you might want to assign action items directly to\npersons, by using their names as TODO keywords.  This type of\nfunctionality is actually much better served by using tags (see\n<a href=\"https://orgmode.org/org.html#Tags\">Tags</a>), so the TODO implementation is kept just for backward\ncompatibility.\n</p>\n<p>Using TODO types, it would be set up like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keywords '((type \"Fred\" \"Sara\" \"Lucy\" \"|\" \"DONE\")))\n</pre></div>\n\n<p>In this case, different keywords do not indicate states, but\nrather different types.  So the normal work flow would be to assign\na task to a person, and later to mark it DONE.  Org mode supports this\nstyle by adapting the workings of the command <kbd>C-c C-t</kbd><a id=\"DOCF37\" href=\"https://orgmode.org/org.html#FOOT37\"><sup>37</sup></a>.  When used several times in succession, it still\ncycles through all names, in order to first select the right type for\na task.  But when you return to the item after some time and execute\n<kbd>C-c C-t</kbd> again, it will switch from any name directly to\n\u2018<samp>DONE</samp>\u2019.  Use prefix arguments or completion to quickly select\na specific name.  You can also review the items of a specific TODO\ntype in a sparse tree by using a numeric prefix to <kbd>C-c / t</kbd>.\nFor example, to see all things Lucy has to do, you would use\n<kbd>C-3 C-c / t</kbd>.  To collect Lucy\u2019s items from all agenda files\ninto a single buffer, you would use the numeric prefix argument as\nwell when creating the global TODO list: <kbd>C-3 M-x org-agenda t</kbd>.\n</p>\n"}, {"id": "523Multiplekeywordsetsinonefile", "content": "\n<span id=\"Multiple-sets-in-one-file\"></span>\n<span id=\"Multiple-keyword-sets-in-one-file\"></span><h4 class=\"subsection\">5.2.3 Multiple keyword sets in one file</h4>\n\n<span id=\"index-TODO-keyword-sets\"></span>\n\n<p>Sometimes you may want to use different sets of TODO keywords in\nparallel.  For example, you may want to have the basic TODO/DONE, but\nalso a workflow for bug fixing, and a separate state indicating that\nan item has been canceled\u2014so it is not DONE, but also does not\nrequire action.  Your setup would then look like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keywords\n      '((sequence \"TODO\" \"|\" \"DONE\")\n        (sequence \"REPORT\" \"BUG\" \"KNOWNCAUSE\" \"|\" \"FIXED\")\n        (sequence \"|\" \"CANCELED\")))\n</pre></div>\n\n<p>The keywords should all be different, this helps Org mode keep track\nof which subsequence should be used for a given entry.  In this setup,\n<kbd>C-c C-t</kbd> only operates within a sub-sequence, so it switches\nfrom \u2018<samp>DONE</samp>\u2019 to (nothing) to \u2018<samp>TODO</samp>\u2019, and from \u2018<samp>FIXED</samp>\u2019 to (nothing) to\n\u2018<samp>REPORT</samp>\u2019.  Therefore you need a mechanism to initially select the\ncorrect sequence.  In addition to typing a keyword or using completion\n(see <a href=\"https://orgmode.org/org.html#Completion\">Completion</a>), you may also apply the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-u C-u C-c C-t</kbd></dt>\n<dt><kbd>C-S-<span class=\"key\">RIGHT</span></kbd></dt>\n<dt><kbd>C-S-<span class=\"key\">LEFT</span></kbd></dt>\n<dd><span id=\"index-C_002dS_002dRIGHT\"></span>\n<span id=\"index-C_002dS_002dLEFT\"></span>\n<span id=\"index-C_002du-C_002du-C_002dc-C_002dt\"></span>\n<p>These keys jump from one TODO sub-sequence to the next.  In the\nabove example, <kbd>C-u C-u C-c C-t</kbd> or <kbd>C-S-<span class=\"key\">RIGHT</span></kbd>\nwould jump from \u2018<samp>TODO</samp>\u2019 or \u2018<samp>DONE</samp>\u2019 to \u2018<samp>REPORT</samp>\u2019, and any of the words\nin the second row to \u2018<samp>CANCELED</samp>\u2019.  Note that the <kbd>C-S-</kbd> key\nbinding conflict with shift-selection (see <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd></dt>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd></dt>\n<dd><span id=\"index-S_002dRIGHT-4\"></span>\n<span id=\"index-S_002dLEFT-4\"></span>\n<p><kbd>S-<span class=\"key\">LEFT</span></kbd> and <kbd>S-<span class=\"key\">RIGHT</span></kbd> walk through <em>all</em> keywords\nfrom all sub-sequences, so for example <kbd>S-<span class=\"key\">RIGHT</span></kbd> would\nswitch from \u2018<samp>DONE</samp>\u2019 to \u2018<samp>REPORT</samp>\u2019 in the example above.  For\na discussion of the interaction with shift-selection, see <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>.\n</p></dd>\n</dl>\n\n"}, {"id": "524FastaccesstoTODOstates", "content": "\n<span id=\"Fast-access-to-TODO-states\"></span>\n<span id=\"Fast-access-to-TODO-states-1\"></span><h4 class=\"subsection\">5.2.4 Fast access to TODO states</h4>\n\n<p>If you would like to quickly change an entry to an arbitrary TODO\nstate instead of cycling through the states, you can set up keys for\nsingle-letter access to the states.  This is done by adding the\nselection character after each keyword, in parentheses<a id=\"DOCF38\" href=\"https://orgmode.org/org.html#FOOT38\"><sup>38</sup></a>.  For\nexample:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keywords\n      '((sequence \"TODO(t)\" \"|\" \"DONE(d)\")\n        (sequence \"REPORT(r)\" \"BUG(b)\" \"KNOWNCAUSE(k)\" \"|\" \"FIXED(f)\")\n        (sequence \"|\" \"CANCELED(c)\")))\n</pre></div>\n\n<span id=\"index-org_002dfast_002dtag_002dselection_002dinclude_002dtodo\"></span>\n<p>If you then press <kbd>C-c C-t</kbd> followed by the selection key,\nthe entry is switched to this state.  <kbd><span class=\"key\">SPC</span></kbd> can be used to\nremove any TODO keyword from an entry<a id=\"DOCF39\" href=\"https://orgmode.org/org.html#FOOT39\"><sup>39</sup></a>.\n</p>\n"}, {"id": "525Settingupkeywordsforindividualfiles", "content": "\n<span id=\"Per_002dfile-keywords\"></span>\n<span id=\"Setting-up-keywords-for-individual-files\"></span><h4 class=\"subsection\">5.2.5 Setting up keywords for individual files</h4>\n\n<span id=\"index-keyword-options\"></span>\n<span id=\"index-per_002dfile-keywords\"></span>\n<span id=\"index-TODO_002c-keyword\"></span>\n<span id=\"index-TYP_005fTODO_002c-keyword\"></span>\n<span id=\"index-SEQ_005fTODO_002c-keyword\"></span>\n\n<p>It can be very useful to use different aspects of the TODO mechanism\nin different files.  For file-local settings, you need to add special\nlines to the file which set the keywords and interpretation for that\nfile only.  For example, to set one of the two examples discussed\nabove, you need one of the following lines, starting in column zero\nanywhere in the file:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED\n</pre></div>\n\n\n<p>You may also write \u2018<samp>#+SEQ_TODO</samp>\u2019 to be explicit about the\ninterpretation, but it means the same as \u2018<samp>#+TODO</samp>\u2019, or\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TYP_TODO: Fred Sara Lucy Mike | DONE\n</pre></div>\n\n\n<p>A setup for using several sets in parallel would be:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TODO: TODO(t) | DONE(d)\n#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)\n#+TODO: | CANCELED(c)\n</pre></div>\n\n<span id=\"index-completion_002c-of-option-keywords\"></span>\n<span id=\"index-M_002dTAB-1\"></span>\n<p>To make sure you are using the correct keyword, type \u2018<samp>#+</samp>\u2019 into the\nbuffer and then use <kbd>M-<span class=\"key\">TAB</span></kbd> to complete it (see <a href=\"https://orgmode.org/org.html#Completion\">Completion</a>).\n</p>\n<span id=\"index-DONE_002c-final-TODO-keyword\"></span>\n<p>Remember that the keywords after the vertical bar\u2014or the last\nkeyword if no bar is there\u2014must always mean that the item is DONE,\nalthough you may use a different word.  After changing one of these\nlines, use <kbd>C-c C-c</kbd> with point still in the line to make the\nchanges known to Org mode<a id=\"DOCF40\" href=\"https://orgmode.org/org.html#FOOT40\"><sup>40</sup></a>.\n</p>\n"}, {"id": "526FacesforTODOkeywords", "content": "\n<span id=\"Faces-for-TODO-keywords\"></span>\n<span id=\"Faces-for-TODO-keywords-1\"></span><h4 class=\"subsection\">5.2.6 Faces for TODO keywords</h4>\n\n<span id=\"index-faces_002c-for-TODO-keywords\"></span>\n\n<span id=\"index-org_002dtodo_002c-face\"></span>\n<span id=\"index-org_002ddone_002c-face\"></span>\n<span id=\"index-org_002dtodo_002dkeyword_002dfaces\"></span>\n<p>Org mode highlights TODO keywords with special faces: <code>org-todo</code> for\nkeywords indicating that an item still has to be acted upon, and\n<code>org-done</code> for keywords indicating that an item is finished.  If you\nare using more than two different states, you might want to use\nspecial faces for some of them.  This can be done using the variable\n<code>org-todo-keyword-faces</code>.  For example:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keyword-faces\n      '((\"TODO\" . org-warning) (\"STARTED\" . \"yellow\")\n        (\"CANCELED\" . (:foreground \"blue\" :weight bold))))\n</pre></div>\n\n<span id=\"index-org_002dfaces_002deasy_002dproperties\"></span>\n<p>While using a list with face properties as shown for \u2018<samp>CANCELED</samp>\u2019\n<em>should</em> work, this does not always seem to be the case.  If\nnecessary, define a special face and use that.  A string is\ninterpreted as a color.  The variable <code>org-faces-easy-properties</code>\ndetermines if that color is interpreted as a foreground or\na background color.\n</p>\n"}, {"id": "527TODOdependencies", "content": "\n<span id=\"TODO-dependencies\"></span>\n<span id=\"TODO-dependencies-1\"></span><h4 class=\"subsection\">5.2.7 TODO dependencies</h4>\n\n<span id=\"index-TODO-dependencies\"></span>\n<span id=\"index-dependencies_002c-of-TODO-states\"></span>\n\n<span id=\"index-org_002denforce_002dtodo_002ddependencies\"></span>\n<span id=\"index-ORDERED_002c-property\"></span>\n<p>The structure of Org files\u2014hierarchy and lists\u2014makes it easy to\ndefine TODO dependencies.  Usually, a parent TODO task should not be\nmarked as done until all TODO subtasks, or children tasks, are marked\nas done.  Sometimes there is a logical sequence to (sub)tasks, so that\none subtask cannot be acted upon before all siblings above it have\nbeen marked as done.  If you customize the variable\n<code>org-enforce-todo-dependencies</code>, Org blocks entries from changing\nstate to DONE while they have TODO children that are not DONE.\nFurthermore, if an entry has a property \u2018<samp>ORDERED</samp>\u2019, each of its TODO\nchildren is blocked until all earlier siblings are marked as done.\nHere is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* TODO Blocked until (two) is done\n** DONE one\n** TODO two\n\n* Parent\n:PROPERTIES:\n:ORDERED:  t\n:END:\n** TODO a\n** TODO b, needs to wait for (a)\n** TODO c, needs to wait for (a) and (b)\n</pre></div>\n\n<span id=\"index-TODO-dependencies_002c-NOBLOCKING\"></span>\n<span id=\"index-NOBLOCKING_002c-property\"></span>\n<p>You can ensure an entry is never blocked by using the \u2018<samp>NOBLOCKING</samp>\u2019\nproperty (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>):\n</p>\n<div class=\"example\">\n<pre class=\"example\">* This entry is never blocked\n:PROPERTIES:\n:NOBLOCKING: t\n:END:\n</pre></div>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x o</kbd> (<code>org-toggle-ordered-property</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-o\"></span>\n<span id=\"index-org_002dtoggle_002dordered_002dproperty\"></span>\n<span id=\"index-org_002dtrack_002dordered_002dproperty_002dwith_002dtag\"></span>\n<p>Toggle the \u2018<samp>ORDERED</samp>\u2019 property of the current entry.  A property is\nused for this behavior because this should be local to the current\nentry, not inherited from entries above like a tag (see <a href=\"https://orgmode.org/org.html#Tags\">Tags</a>).\nHowever, if you would like to <em>track</em> the value of this property\nwith a tag for better visibility, customize the variable\n<code>org-track-ordered-property-with-tag</code>.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-u C-c C-t</kbd></dt>\n<dd><span id=\"index-C_002du-C_002du-C_002du-C_002du-C_002dc-C_002dt\"></span>\n<p>Change TODO state, regardless of any state blocking.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dagenda_002ddim_002dblocked_002dtasks\"></span>\n<p>If you set the variable <code>org-agenda-dim-blocked-tasks</code>, TODO entries\nthat cannot be marked as done because of unmarked children are shown\nin a dimmed font or even made invisible in agenda views (see <a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>).\n</p>\n<span id=\"index-checkboxes-and-TODO-dependencies\"></span>\n<span id=\"index-org_002denforce_002dtodo_002ddependencies-1\"></span>\n<p>You can also block changes of TODO states by using checkboxes (see\n<a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>).  If you set the variable\n<code>org-enforce-todo-checkbox-dependencies</code>, an entry that has unchecked\ncheckboxes is blocked from switching to DONE.\n</p>\n<p>If you need more complex dependency structures, for example\ndependencies between entries in different trees or files, check out\nthe module \u2018<samp>org-depend.el</samp>\u2019 in the \u2018<samp>org-contrib</samp>\u2019 repository.\n</p>\n"}, {"id": "53ProgressLogging", "content": "\n<span id=\"Progress-Logging\"></span>\n<span id=\"Progress-Logging-1\"></span><h3 class=\"section\">5.3 Progress Logging</h3>\n\n<span id=\"index-progress-logging\"></span>\n<span id=\"index-logging_002c-of-progress\"></span>\n\n<p>To record a timestamp and a note when changing a TODO state, call the\ncommand <code>org-todo</code> with a prefix argument.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-u C-c C-t</kbd> (<code>org-todo</code>)</dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dt\"></span>\n<p>Prompt for a note and record a the time of the TODO state change.\nThe note is inserted as a list item below the headline, but can also\nbe placed into a drawer, see <a href=\"https://orgmode.org/org.html#Tracking-TODO-state-changes\">Tracking TODO state changes</a>.\n</p></dd>\n</dl>\n\n<p>If you want to be more systematic, Org mode can automatically record a\ntimestamp and optionally a note when you mark a TODO item as DONE, or\neven each time you change the state of a TODO item.  This system is\nhighly configurable, settings can be on a per-keyword basis and can be\nlocalized to a file or even a subtree.  For information on how to\nclock working time for a task, see <a href=\"https://orgmode.org/org.html#Clocking-Work-Time\">Clocking Work Time</a>.\n</p>\n\n\n"}, {"id": "531Closingitems", "content": "\n<span id=\"Closing-items\"></span>\n<span id=\"Closing-items-1\"></span><h4 class=\"subsection\">5.3.1 Closing items</h4>\n\n<p>The most basic automatic logging is to keep track of <em>when</em> a certain\nTODO item was marked as done.  This can be achieved with<a id=\"DOCF41\" href=\"https://orgmode.org/org.html#FOOT41\"><sup>41</sup></a>\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-log-done 'time)\n</pre></div>\n\n<span id=\"index-org_002dclosed_002dkeep_002dwhen_002dno_002dtodo\"></span>\n<p>Then each time you turn an entry from a TODO (not-done) state into any\nof the DONE states, a line \u2018<samp>CLOSED: [timestamp]</samp>\u2019 is inserted just\nafter the headline.  If you turn the entry back into a TODO item\nthrough further state cycling, that line is removed again.  If you\nturn the entry back to a non-TODO state (by pressing <kbd>C-c C-t <span class=\"key\">SPC</span></kbd> for example), that line is also removed, unless you set\n<code>org-closed-keep-when-no-todo</code> to non-<code>nil</code>.  If you want to record\na note along with the timestamp, use<a id=\"DOCF42\" href=\"https://orgmode.org/org.html#FOOT42\"><sup>42</sup></a>\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-log-done 'note)\n</pre></div>\n\n<p>You are then prompted for a note, and that note is stored below the\nentry with a \u2018<samp>Closing Note</samp>\u2019 heading.\n</p>\n"}, {"id": "532TrackingTODOstatechanges", "content": "\n<span id=\"Tracking-TODO-state-changes\"></span>\n<span id=\"Tracking-TODO-state-changes-1\"></span><h4 class=\"subsection\">5.3.2 Tracking TODO state changes</h4>\n\n<span id=\"index-drawer_002c-for-state-change-recording\"></span>\n\n<span id=\"index-org_002dlog_002dstates_002dorder_002dreversed\"></span>\n<span id=\"index-org_002dlog_002dinto_002ddrawer\"></span>\n<span id=\"index-LOG_005fINTO_005fDRAWER_002c-property\"></span>\n<p>You might want to automatically keep track of when a state change\noccurred and maybe take a note about this change.  You can either\nrecord just a timestamp, or a time-stamped note.  These records are\ninserted after the headline as an itemized list, newest first<a id=\"DOCF43\" href=\"https://orgmode.org/org.html#FOOT43\"><sup>43</sup></a>.\nWhen taking a lot of notes, you might want to get the notes out of the\nway into a drawer (see <a href=\"https://orgmode.org/org.html#Drawers\">Drawers</a>).  Customize the variable\n<code>org-log-into-drawer</code> to get this behavior\u2014the recommended drawer\nfor this is called \u2018<samp>LOGBOOK</samp>\u2019<a id=\"DOCF44\" href=\"https://orgmode.org/org.html#FOOT44\"><sup>44</sup></a>.  You can also overrule the\nsetting of this variable for a subtree by setting a \u2018<samp>LOG_INTO_DRAWER</samp>\u2019\nproperty.\n</p>\n<p>Since it is normally too much to record a note for every state, Org\nmode expects configuration on a per-keyword basis for this.  This is\nachieved by adding special markers \u2018<samp>!</samp>\u2019 (for a timestamp) or \u2018<samp>@</samp>\u2019 (for\na note with timestamp) in parentheses after each keyword.  For\nexample, with the setting\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-todo-keywords\n      '((sequence \"TODO(t)\" \"WAIT(w@/!)\" \"|\" \"DONE(d!)\" \"CANCELED(c@)\")))\n</pre></div>\n\n<span id=\"index-org_002dlog_002ddone\"></span>\n<p>You not only define global TODO keywords and fast access keys, but\nalso request that a time is recorded when the entry is set to \u2018<samp>DONE</samp>\u2019,\nand that a note is recorded when switching to \u2018<samp>WAIT</samp>\u2019 or\n\u2018<samp>CANCELED</samp>\u2019<a id=\"DOCF45\" href=\"https://orgmode.org/org.html#FOOT45\"><sup>45</sup></a>.  The setting for \u2018<samp>WAIT</samp>\u2019 is even more special: the\n\u2018<samp>!</samp>\u2019 after the slash means that in addition to the note taken when\nentering the state, a timestamp should be recorded when <em>leaving</em> the\n\u2018<samp>WAIT</samp>\u2019 state, if and only if the <em>target</em> state does not configure\nlogging for entering it.  So it has no effect when switching from\n\u2018<samp>WAIT</samp>\u2019 to \u2018<samp>DONE</samp>\u2019, because \u2018<samp>DONE</samp>\u2019 is configured to record a timestamp\nonly.  But when switching from \u2018<samp>WAIT</samp>\u2019 back to \u2018<samp>TODO</samp>\u2019, the \u2018<samp>/!</samp>\u2019 in the\n\u2018<samp>WAIT</samp>\u2019 setting now triggers a timestamp even though \u2018<samp>TODO</samp>\u2019 has no\nlogging configured.\n</p>\n<p>You can use the exact same syntax for setting logging preferences local\nto a buffer:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)\n</pre></div>\n\n\n<p>To record a timestamp without a note for TODO keywords configured with\n\u2018<samp>@</samp>\u2019, just type <kbd>C-c C-c</kbd> to enter a blank note when prompted.\n</p>\n<span id=\"index-LOGGING_002c-property\"></span>\n<p>In order to define logging settings that are local to a subtree or\na single item, define a \u2018<samp>LOGGING</samp>\u2019 property in this entry.  Any\nnon-empty \u2018<samp>LOGGING</samp>\u2019 property resets all logging settings to <code>nil</code>.\nYou may then turn on logging for this specific tree using \u2018<samp>STARTUP</samp>\u2019\nkeywords like \u2018<samp>lognotedone</samp>\u2019 or \u2018<samp>logrepeat</samp>\u2019, as well as adding state\nspecific settings like \u2018<samp>TODO(!)</samp>\u2019.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* TODO Log each state with only a time\n  :PROPERTIES:\n  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)\n  :END:\n* TODO Only log when switching to WAIT, and when repeating\n  :PROPERTIES:\n  :LOGGING: WAIT(@) logrepeat\n  :END:\n* TODO No logging at all\n  :PROPERTIES:\n  :LOGGING: nil\n  :END:\n</pre></div>\n\n"}, {"id": "533Trackingyourhabits", "content": "\n<span id=\"Tracking-your-habits\"></span>\n<span id=\"Tracking-your-habits-1\"></span><h4 class=\"subsection\">5.3.3 Tracking your habits</h4>\n\n<span id=\"index-habits\"></span>\n<span id=\"index-STYLE_002c-property\"></span>\n\n<p>Org has the ability to track the consistency of a special category of\nTODO, called \u201chabits.\u201d  To use habits, you have to enable the <code>habits</code>\nmodule by customizing the variable <code>org-modules</code>.\n</p>\n<p>A habit has the following properties:\n</p>\n<ol>\n<li> The habit is a TODO item, with a TODO keyword representing an open\nstate.\n\n</li><li> The property \u2018<samp>STYLE</samp>\u2019 is set to the value \u2018<samp>habit</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>).\n\n</li><li> The TODO has a scheduled date, usually with a \u2018<samp>.+</samp>\u2019 style repeat\ninterval.  A \u2018<samp>++</samp>\u2019 style may be appropriate for habits with time\nconstraints, e.g., must be done on weekends, or a \u2018<samp>+</samp>\u2019 style for an\nunusual habit that can have a backlog, e.g., weekly reports.\n\n</li><li> The TODO may also have minimum and maximum ranges specified by\nusing the syntax \u2018<samp>.+2d/3d</samp>\u2019, which says that you want to do the task\nat least every three days, but at most every two days.\n\n</li><li> State logging for the DONE state is enabled (see <a href=\"https://orgmode.org/org.html#Tracking-TODO-state-changes\">Tracking TODO state changes</a>), in order for historical data to be represented in\nthe consistency graph.  If it is not enabled it is not an error,\nbut the consistency graphs are largely meaningless.\n</li></ol>\n\n<p>To give you an idea of what the above rules look like in action, here\u2019s an\nactual habit with some history:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** TODO Shave\n   SCHEDULED: &lt;2009-10-17 Sat .+2d/4d&gt;\n   :PROPERTIES:\n   :STYLE:    habit\n   :LAST_REPEAT: [2009-10-19 Mon 00:36]\n   :END:\n   - State \"DONE\"       from \"TODO\"       [2009-10-15 Thu]\n   - State \"DONE\"       from \"TODO\"       [2009-10-12 Mon]\n   - State \"DONE\"       from \"TODO\"       [2009-10-10 Sat]\n   - State \"DONE\"       from \"TODO\"       [2009-10-04 Sun]\n   - State \"DONE\"       from \"TODO\"       [2009-10-02 Fri]\n   - State \"DONE\"       from \"TODO\"       [2009-09-29 Tue]\n   - State \"DONE\"       from \"TODO\"       [2009-09-25 Fri]\n   - State \"DONE\"       from \"TODO\"       [2009-09-19 Sat]\n   - State \"DONE\"       from \"TODO\"       [2009-09-16 Wed]\n   - State \"DONE\"       from \"TODO\"       [2009-09-12 Sat]\n</pre></div>\n\n<p>What this habit says is: I want to shave at most every 2 days\u2014given\nby the \u2018<samp>SCHEDULED</samp>\u2019 date and repeat interval\u2014and at least every\n4 days.  If today is the 15th, then the habit first appears in the\nagenda (see <a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>) on Oct 17, after the minimum of 2 days has\nelapsed, and will appear overdue on Oct 19, after four days have\nelapsed.\n</p>\n<p>What\u2019s really useful about habits is that they are displayed along\nwith a consistency graph, to show how consistent you\u2019ve been at\ngetting that task done in the past.  This graph shows every day that\nthe task was done over the past three weeks, with colors for each day.\nThe colors used are:\n</p>\n<dl compact=\"compact\">\n<dt>Blue</dt>\n<dd><p>If the task was not to be done yet on that day.\n</p></dd>\n<dt>Green</dt>\n<dd><p>If the task could have been done on that day.\n</p></dd>\n<dt>Yellow</dt>\n<dd><p>If the task was going to be overdue the next day.\n</p></dd>\n<dt>Red</dt>\n<dd><p>If the task was overdue on that day.\n</p></dd>\n</dl>\n\n<p>In addition to coloring each day, the day is also marked with an\nasterisk if the task was actually done that day, and an exclamation\nmark to show where the current day falls in the graph.\n</p>\n<p>There are several configuration variables that can be used to change\nthe way habits are displayed in the agenda.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-habit-graph-column</code></dt>\n<dd><span id=\"index-org_002dhabit_002dgraph_002dcolumn\"></span>\n<p>The buffer column at which the consistency graph should be drawn.\nThis overwrites any text in that column, so it is a good idea to\nkeep your habits\u2019 titles brief and to the point.\n</p>\n</dd>\n<dt><code>org-habit-preceding-days</code></dt>\n<dd><span id=\"index-org_002dhabit_002dpreceding_002ddays\"></span>\n<p>The amount of history, in days before today, to appear in\nconsistency graphs.\n</p>\n</dd>\n<dt><code>org-habit-following-days</code></dt>\n<dd><span id=\"index-org_002dhabit_002dfollowing_002ddays\"></span>\n<p>The number of days after today that appear in consistency graphs.\n</p>\n</dd>\n<dt><code>org-habit-show-habits-only-for-today</code></dt>\n<dd><span id=\"index-org_002dhabit_002dshow_002dhabits_002donly_002dfor_002dtoday\"></span>\n<p>If non-<code>nil</code>, only show habits in today\u2019s agenda view.  The default\nvalue is <code>t</code>.  Pressing <kbd>C-u K</kbd> in the agenda toggles this\nvariable.\n</p></dd>\n</dl>\n\n<p>Lastly, pressing <kbd>K</kbd> in the agenda buffer causes habits to\ntemporarily be disabled and do not appear at all.  Press <kbd>K</kbd>\nagain to bring them back.  They are also subject to tag filtering, if\nyou have habits which should only be done in certain contexts, for\nexample.\n</p>\n"}, {"id": "54Priorities", "content": "\n<span id=\"Priorities\"></span>\n<span id=\"Priorities-1\"></span><h3 class=\"section\">5.4 Priorities</h3>\n\n<span id=\"index-priorities\"></span>\n<span id=\"index-priority-cookie\"></span>\n\n<p>If you use Org mode extensively, you may end up with enough TODO items\nthat it starts to make sense to prioritize them.  Prioritizing can be\ndone by placing a <em>priority cookie</em> into the headline of a TODO item\nright after the TODO keyword, like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** TODO [#A] Write letter to Sam Fortune\n</pre></div>\n\n\n<span id=\"index-org_002dpriority_002dfaces\"></span>\n<p>By default, Org mode supports three priorities: \u2018<samp>A</samp>\u2019, \u2018<samp>B</samp>\u2019, and \u2018<samp>C</samp>\u2019.\n\u2018<samp>A</samp>\u2019 is the highest priority.  An entry without a cookie is treated as\nequivalent if it had priority \u2018<samp>B</samp>\u2019.  Priorities make a difference only\nfor sorting in the agenda (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>).  Outside the\nagenda, they have no inherent meaning to Org mode.  The cookies are\ndisplayed with the face defined by the variable <code>org-priority-faces</code>,\nwhich can be customized.\n</p>\n<p>You can also use numeric values for priorities, such as\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** TODO [#1] Write letter to Sam Fortune\n</pre></div>\n\n\n<p>When using numeric priorities, you need to set <code>org-priority-highest</code>,\n<code>org-priority-lowest</code> and <code>org-priority-default</code> to integers, which\nmust all be strictly inferior to 65.\n</p>\n<p>Priorities can be attached to any outline node; they do not need to be\nTODO items.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c ,</kbd> (<code>org-priority</code>)</dt>\n<dd><span id=\"index-C_002dc-_002c\"></span>\n<span id=\"index-org_002dpriority\"></span>\n<p>Set the priority of the current headline.  The command prompts for\na priority character \u2018<samp>A</samp>\u2019, \u2018<samp>B</samp>\u2019 or \u2018<samp>C</samp>\u2019.  When you press <kbd><span class=\"key\">SPC</span></kbd>\ninstead, the priority cookie, if one is set, is removed from the\nheadline.  The priorities can also be changed \u201cremotely\u201d from the\nagenda buffer with the <kbd>,</kbd> command (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">UP</span></kbd> (<code>org-priority-up</code>)</dt>\n<dt><kbd>S-<span class=\"key\">DOWN</span></kbd> (<code>org-priority-down</code>)</dt>\n<dd><span id=\"index-S_002dUP-3\"></span>\n<span id=\"index-S_002dDOWN-3\"></span>\n<span id=\"index-org_002dpriority_002dup\"></span>\n<span id=\"index-org_002dpriority_002ddown\"></span>\n<span id=\"index-org_002dpriority_002dstart_002dcycle_002dwith_002ddefault\"></span>\n<p>Increase/decrease the priority of the current headline<a id=\"DOCF46\" href=\"https://orgmode.org/org.html#FOOT46\"><sup>46</sup></a>.  Note\nthat these keys are also used to modify timestamps (see <a href=\"https://orgmode.org/org.html#Creating-Timestamps\">Creating Timestamps</a>).  See also <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>, for\na discussion of the interaction with shift-selection.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dpriority_002dhighest\"></span>\n<span id=\"index-org_002dpriority_002dlowest\"></span>\n<span id=\"index-org_002dpriority_002ddefault\"></span>\n<p>You can change the range of allowed priorities by setting the\nvariables <code>org-priority-highest</code>, <code>org-priority-lowest</code>, and\n<code>org-priority-default</code>.  For an individual buffer, you may set these\nvalues (highest, lowest, default) like this (please make sure that the\nhighest priority is earlier in the alphabet than the lowest priority):\n</p>\n<span id=\"index-PRIORITIES_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+PRIORITIES: A C B\n</pre></div>\n\n\n<p>Or, using numeric values:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+PRIORITIES: 1 10 5\n</pre></div>\n\n"}, {"id": "55BreakingDownTasksintoSubtasks", "content": "\n<span id=\"Breaking-Down-Tasks\"></span>\n<span id=\"Breaking-Down-Tasks-into-Subtasks\"></span><h3 class=\"section\">5.5 Breaking Down Tasks into Subtasks</h3>\n\n<span id=\"index-tasks_002c-breaking-down\"></span>\n<span id=\"index-statistics_002c-for-TODO-items\"></span>\n\n<span id=\"index-org_002dagenda_002dtodo_002dlist_002dsublevels\"></span>\n<p>It is often advisable to break down large tasks into smaller,\nmanageable subtasks.  You can do this by creating an outline tree\nbelow a TODO item, with detailed subtasks on the tree<a id=\"DOCF47\" href=\"https://orgmode.org/org.html#FOOT47\"><sup>47</sup></a>.  To keep\nan overview of the fraction of subtasks that have already been marked\nas done, insert either \u2018<samp>[/]</samp>\u2019 or \u2018<samp>[%]</samp>\u2019 anywhere in the headline.  These\ncookies are updated each time the TODO status of a child changes, or\nwhen pressing <kbd>C-c C-c</kbd> on the cookie.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Organize Party [33%]\n** TODO Call people [1/2]\n*** TODO Peter\n*** DONE Sarah\n** TODO Buy food\n** DONE Talk to neighbor\n</pre></div>\n\n<span id=\"index-COOKIE_005fDATA_002c-property\"></span>\n<p>If a heading has both checkboxes and TODO children below it, the\nmeaning of the statistics cookie become ambiguous.  Set the property\n\u2018<samp>COOKIE_DATA</samp>\u2019 to either \u2018<samp>checkbox</samp>\u2019 or \u2018<samp>todo</samp>\u2019 to resolve this issue.\n</p>\n<span id=\"index-org_002dhierarchical_002dtodo_002dstatistics\"></span>\n<p>If you would like to have the statistics cookie count any TODO entries\nin the subtree (not just direct children), configure the variable\n<code>org-hierarchical-todo-statistics</code>.  To do this for a single subtree,\ninclude the word \u2018<samp>recursive</samp>\u2019 into the value of the \u2018<samp>COOKIE_DATA</samp>\u2019\nproperty.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Parent capturing statistics [2/20]\n  :PROPERTIES:\n  :COOKIE_DATA: todo recursive\n  :END:\n</pre></div>\n\n<p>If you would like a TODO entry to automatically change to DONE when\nall children are done, you can use the following setup:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun org-summary-todo (n-done n-not-done)\n  \"Switch entry to DONE when all subentries are done, to TODO otherwise.\"\n  (let (org-log-done org-log-states)   ; turn off logging\n    (org-todo (if (= n-not-done 0) \"DONE\" \"TODO\"))))\n\n(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)\n</pre></div>\n\n<p>Another possibility is the use of checkboxes to identify (a hierarchy\nof) a large number of subtasks (see <a href=\"https://orgmode.org/org.html#Checkboxes\">Checkboxes</a>).\n</p>\n"}, {"id": "56Checkboxes", "content": "\n<span id=\"Checkboxes\"></span>\n<span id=\"Checkboxes-1\"></span><h3 class=\"section\">5.6 Checkboxes</h3>\n\n<span id=\"index-checkboxes\"></span>\n\n<span id=\"index-org_002dlist_002dautomatic_002drules-1\"></span>\n<p>Every item in a plain list<a id=\"DOCF48\" href=\"https://orgmode.org/org.html#FOOT48\"><sup>48</sup></a> (see <a href=\"https://orgmode.org/org.html#Plain-Lists\">Plain Lists</a>) can be made into\na checkbox by starting it with the string \u2018<samp>[ ]</samp>\u2019.  This feature is\nsimilar to TODO items (see <a href=\"https://orgmode.org/org.html#TODO-Items\">TODO Items</a>), but is more lightweight.\nCheckboxes are not included into the global TODO list, so they are\noften great to split a task into a number of simple steps.  Or you can\nuse them in a shopping list.\n</p>\n<p>Here is an example of a checkbox list.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* TODO Organize party [2/4]\n  - [-] call people [1/3]\n    - [ ] Peter\n    - [X] Sarah\n    - [ ] Sam\n  - [X] order food\n  - [ ] think about what music to play\n  - [X] talk to the neighbors\n</pre></div>\n\n<p>Checkboxes work hierarchically, so if a checkbox item has children\nthat are checkboxes, toggling one of the children checkboxes makes the\nparent checkbox reflect if none, some, or all of the children are\nchecked.\n</p>\n<span id=\"index-statistics_002c-for-checkboxes\"></span>\n<span id=\"index-checkbox-statistics\"></span>\n<span id=\"index-COOKIE_005fDATA_002c-property-1\"></span>\n<span id=\"index-org_002dhierarchical_002dcheckbox_002dstatistics\"></span>\n<p>The \u2018<samp>[2/4]</samp>\u2019 and \u2018<samp>[1/3]</samp>\u2019 in the first and second line are cookies\nindicating how many checkboxes present in this entry have been checked\noff, and the total number of checkboxes present.  This can give you an\nidea on how many checkboxes remain, even without opening a folded\nentry.  The cookies can be placed into a headline or into (the first\nline of) a plain list item.  Each cookie covers checkboxes of direct\nchildren structurally below the headline/item on which the cookie\nappears<a id=\"DOCF49\" href=\"https://orgmode.org/org.html#FOOT49\"><sup>49</sup></a>.  You have to insert the cookie yourself by typing\neither \u2018<samp>[/]</samp>\u2019 or \u2018<samp>[%]</samp>\u2019.  With \u2018<samp>[/]</samp>\u2019 you get an \u2018<samp>n out of m</samp>\u2019 result, as\nin the examples above.  With \u2018<samp>[%]</samp>\u2019 you get information about the\npercentage of checkboxes checked (in the above example, this would be\n\u2018<samp>[50%]</samp>\u2019 and \u2018<samp>[33%]</samp>\u2019, respectively).  In a headline, a cookie can count\neither checkboxes below the heading or TODO states of children, and it\ndisplays whatever was changed last.  Set the property \u2018<samp>COOKIE_DATA</samp>\u2019 to\neither \u2018<samp>checkbox</samp>\u2019 or \u2018<samp>todo</samp>\u2019 to resolve this issue.\n</p>\n<span id=\"index-blocking_002c-of-checkboxes\"></span>\n<span id=\"index-checkbox-blocking\"></span>\n<span id=\"index-ORDERED_002c-property-1\"></span>\n<p>If the current outline node has an \u2018<samp>ORDERED</samp>\u2019 property, checkboxes must\nbe checked off in sequence, and an error is thrown if you try to check\noff a box while there are unchecked boxes above it.\n</p>\n<p>The following commands work with checkboxes:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-c</kbd> (<code>org-toggle-checkbox</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-6\"></span>\n<span id=\"index-org_002dtoggle_002dcheckbox\"></span>\n<p>Toggle checkbox status or\u2014with prefix argument\u2014checkbox presence\nat point.  With a single prefix argument, add an empty checkbox or\nremove the current one<a id=\"DOCF50\" href=\"https://orgmode.org/org.html#FOOT50\"><sup>50</sup></a>.  With a double prefix argument, set\nit to \u2018<samp>[-]</samp>\u2019, which is considered to be an intermediate state.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-b</kbd> (<code>org-toggle-checkbox</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002db\"></span>\n<p>Toggle checkbox status or\u2014with prefix argument\u2014checkbox presence\nat point.  With double prefix argument, set it to \u2018<samp>[-]</samp>\u2019, which is\nconsidered to be an intermediate state.\n</p>\n<ul>\n<li> If there is an active region, toggle the first checkbox in the\nregion and set all remaining boxes to the same status as the\nfirst.  With a prefix argument, add or remove the checkbox for all\nitems in the region.\n\n</li><li> If point is in a headline, toggle checkboxes in the region between\nthis headline and the next\u2014so <em>not</em> the entire subtree.\n\n</li><li> If there is no active region, just toggle the checkbox at point.\n</li></ul>\n\n</dd>\n<dt><kbd>C-c C-x C-r</kbd> (<code>org-toggle-radio-button</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dr\"></span>\n<span id=\"index-org_002dtoggle_002dradio_002dbutton\"></span>\n<span id=\"index-radio-button_002c-checkbox-as\"></span>\n<p>Toggle checkbox status by using the checkbox of the item at point as\na radio button: when the checkbox is turned on, all other checkboxes\non the same level will be turned off.  With a universal prefix\nargument, toggle the presence of the checkbox.  With a double prefix\nargument, set it to \u2018<samp>[-]</samp>\u2019.\n</p>\n<span id=\"index-org_002dlist_002dcheckbox_002dradio_002dmode\"></span>\n<p><kbd>C-c C-c</kbd> can be told to consider checkboxes as radio buttons by\nsetting \u2018<samp>#+ATTR_ORG: :radio t</samp>\u2019 right before the list or by calling\n<kbd>M-x org-list-checkbox-radio-mode</kbd> to activate this minor mode.\n</p>\n</dd>\n<dt><kbd>M-S-<span class=\"key\">RET</span></kbd> (<code>org-insert-todo-heading</code>)</dt>\n<dd><span id=\"index-M_002dS_002dRET-2\"></span>\n<span id=\"index-org_002dinsert_002dtodo_002dheading-2\"></span>\n<p>Insert a new item with a checkbox.  This works only if point is\nalready in a plain list item (see <a href=\"https://orgmode.org/org.html#Plain-Lists\">Plain Lists</a>).\n</p>\n</dd>\n<dt><kbd>C-c C-x o</kbd> (<code>org-toggle-ordered-property</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-o-1\"></span>\n<span id=\"index-org_002dtoggle_002dordered_002dproperty-1\"></span>\n<span id=\"index-org_002dtrack_002dordered_002dproperty_002dwith_002dtag-1\"></span>\n<p>Toggle the \u2018<samp>ORDERED</samp>\u2019 property of the entry, to toggle if checkboxes\nmust be checked off in sequence.  A property is used for this\nbehavior because this should be local to the current entry, not\ninherited like a tag.  However, if you would like to <em>track</em> the\nvalue of this property with a tag for better visibility, customize\n<code>org-track-ordered-property-with-tag</code>.\n</p>\n</dd>\n<dt><kbd>C-c #</kbd> (<code>org-update-statistics-cookies</code>)</dt>\n<dd><span id=\"index-C_002dc-_0023\"></span>\n<span id=\"index-org_002dupdate_002dstatistics_002dcookies\"></span>\n<p>Update the statistics cookie in the current outline entry.  When\ncalled with a <kbd>C-u</kbd> prefix, update the entire file.\nCheckbox statistic cookies are updated automatically if you toggle\ncheckboxes with <kbd>C-c C-c</kbd> and make new ones with\n<kbd>M-S-<span class=\"key\">RET</span></kbd>.  TODO statistics cookies update when changing\nTODO states.  If you delete boxes/entries or add/change them by\nhand, use this command to get things back into sync.\n</p></dd>\n</dl>\n\n"}, {"id": "6Tags", "content": "\n<span id=\"Tags\"></span>\n<span id=\"Tags-1\"></span><h2 class=\"chapter\">6 Tags</h2>\n\n<span id=\"index-tags\"></span>\n<span id=\"index-headline-tagging\"></span>\n<span id=\"index-matching_002c-tags\"></span>\n<span id=\"index-sparse-tree_002c-tag-based\"></span>\n\n<p>An excellent way to implement labels and contexts for\ncross-correlating information is to assign <em>tags</em> to headlines.  Org\nmode has extensive support for tags.\n</p>\n<span id=\"index-org_002dtag_002dfaces\"></span>\n<p>Every headline can contain a list of tags; they occur at the end of\nthe headline.  Tags are normal words containing letters, numbers, \u2018<samp>_</samp>\u2019,\nand \u2018<samp>@</samp>\u2019.  Tags must be preceded and followed by a single colon, e.g.,\n\u2018<samp>:work:</samp>\u2019.  Several tags can be specified, as in \u2018<samp>:work:urgent:</samp>\u2019.  Tags\nby default are in bold face with the same color as the headline.  You\nmay specify special faces for specific tags using the variable\n<code>org-tag-faces</code>, in much the same way as you can for TODO keywords\n(see <a href=\"https://orgmode.org/org.html#Faces-for-TODO-keywords\">Faces for TODO keywords</a>).\n</p>\n\n\n"}, {"id": "61TagInheritance", "content": "\n<span id=\"Tag-Inheritance\"></span>\n<span id=\"Tag-Inheritance-1\"></span><h3 class=\"section\">6.1 Tag Inheritance</h3>\n\n<span id=\"index-tag-inheritance\"></span>\n<span id=\"index-inheritance_002c-of-tags\"></span>\n<span id=\"index-sublevels_002c-inclusion-into-tags-match\"></span>\n\n<p><em>Tags</em> make use of the hierarchical structure of outline trees.  If\na heading has a certain tag, all subheadings inherit the tag as well.\nFor example, in the list\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Meeting with the French group      :work:\n** Summary by Frank                  :boss:notes:\n*** TODO Prepare slides for him      :action:\n</pre></div>\n\n<p>the final heading has the tags \u2018<samp>work</samp>\u2019, \u2018<samp>boss</samp>\u2019, \u2018<samp>notes</samp>\u2019, and \u2018<samp>action</samp>\u2019\neven though the final heading is not explicitly marked with those\ntags.  You can also set tags that all entries in a file should inherit\njust as if these tags were defined in a hypothetical level zero that\nsurrounds the entire file.  Use a line like this<a id=\"DOCF51\" href=\"https://orgmode.org/org.html#FOOT51\"><sup>51</sup></a>\n</p>\n<span id=\"index-FILETAGS_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+FILETAGS: :Peter:Boss:Secret:\n</pre></div>\n\n\n<span id=\"index-org_002duse_002dtag_002dinheritance\"></span>\n<span id=\"index-org_002dtags_002dexclude_002dfrom_002dinheritance\"></span>\n<p>To limit tag inheritance to specific tags, or to turn it off entirely,\nuse the variables <code>org-use-tag-inheritance</code> and\n<code>org-tags-exclude-from-inheritance</code>.\n</p>\n<span id=\"index-org_002dtags_002dmatch_002dlist_002dsublevels\"></span>\n<p>When a headline matches during a tags search while tag inheritance is\nturned on, all the sublevels in the same tree\u2014for a simple match\nform\u2014match as well<a id=\"DOCF52\" href=\"https://orgmode.org/org.html#FOOT52\"><sup>52</sup></a>.  The list of matches may then become\nvery long.  If you only want to see the first tags match in a subtree,\nconfigure the variable <code>org-tags-match-list-sublevels</code> (not\nrecommended).\n</p>\n<span id=\"index-org_002dagenda_002duse_002dtag_002dinheritance\"></span>\n<p>Tag inheritance is relevant when the agenda search tries to match\na tag, either in the <code>tags</code> or <code>tags-todo</code> agenda types.  In other\nagenda types, <code>org-use-tag-inheritance</code> has no effect.  Still, you may\nwant to have your tags correctly set in the agenda, so that tag\nfiltering works fine, with inherited tags.  Set\n<code>org-agenda-use-tag-inheritance</code> to control this: the default value\nincludes all agenda types, but setting this to <code>nil</code> can really speed\nup agenda generation.\n</p>\n"}, {"id": "62SettingTags", "content": "\n<span id=\"Setting-Tags\"></span>\n<span id=\"Setting-Tags-1\"></span><h3 class=\"section\">6.2 Setting Tags</h3>\n\n<span id=\"index-setting-tags\"></span>\n<span id=\"index-tags_002c-setting\"></span>\n\n<span id=\"index-M_002dTAB-2\"></span>\n<p>Tags can simply be typed into the buffer at the end of a headline.\nAfter a colon, <kbd>M-<span class=\"key\">TAB</span></kbd> offers completion on tags.  There is\nalso a special command for inserting tags:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-q</kbd> (<code>org-set-tags-command</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dq-1\"></span>\n<span id=\"index-org_002dset_002dtags_002dcommand\"></span>\n<span id=\"index-completion_002c-of-tags\"></span>\n<span id=\"index-org_002dtags_002dcolumn\"></span>\n<p>Enter new tags for the current headline.  Org mode either offers\ncompletion or a special single-key interface for setting tags, see\nbelow.  After pressing <kbd><span class=\"key\">RET</span></kbd>, the tags are inserted and\naligned to <code>org-tags-column</code>.  When called with a <kbd>C-u</kbd>\nprefix, all tags in the current buffer are aligned to that column,\njust to make things look nice.  Tags are automatically realigned\nafter promotion, demotion, and TODO state changes (see <a href=\"https://orgmode.org/org.html#TODO-Basics\">TODO Basics</a>).\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> (<code>org-set-tags-command</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-7\"></span>\n<p>When point is in a headline, this does the same as <kbd>C-c C-q</kbd>.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dcomplete_002dtags_002dalways_002doffer_002dall_002dagenda_002dtags\"></span>\n<span id=\"index-org_002dtag_002dalist\"></span>\n<span id=\"index-TAGS_002c-keyword\"></span>\n<p>Org supports tag insertion based on a <em>list of tags</em>.  By default this\nlist is constructed dynamically, containing all tags currently used in\nthe buffer<a id=\"DOCF53\" href=\"https://orgmode.org/org.html#FOOT53\"><sup>53</sup></a>.  You may also globally specify a hard list of tags\nwith the variable <code>org-tag-alist</code>.  Finally you can set the default\ntags for a given file using the \u2018<samp>TAGS</samp>\u2019 keyword, like\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: @work @home @tennisclub\n#+TAGS: laptop car pc sailboat\n</pre></div>\n\n<p>If you have globally defined your preferred set of tags using the\nvariable <code>org-tag-alist</code>, but would like to use a dynamic tag list in\na specific file, add an empty \u2018<samp>TAGS</samp>\u2019 keyword to that file:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS:\n</pre></div>\n\n\n<span id=\"index-org_002dtag_002dpersistent_002dalist\"></span>\n<p>If you have a preferred set of tags that you would like to use in\nevery file, in addition to those defined on a per-file basis by \u2018<samp>TAGS</samp>\u2019\nkeyword, then you may specify a list of tags with the variable\n<code>org-tag-persistent-alist</code>.  You may turn this off on a per-file basis\nby adding a \u2018<samp>STARTUP</samp>\u2019 keyword to that file:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: noptag\n</pre></div>\n\n\n<p>By default Org mode uses the standard minibuffer completion facilities\nfor entering tags.  However, it also implements another, quicker, tag\nselection method called <em>fast tag selection</em>.  This allows you to\nselect and deselect tags with just a single key press.  For this to\nwork well you should assign unique letters to most of your commonly\nused tags.  You can do this globally by configuring the variable\n<code>org-tag-alist</code> in your Emacs init file.  For example, you may find\nthe need to tag many items in different files with \u2018<samp>@home</samp>\u2019.  In this\ncase you can set something like:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-tag-alist '((\"@work\" . ?w) (\"@home\" . ?h) (\"laptop\" . ?l)))\n</pre></div>\n\n<p>If the tag is only relevant to the file you are working on, then you\ncan instead set the \u2018<samp>TAGS</samp>\u2019 keyword as:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)\n</pre></div>\n\n\n<p>The tags interface shows the available tags in a splash window.  If\nyou want to start a new line after a specific tag, insert \u2018<samp>\\n</samp>\u2019 into\nthe tag list\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: @work(w) @home(h) @tennisclub(t) \\n laptop(l) pc(p)\n</pre></div>\n\n\n<p>or write them in two lines:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: @work(w)  @home(h)  @tennisclub(t)\n#+TAGS: laptop(l)  pc(p)\n</pre></div>\n\n<p>You can also group together tags that are mutually exclusive by using\nbraces, as in:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)\n</pre></div>\n\n\n<p>you indicate that at most one of \u2018<samp>@work</samp>\u2019, \u2018<samp>@home</samp>\u2019, and \u2018<samp>@tennisclub</samp>\u2019\nshould be selected.  Multiple such groups are allowed.\n</p>\n<p>Do not forget to press <kbd>C-c C-c</kbd> with point in one of these\nlines to activate any changes.\n</p>\n<p>To set these mutually exclusive groups in the variable\n<code>org-tags-alist</code>, you must use the dummy tags <code>:startgroup</code> and\n<code>:endgroup</code> instead of the braces.  Similarly, you can use <code>:newline</code>\nto indicate a line break.  The previous example would be set globally\nby the following configuration:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-tag-alist '((:startgroup . nil)\n                      (\"@work\" . ?w) (\"@home\" . ?h)\n                      (\"@tennisclub\" . ?t)\n                      (:endgroup . nil)\n                      (\"laptop\" . ?l) (\"pc\" . ?p)))\n</pre></div>\n\n<p>If at least one tag has a selection key then pressing <kbd>C-c C-c</kbd> automatically presents you with a special interface, listing\ninherited tags, the tags of the current headline, and a list of all\nvalid tags with corresponding keys<a id=\"DOCF54\" href=\"https://orgmode.org/org.html#FOOT54\"><sup>54</sup></a>.\n</p>\n<p>Pressing keys assigned to tags adds or removes them from the list of\ntags in the current line.  Selecting a tag in a group of mutually\nexclusive tags turns off any other tag from that group.\n</p>\n<p>In this interface, you can also use the following special keys:\n</p>\n<dl compact=\"compact\">\n<dt><kbd><span class=\"key\">TAB</span></kbd></dt>\n<dd><span id=\"index-TAB-5\"></span>\n<p>Enter a tag in the minibuffer, even if the tag is not in the\npredefined list.  You can complete on all tags present in the buffer\nand globally pre-defined tags from <code>org-tag-alist</code> and\n<code>org-tag-persistent-alist</code>.  You can also add several tags: just\nseparate them with a comma.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">SPC</span></kbd></dt>\n<dd><span id=\"index-SPC\"></span>\n<p>Clear all tags for this line.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">RET</span></kbd></dt>\n<dd><span id=\"index-RET-2\"></span>\n<p>Accept the modified set.\n</p>\n</dd>\n<dt><kbd>C-g</kbd></dt>\n<dd><span id=\"index-C_002dg\"></span>\n<p>Abort without installing changes.\n</p>\n</dd>\n<dt><kbd>q</kbd></dt>\n<dd><span id=\"index-q\"></span>\n<p>If <kbd>q</kbd> is not assigned to a tag, it aborts like\n<kbd>C-g</kbd>.\n</p>\n</dd>\n<dt><kbd>!</kbd></dt>\n<dd><span id=\"index-_0021\"></span>\n<p>Turn off groups of mutually exclusive tags.  Use this to (as an\nexception) assign several tags from such a group.\n</p>\n</dd>\n<dt><kbd>C-c</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002dc-8\"></span>\n<p>Toggle auto-exit after the next change (see below).  If you are\nusing expert mode, the first <kbd>C-c</kbd> displays the selection\nwindow.\n</p></dd>\n</dl>\n\n<p>This method lets you assign tags to a headline with very few keys.\nWith the above setup, you could clear the current tags and set\n\u2018<samp>@home</samp>\u2019, \u2018<samp>laptop</samp>\u2019 and \u2018<samp>pc</samp>\u2019 tags with just the following keys:\n<kbd>C-c C-c <span class=\"key\">SPC</span> h l p <span class=\"key\">RET</span></kbd>.  Switching from \u2018<samp>@home</samp>\u2019 to \u2018<samp>@work</samp>\u2019\nwould be done with <kbd>C-c C-c w <span class=\"key\">RET</span></kbd> or alternatively with\n<kbd>C-c C-c C-c w</kbd>.  Adding the non-predefined tag \u2018<samp>sarah</samp>\u2019 could\nbe done with <kbd>C-c C-c <span class=\"key\">TAB</span> s a r a h <span class=\"key\">RET</span></kbd>.\n</p>\n<span id=\"index-org_002dfast_002dtag_002dselection_002dsingle_002dkey\"></span>\n<p>If you find that most of the time you need only a single key press to\nmodify your list of tags, set the variable\n<code>org-fast-tag-selection-single-key</code>.  Then you no longer have to press\n<kbd><span class=\"key\">RET</span></kbd> to exit fast tag selection\u2014it exits after the first\nchange.  If you then occasionally need more keys, press <kbd>C-c</kbd>\nto turn off auto-exit for the current tag selection process (in\neffect: start selection with <kbd>C-c C-c C-c</kbd> instead of\n<kbd>C-c C-c</kbd>).  If you set the variable to the value <code>expert</code>,\nthe special window is not even shown for single-key tag selection, it\ncomes up only when you press an extra <kbd>C-c</kbd>.\n</p>\n"}, {"id": "63TagHierarchy", "content": "\n<span id=\"Tag-Hierarchy\"></span>\n<span id=\"Tag-Hierarchy-1\"></span><h3 class=\"section\">6.3 Tag Hierarchy</h3>\n\n<span id=\"index-group-tags\"></span>\n<span id=\"index-tags_002c-groups\"></span>\n<span id=\"index-tags-hierarchy\"></span>\n\n<p>Tags can be defined in hierarchies.  A tag can be defined as a <em>group\ntag</em> for a set of other tags.  The group tag can be seen as the\n\u201cbroader term\u201d for its set of tags.  Defining multiple group tags and\nnesting them creates a tag hierarchy.\n</p>\n<p>One use-case is to create a taxonomy of terms (tags) that can be used\nto classify nodes in a document or set of documents.\n</p>\n<p>When you search for a group tag, it return matches for all members in\nthe group and its subgroups.  In an agenda view, filtering by a group\ntag displays or hide headlines tagged with at least one of the members\nof the group or any of its subgroups.  This makes tag searches and\nfilters even more flexible.\n</p>\n<p>You can set group tags by using brackets and inserting a colon between\nthe group tag and its related tags\u2014beware that all whitespaces are\nmandatory so that Org can parse this line correctly:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: [ GTD : Control Persp ]\n</pre></div>\n\n\n<p>In this example, \u2018<samp>GTD</samp>\u2019 is the group tag and it is related to two other\ntags: \u2018<samp>Control</samp>\u2019, \u2018<samp>Persp</samp>\u2019.  Defining \u2018<samp>Control</samp>\u2019 and \u2018<samp>Persp</samp>\u2019 as group\ntags creates a hierarchy of tags:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: [ Control : Context Task ]\n#+TAGS: [ Persp : Vision Goal AOF Project ]\n</pre></div>\n\n<p>That can conceptually be seen as a hierarchy of tags:\n</p>\n<ul>\n<li> \u2018<samp>GTD</samp>\u2019\n<ul>\n<li> \u2018<samp>Persp</samp>\u2019\n<ul>\n<li> \u2018<samp>Vision</samp>\u2019\n</li><li> \u2018<samp>Goal</samp>\u2019\n</li><li> \u2018<samp>AOF</samp>\u2019\n</li><li> \u2018<samp>Project</samp>\u2019\n</li></ul>\n</li><li> \u2018<samp>Control</samp>\u2019\n<ul>\n<li> \u2018<samp>Context</samp>\u2019\n</li><li> \u2018<samp>Task</samp>\u2019\n</li></ul>\n</li></ul>\n</li></ul>\n\n<p>You can use the <code>:startgrouptag</code>, <code>:grouptags</code> and <code>:endgrouptag</code>\nkeyword directly when setting <code>org-tag-alist</code> directly:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-tag-alist '((:startgrouptag)\n                      (\"GTD\")\n                      (:grouptags)\n                      (\"Control\")\n                      (\"Persp\")\n                      (:endgrouptag)\n                      (:startgrouptag)\n                      (\"Control\")\n                      (:grouptags)\n                      (\"Context\")\n                      (\"Task\")\n                      (:endgrouptag)))\n</pre></div>\n\n<p>The tags in a group can be mutually exclusive if using the same group\nsyntax as is used for grouping mutually exclusive tags together; using\ncurly brackets.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: { Context : @Home @Work @Call }\n</pre></div>\n\n\n<p>When setting <code>org-tag-alist</code> you can use <code>:startgroup</code> and <code>:endgroup</code>\ninstead of <code>:startgrouptag</code> and <code>:endgrouptag</code> to make the tags\nmutually exclusive.\n</p>\n<p>Furthermore, the members of a group tag can also be regular\nexpressions, creating the possibility of a more dynamic and rule-based\ntag structure (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>).  The regular expressions in\nthe group must be specified within curly brackets.  Here is an\nexpanded example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TAGS: [ Vision : {V@.+} ]\n#+TAGS: [ Goal : {G@.+} ]\n#+TAGS: [ AOF : {AOF@.+} ]\n#+TAGS: [ Project : {P@.+} ]\n</pre></div>\n\n<p>Searching for the tag \u2018<samp>Project</samp>\u2019 now lists all tags also including\nregular expression matches for \u2018<samp>P@.+</samp>\u2019, and similarly for tag searches\non \u2018<samp>Vision</samp>\u2019, \u2018<samp>Goal</samp>\u2019 and \u2018<samp>AOF</samp>\u2019.  For example, this would work well for\na project tagged with a common project-identifier, e.g.,\n\u2018<samp>P@2014_OrgTags</samp>\u2019.\n</p>\n<span id=\"index-C_002dc-C_002dx-q\"></span>\n<span id=\"index-org_002dtoggle_002dtags_002dgroups\"></span>\n<span id=\"index-org_002dgroup_002dtags\"></span>\n<p>If you want to ignore group tags temporarily, toggle group tags\nsupport with <code>org-toggle-tags-groups</code>, bound to <kbd>C-c C-x q</kbd>.\nIf you want to disable tag groups completely, set <code>org-group-tags</code> to\n<code>nil</code>.\n</p>\n"}, {"id": "64TagSearches", "content": "\n<span id=\"Tag-Searches\"></span>\n<span id=\"Tag-Searches-1\"></span><h3 class=\"section\">6.4 Tag Searches</h3>\n\n<span id=\"index-tag-searches\"></span>\n<span id=\"index-searching-for-tags\"></span>\n\n<p>Once a system of tags has been set up, it can be used to collect\nrelated information into special lists.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c / m</kbd> or <kbd>C-c \\</kbd> (<code>org-match-sparse-tree</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-m\"></span>\n<span id=\"index-C_002dc-_005c\"></span>\n<span id=\"index-org_002dmatch_002dsparse_002dtree\"></span>\n<p>Create a sparse tree with all headlines matching a tags search.\nWith a <kbd>C-u</kbd> prefix argument, ignore headlines that are not\na TODO line.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda m</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-m-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dtags_002dview\"></span>\n<p>Create a global list of tag matches from all agenda files.  See\n<a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a>.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda M</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-M-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dtags_002dmatch_002dlist_002dsublevels-1\"></span>\n<p>Create a global list of tag matches from all agenda files, but check\nonly TODO items and force checking subitems (see the option\n<code>org-tags-match-list-sublevels</code>).\n</p></dd>\n</dl>\n\n<p>These commands all prompt for a match string which allows basic\nBoolean logic like \u2018<samp>+boss+urgent-project1</samp>\u2019, to find entries with tags\n\u2018<samp>boss</samp>\u2019 and \u2018<samp>urgent</samp>\u2019, but not \u2018<samp>project1</samp>\u2019, or \u2018<samp>Kathy|Sally</samp>\u2019 to find\nentries which are tagged, like \u2018<samp>Kathy</samp>\u2019 or \u2018<samp>Sally</samp>\u2019.  The full syntax of\nthe search string is rich and allows also matching against TODO\nkeywords, entry levels and properties.  For a complete description\nwith many examples, see <a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a>.\n</p>\n"}, {"id": "7PropertiesandColumns", "content": "\n<span id=\"Properties-and-Columns\"></span>\n<span id=\"Properties-and-Columns-1\"></span><h2 class=\"chapter\">7 Properties and Columns</h2>\n\n<span id=\"index-properties\"></span>\n\n<p>A property is a key-value pair associated with an entry.  Properties\ncan be set so they are associated with a single entry, with every\nentry in a tree, or with the whole buffer.\n</p>\n<p>There are two main applications for properties in Org mode.  First,\nproperties are like tags, but with a value.  Imagine maintaining\na file where you document bugs and plan releases for a piece of\nsoftware.  Instead of using tags like \u2018<samp>release_1</samp>\u2019, \u2018<samp>release_2</samp>\u2019, you\ncan use a property, say \u2018<samp>Release</samp>\u2019, that in different subtrees has\ndifferent values, such as \u2018<samp>1.0</samp>\u2019 or \u2018<samp>2.0</samp>\u2019.  Second, you can use\nproperties to implement (very basic) database capabilities in an Org\nbuffer.  Imagine keeping track of your music CDs, where properties\ncould be things such as the album, artist, date of release, number of\ntracks, and so on.\n</p>\n<p>Properties can be conveniently edited and viewed in column view (see\n<a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>).\n</p>\n\n\n"}, {"id": "71PropertySyntax", "content": "\n<span id=\"Property-Syntax\"></span>\n<span id=\"Property-Syntax-1\"></span><h3 class=\"section\">7.1 Property Syntax</h3>\n\n<span id=\"index-property-syntax\"></span>\n<span id=\"index-drawer_002c-for-properties\"></span>\n\n<p>Properties are key\u2013value pairs.  When they are associated with\na single entry or with a tree they need to be inserted into a special\ndrawer (see <a href=\"https://orgmode.org/org.html#Drawers\">Drawers</a>) with the name \u2018<samp>PROPERTIES</samp>\u2019, which has to be\nlocated right below a headline, and its planning line (see <a href=\"https://orgmode.org/org.html#Deadlines-and-Scheduling\">Deadlines and Scheduling</a>) when applicable.  Each property is specified on\na single line, with the key\u2014surrounded by colons\u2014first, and the\nvalue after it.  Keys are case-insensitive.  Here is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* CD collection\n** Classic\n*** Goldberg Variations\n    :PROPERTIES:\n    :Title:     Goldberg Variations\n    :Composer:  J.S. Bach\n    :Artist:    Glenn Gould\n    :Publisher: Deutsche Grammophon\n    :NDisks:    1\n    :END:\n</pre></div>\n\n<p>Depending on the value of <code>org-use-property-inheritance</code>, a property\nset this way is associated either with a single entry, or with the\nsub-tree defined by the entry, see <a href=\"https://orgmode.org/org.html#Property-Inheritance\">Property Inheritance</a>.\n</p>\n<p>You may define the allowed values for a particular property \u2018<samp>Xyz</samp>\u2019 by\nsetting a property \u2018<samp>Xyz_ALL</samp>\u2019.  This special property is <em>inherited</em>,\nso if you set it in a level 1 entry, it applies to the entire tree.\nWhen allowed values are defined, setting the corresponding property\nbecomes easier and is less prone to typing errors.  For the example\nwith the CD collection, we can pre-define publishers and the number of\ndisks in a box like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* CD collection\n  :PROPERTIES:\n  :NDisks_ALL:  1 2 3 4\n  :Publisher_ALL: \"Deutsche Grammophon\" Philips EMI\n  :END:\n</pre></div>\n\n<p>Properties can be inserted on buffer level.  That means they apply\nbefore the first headline and can be inherited by all entries in a\nfile.  Property blocks defined before first headline needs to be\nlocated at the top of the buffer, allowing only comments above.\n</p>\n<p>Properties can also be defined using lines like:\n</p>\n<span id=\"index-_005fALL-suffix_002c-in-properties\"></span>\n<span id=\"index-PROPERTY_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+PROPERTY: NDisks_ALL 1 2 3 4\n</pre></div>\n\n\n<span id=\"index-_002b-suffix_002c-in-properties\"></span>\n<p>If you want to add to the value of an existing property, append a \u2018<samp>+</samp>\u2019\nto the property name.  The following results in the property \u2018<samp>var</samp>\u2019\nhaving the value \u2018<samp>foo=1 bar=2</samp>\u2019.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+PROPERTY: var  foo=1\n#+PROPERTY: var+ bar=2\n</pre></div>\n\n<p>It is also possible to add to the values of inherited properties.  The\nfollowing results in the \u2018<samp>Genres</samp>\u2019 property having the value \u2018<samp>Classic\nBaroque</samp>\u2019 under the \u2018<samp>Goldberg Variations</samp>\u2019 subtree.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* CD collection\n** Classic\n    :PROPERTIES:\n    :Genres: Classic\n    :END:\n*** Goldberg Variations\n    :PROPERTIES:\n    :Title:     Goldberg Variations\n    :Composer:  J.S. Bach\n    :Artist:    Glenn Gould\n    :Publisher: Deutsche Grammophon\n    :NDisks:    1\n    :Genres+:   Baroque\n    :END:\n</pre></div>\n\n<p>Note that a property can only have one entry per drawer.\n</p>\n<span id=\"index-org_002dglobal_002dproperties\"></span>\n<p>Property values set with the global variable <code>org-global-properties</code>\ncan be inherited by all entries in all Org files.\n</p>\n<p>The following commands help to work with properties:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-<span class=\"key\">TAB</span></kbd> (<code>pcomplete</code>)</dt>\n<dd><span id=\"index-M_002dTAB-3\"></span>\n<span id=\"index-pcomplete\"></span>\n<p>After an initial colon in a line, complete property keys.  All keys\nused in the current file are offered as possible completions.\n</p>\n</dd>\n<dt><kbd>C-c C-x p</kbd> (<code>org-set-property</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-p\"></span>\n<span id=\"index-org_002dset_002dproperty\"></span>\n<p>Set a property.  This prompts for a property name and a value.  If\nnecessary, the property drawer is created as well.\n</p>\n</dd>\n<dt><kbd>C-u M-x org-insert-drawer</kbd></dt>\n<dd><span id=\"index-org_002dinsert_002ddrawer-1\"></span>\n<p>Insert a property drawer into the current entry.  The drawer is\ninserted early in the entry, but after the lines with planning\ninformation like deadlines.  If before first headline the drawer is\ninserted at the top of the drawer after any potential comments.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> (<code>org-property-action</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-9\"></span>\n<span id=\"index-org_002dproperty_002daction\"></span>\n<p>With point in a property drawer, this executes property commands.\n</p>\n</dd>\n<dt><kbd>C-c C-c s</kbd> (<code>org-set-property</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-s\"></span>\n<span id=\"index-org_002dset_002dproperty-1\"></span>\n<p>Set a property in the current entry.  Both the property and the\nvalue can be inserted using completion.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-property-next-allowed-values</code>)</dt>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd> (<code>org-property-previous-allowed-value</code>)</dt>\n<dd><span id=\"index-S_002dRIGHT-5\"></span>\n<span id=\"index-S_002dLEFT-5\"></span>\n<p>Switch property at point to the next/previous allowed value.\n</p>\n</dd>\n<dt><kbd>C-c C-c d</kbd> (<code>org-delete-property</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-d\"></span>\n<span id=\"index-org_002ddelete_002dproperty\"></span>\n<p>Remove a property from the current entry.\n</p>\n</dd>\n<dt><kbd>C-c C-c D</kbd> (<code>org-delete-property-globally</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-D\"></span>\n<span id=\"index-org_002ddelete_002dproperty_002dglobally\"></span>\n<p>Globally remove a property, from all entries in the current file.\n</p>\n</dd>\n<dt><kbd>C-c C-c c</kbd> (<code>org-compute-property-at-point</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-c\"></span>\n<span id=\"index-org_002dcompute_002dproperty_002dat_002dpoint\"></span>\n<p>Compute the property at point, using the operator and scope from the\nnearest column format definition.\n</p></dd>\n</dl>\n\n"}, {"id": "72SpecialProperties", "content": "\n<span id=\"Special-Properties\"></span>\n<span id=\"Special-Properties-1\"></span><h3 class=\"section\">7.2 Special Properties</h3>\n\n<span id=\"index-properties_002c-special\"></span>\n\n<p>Special properties provide an alternative access method to Org mode\nfeatures, like the TODO state or the priority of an entry, discussed\nin the previous chapters.  This interface exists so that you can\ninclude these states in a column view (see <a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>), or to use\nthem in queries.  The following property names are special and should\nnot be used as keys in the properties drawer:\n</p>\n<span id=\"index-ALLTAGS_002c-special-property\"></span>\n<span id=\"index-BLOCKED_002c-special-property\"></span>\n<span id=\"index-CLOCKSUM_002c-special-property\"></span>\n<span id=\"index-CLOCKSUM_005fT_002c-special-property\"></span>\n<span id=\"index-CLOSED_002c-special-property\"></span>\n<span id=\"index-DEADLINE_002c-special-property\"></span>\n<span id=\"index-FILE_002c-special-property\"></span>\n<span id=\"index-ITEM_002c-special-property\"></span>\n<span id=\"index-PRIORITY_002c-special-property\"></span>\n<span id=\"index-SCHEDULED_002c-special-property\"></span>\n<span id=\"index-TAGS_002c-special-property\"></span>\n<span id=\"index-TIMESTAMP_002c-special-property\"></span>\n<span id=\"index-TIMESTAMP_005fIA_002c-special-property\"></span>\n<span id=\"index-TODO_002c-special-property\"></span>\n<table>\n<tbody><tr><td>\u2018<samp>ALLTAGS</samp>\u2019</td><td>All tags, including inherited ones.</td></tr>\n<tr><td>\u2018<samp>BLOCKED</samp>\u2019</td><td><code>t</code> if task is currently blocked by children or siblings.</td></tr>\n<tr><td>\u2018<samp>CATEGORY</samp>\u2019</td><td>The category of an entry.</td></tr>\n<tr><td>\u2018<samp>CLOCKSUM</samp>\u2019</td><td>The sum of CLOCK intervals in the subtree.  <code>org-clock-sum</code></td></tr>\n<tr><td></td><td>must be run first to compute the values in the current buffer.</td></tr>\n<tr><td>\u2018<samp>CLOCKSUM_T</samp>\u2019</td><td>The sum of CLOCK intervals in the subtree for today.</td></tr>\n<tr><td></td><td><code>org-clock-sum-today</code> must be run first to compute the</td></tr>\n<tr><td></td><td>values in the current buffer.</td></tr>\n<tr><td>\u2018<samp>CLOSED</samp>\u2019</td><td>When was this entry closed?</td></tr>\n<tr><td>\u2018<samp>DEADLINE</samp>\u2019</td><td>The deadline timestamp.</td></tr>\n<tr><td>\u2018<samp>FILE</samp>\u2019</td><td>The filename the entry is located in.</td></tr>\n<tr><td>\u2018<samp>ITEM</samp>\u2019</td><td>The headline of the entry.</td></tr>\n<tr><td>\u2018<samp>PRIORITY</samp>\u2019</td><td>The priority of the entry, a string with a single letter.</td></tr>\n<tr><td>\u2018<samp>SCHEDULED</samp>\u2019</td><td>The scheduling timestamp.</td></tr>\n<tr><td>\u2018<samp>TAGS</samp>\u2019</td><td>The tags defined directly in the headline.</td></tr>\n<tr><td>\u2018<samp>TIMESTAMP</samp>\u2019</td><td>The first keyword-less timestamp in the entry.</td></tr>\n<tr><td>\u2018<samp>TIMESTAMP_IA</samp>\u2019</td><td>The first inactive timestamp in the entry.</td></tr>\n<tr><td>\u2018<samp>TODO</samp>\u2019</td><td>The TODO keyword of the entry.</td></tr>\n</tbody></table>\n\n"}, {"id": "73PropertySearches", "content": "\n<span id=\"Property-Searches\"></span>\n<span id=\"Property-Searches-1\"></span><h3 class=\"section\">7.3 Property Searches</h3>\n\n<span id=\"index-properties_002c-searching\"></span>\n<span id=\"index-searching_002c-of-properties\"></span>\n\n<p>To create sparse trees and special lists with selection based on\nproperties, the same commands are used as for tag searches (see <a href=\"https://orgmode.org/org.html#Tag-Searches\">Tag Searches</a>).\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c / m</kbd> or <kbd>C-c \\</kbd> (<code>org-match-sparse-tree</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-m-1\"></span>\n<span id=\"index-C_002dc-_005c-1\"></span>\n<span id=\"index-org_002dmatch_002dsparse_002dtree-1\"></span>\n<p>Create a sparse tree with all matching entries.  With\na <kbd>C-u</kbd> prefix argument, ignore headlines that are not\na TODO line.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda m</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-m-_0028Agenda-dispatcher_0029-1\"></span>\n<span id=\"index-org_002dtags_002dview-1\"></span>\n<p>Create a global list of tag/property matches from all agenda files.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda M</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-M-_0028Agenda-dispatcher_0029-1\"></span>\n<span id=\"index-org_002dtags_002dmatch_002dlist_002dsublevels-2\"></span>\n<p>Create a global list of tag matches from all agenda files, but check\nonly TODO items and force checking of subitems (see the option\n<code>org-tags-match-list-sublevels</code>).\n</p></dd>\n</dl>\n\n<p>The syntax for the search string is described in <a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a>.\n</p>\n<p>There is also a special command for creating sparse trees based on a\nsingle property:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c / p</kbd></dt>\n<dd><span id=\"index-C_002dc-_002f-p\"></span>\n<p>Create a sparse tree based on the value of a property.  This first\nprompts for the name of a property, and then for a value.  A sparse\ntree is created with all entries that define this property with the\ngiven value.  If you enclose the value in curly braces, it is\ninterpreted as a regular expression and matched against the property\nvalues (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>).\n</p></dd>\n</dl>\n\n"}, {"id": "74PropertyInheritance", "content": "\n<span id=\"Property-Inheritance\"></span>\n<span id=\"Property-Inheritance-1\"></span><h3 class=\"section\">7.4 Property Inheritance</h3>\n\n<span id=\"index-properties_002c-inheritance\"></span>\n<span id=\"index-inheritance_002c-of-properties\"></span>\n\n<span id=\"index-org_002duse_002dproperty_002dinheritance\"></span>\n<p>The outline structure of Org documents lends itself to an inheritance\nmodel of properties: if the parent in a tree has a certain property,\nthe children can inherit this property.  Org mode does not turn this\non by default, because it can slow down property searches\nsignificantly and is often not needed.  However, if you find\ninheritance useful, you can turn it on by setting the variable\n<code>org-use-property-inheritance</code>.  It may be set to <code>t</code> to make all\nproperties inherited from the parent, to a list of properties that\nshould be inherited, or to a regular expression that matches inherited\nproperties.  If a property has the value <code>nil</code>, this is interpreted as\nan explicit un-define of the property, so that inheritance search\nstops at this value and returns <code>nil</code>.\n</p>\n<p>Org mode has a few properties for which inheritance is hard-coded, at\nleast for the special applications for which they are used:\n</p>\n<dl compact=\"compact\">\n<dt><code>COLUMNS</code></dt>\n<dd><span id=\"index-COLUMNS_002c-property\"></span>\n<p>The \u2018<samp>COLUMNS</samp>\u2019 property defines the format of column view (see\n<a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>).  It is inherited in the sense that the level where\na \u2018<samp>COLUMNS</samp>\u2019 property is defined is used as the starting point for\na column view table, independently of the location in the subtree\nfrom where columns view is turned on.\n</p>\n</dd>\n<dt><code>CATEGORY</code></dt>\n<dd><span id=\"index-CATEGORY_002c-property\"></span>\n<p>For agenda view, a category set through a \u2018<samp>CATEGORY</samp>\u2019 property\napplies to the entire subtree.\n</p>\n</dd>\n<dt><code>ARCHIVE</code></dt>\n<dd><span id=\"index-ARCHIVE_002c-property\"></span>\n<p>For archiving, the \u2018<samp>ARCHIVE</samp>\u2019 property may define the archive\nlocation for the entire subtree (see <a href=\"https://orgmode.org/org.html#Moving-subtrees\">Moving subtrees</a>).\n</p>\n</dd>\n<dt><code>LOGGING</code></dt>\n<dd><span id=\"index-LOGGING_002c-property-1\"></span>\n<p>The \u2018<samp>LOGGING</samp>\u2019 property may define logging settings for an entry or\na subtree (see <a href=\"https://orgmode.org/org.html#Tracking-TODO-state-changes\">Tracking TODO state changes</a>).\n</p></dd>\n</dl>\n\n"}, {"id": "75ColumnView", "content": "\n<span id=\"Column-View\"></span>\n<span id=\"Column-View-1\"></span><h3 class=\"section\">7.5 Column View</h3>\n\n<p>A great way to view and edit properties in an outline tree is <em>column\nview</em>.  In column view, each outline node is turned into a table row.\nColumns in this table provide access to properties of the entries.\nOrg mode implements columns by overlaying a tabular structure over the\nheadline of each item.  While the headlines have been turned into\na table row, you can still change the visibility of the outline tree.\nFor example, you get a compact table by switching to \u201ccontents\u201d\nview\u2014<kbd>S-<span class=\"key\">TAB</span></kbd> <kbd>S-<span class=\"key\">TAB</span></kbd>, or simply <kbd>c</kbd>\nwhile column view is active\u2014but you can still open, read, and edit\nthe entry below each headline.  Or, you can switch to column view\nafter executing a sparse tree command and in this way get a table only\nfor the selected items.  Column view also works in agenda buffers (see\n<a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>) where queries have collected selected items, possibly\nfrom a number of files.\n</p>\n\n\n"}, {"id": "751Definingcolumns", "content": "\n<span id=\"Defining-columns\"></span>\n<span id=\"Defining-columns-1\"></span><h4 class=\"subsection\">7.5.1 Defining columns</h4>\n\n<span id=\"index-column-view_002c-for-properties\"></span>\n<span id=\"index-properties_002c-column-view\"></span>\n\n<p>Setting up a column view first requires defining the columns.  This is\ndone by defining a column format line.\n</p>\n\n\n"}, {"id": "7511Scopeofcolumndefinitions", "content": "\n<span id=\"Scope-of-column-definitions\"></span>\n<span id=\"Scope-of-column-definitions-1\"></span><h4 class=\"subsubsection\">7.5.1.1 Scope of column definitions</h4>\n\n<p>To specify a format that only applies to a specific tree, add\na \u2018<samp>COLUMNS</samp>\u2019 property to the top node of that tree, for example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** Top node for columns view\n   :PROPERTIES:\n   :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO\n   :END:\n</pre></div>\n\n<p>A \u2018<samp>COLUMNS</samp>\u2019 property within a property drawer before first headline\nwill apply to the entire file.  As an addition to property drawers,\nkeywords can also be defined for an entire file using a line like:\n</p>\n<span id=\"index-COLUMNS_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO\n</pre></div>\n\n\n<p>If a \u2018<samp>COLUMNS</samp>\u2019 property is present in an entry, it defines columns for\nthe entry itself, and for the entire subtree below it.  Since the\ncolumn definition is part of the hierarchical structure of the\ndocument, you can define columns on level 1 that are general enough\nfor all sublevels, and more specific columns further down, when you\nedit a deeper part of the tree.\n</p>\n"}, {"id": "7512Columnattributes", "content": "\n<span id=\"Column-attributes\"></span>\n<span id=\"Column-attributes-1\"></span><h4 class=\"subsubsection\">7.5.1.2 Column attributes</h4>\n\n<p>A column definition sets the attributes of a column.  The general\ndefinition looks like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">%[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]\n</pre></div>\n\n\n<p>Except for the percent sign and the property name, all items are\noptional.  The individual parts have the following meaning:\n</p>\n<dl compact=\"compact\">\n<dt><var>WIDTH</var></dt>\n<dd><p>An integer specifying the width of the column in characters.  If\nomitted, the width is determined automatically.\n</p>\n</dd>\n<dt><var>PROPERTY</var></dt>\n<dd><p>The property that should be edited in this column.  Special\nproperties representing meta data are allowed here as well (see\n<a href=\"https://orgmode.org/org.html#Special-Properties\">Special Properties</a>).\n</p>\n</dd>\n<dt><var>TITLE</var></dt>\n<dd><p>The header text for the column.  If omitted, the property name is\nused.\n</p>\n</dd>\n<dt><var>SUMMARY-TYPE</var></dt>\n<dd><p>The summary type.  If specified, the column values for parent nodes\nare computed from the children<a id=\"DOCF55\" href=\"https://orgmode.org/org.html#FOOT55\"><sup>55</sup></a>.\n</p>\n<p>Supported summary types are:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>+</samp>\u2019</td><td>Sum numbers in this column.</td></tr>\n<tr><td>\u2018<samp>+;%.1f</samp>\u2019</td><td>Like \u2018<samp>+</samp>\u2019, but format result with \u2018<samp>%.1f</samp>\u2019.</td></tr>\n<tr><td>\u2018<samp>$</samp>\u2019</td><td>Currency, short for \u2018<samp>+;%.2f</samp>\u2019.</td></tr>\n<tr><td>\u2018<samp>min</samp>\u2019</td><td>Smallest number in column.</td></tr>\n<tr><td>\u2018<samp>max</samp>\u2019</td><td>Largest number.</td></tr>\n<tr><td>\u2018<samp>mean</samp>\u2019</td><td>Arithmetic mean of numbers.</td></tr>\n<tr><td>\u2018<samp>X</samp>\u2019</td><td>Checkbox status, \u2018<samp>[X]</samp>\u2019 if all children are \u2018<samp>[X]</samp>\u2019.</td></tr>\n<tr><td>\u2018<samp>X/</samp>\u2019</td><td>Checkbox status, \u2018<samp>[n/m]</samp>\u2019.</td></tr>\n<tr><td>\u2018<samp>X%</samp>\u2019</td><td>Checkbox status, \u2018<samp>[n%]</samp>\u2019.</td></tr>\n<tr><td>\u2018<samp>:</samp>\u2019</td><td>Sum times, HH:MM, plain numbers are minutes.</td></tr>\n<tr><td>\u2018<samp>:min</samp>\u2019</td><td>Smallest time value in column.</td></tr>\n<tr><td>\u2018<samp>:max</samp>\u2019</td><td>Largest time value.</td></tr>\n<tr><td>\u2018<samp>:mean</samp>\u2019</td><td>Arithmetic mean of time values.</td></tr>\n<tr><td>\u2018<samp>@min</samp>\u2019</td><td>Minimum age<a id=\"DOCF56\" href=\"https://orgmode.org/org.html#FOOT56\"><sup>56</sup></a> (in days/hours/mins/seconds).</td></tr>\n<tr><td>\u2018<samp>@max</samp>\u2019</td><td>Maximum age (in days/hours/mins/seconds).</td></tr>\n<tr><td>\u2018<samp>@mean</samp>\u2019</td><td>Arithmetic mean of ages (in days/hours/mins/seconds).</td></tr>\n<tr><td>\u2018<samp>est+</samp>\u2019</td><td>Add low-high estimates.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dcolumns_002dsummary_002dtypes\"></span>\n<p>You can also define custom summary types by setting\n<code>org-columns-summary-types</code>.\n</p></dd>\n</dl>\n\n<p>The \u2018<samp>est+</samp>\u2019 summary type requires further explanation.  It is used for\ncombining estimates, expressed as low-high ranges.  For example,\ninstead of estimating a particular task will take 5 days, you might\nestimate it as 5\u20136 days if you\u2019re fairly confident you know how much\nwork is required, or 1\u201310 days if you do not really know what needs\nto be done.  Both ranges average at 5.5 days, but the first represents\na more predictable delivery.\n</p>\n<p>When combining a set of such estimates, simply adding the lows and\nhighs produces an unrealistically wide result.  Instead, \u2018<samp>est+</samp>\u2019 adds\nthe statistical mean and variance of the subtasks, generating a final\nestimate from the sum.  For example, suppose you had ten tasks, each\nof which was estimated at 0.5 to 2 days of work.  Straight addition\nproduces an estimate of 5 to 20 days, representing what to expect if\neverything goes either extremely well or extremely poorly.  In\ncontrast, \u2018<samp>est+</samp>\u2019 estimates the full job more realistically, at 10\u201315\ndays.\n</p>\n<p>Here is an example for a complete columns definition, along with\nallowed values<a id=\"DOCF57\" href=\"https://orgmode.org/org.html#FOOT57\"><sup>57</sup></a>.\n</p>\n<div class=\"example\">\n<pre class=\"example\">:COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \\\n                   %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T\n:Owner_ALL:    Tammy Mark Karl Lisa Don\n:Status_ALL:   \"In progress\" \"Not started yet\" \"Finished\" \"\"\n:Approved_ALL: \"[ ]\" \"[X]\"\n</pre></div>\n\n<p>The first column, \u2018<samp>%25ITEM</samp>\u2019, means the first 25 characters of the item\nitself, i.e., of the headline.  You probably always should start the\ncolumn definition with the \u2018<samp>ITEM</samp>\u2019 specifier.  The other specifiers\ncreate columns \u2018<samp>Owner</samp>\u2019 with a list of names as allowed values, for\n\u2018<samp>Status</samp>\u2019 with four different possible values, and for a checkbox field\n\u2018<samp>Approved</samp>\u2019.  When no width is given after the \u2018<samp>%</samp>\u2019 character, the\ncolumn is exactly as wide as it needs to be in order to fully display\nall values.  The \u2018<samp>Approved</samp>\u2019 column does have a modified title\n(\u2018<samp>Approved?</samp>\u2019, with a question mark).  Summaries are created for the\n\u2018<samp>Time_Estimate</samp>\u2019 column by adding time duration expressions like HH:MM,\nand for the \u2018<samp>Approved</samp>\u2019 column, by providing an \u2018<samp>[X]</samp>\u2019 status if all\nchildren have been checked.  The \u2018<samp>CLOCKSUM</samp>\u2019 and \u2018<samp>CLOCKSUM_T</samp>\u2019 columns\nare special, they lists the sums of CLOCK intervals in the subtree,\neither for all clocks or just for today.\n</p>\n"}, {"id": "752Usingcolumnview", "content": "\n<span id=\"Using-column-view\"></span>\n<span id=\"Using-column-view-1\"></span><h4 class=\"subsection\">7.5.2 Using column view</h4>\n\n\n\n<span id=\"Turning-column-view-on-or-off\"></span><span id=\"Turning-column-view-on-or-off-1\"></span><h4 class=\"subsubheading\">Turning column view on or off</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-c</kbd> (<code>org-columns</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dc\"></span>\n<span id=\"index-org_002dcolumns\"></span>\n<span id=\"index-org_002dcolumns_002ddefault_002dformat\"></span>\n<p>Turn on column view.  If point is before the first headline in the\nfile, column view is turned on for the entire file, using the\n\u2018<samp>#+COLUMNS</samp>\u2019 definition.  If point is somewhere inside the outline,\nthis command searches the hierarchy, up from point, for a \u2018<samp>COLUMNS</samp>\u2019\nproperty that defines a format.  When one is found, the column view\ntable is established for the tree starting at the entry that\ncontains the \u2018<samp>COLUMNS</samp>\u2019 property.  If no such property is found, the\nformat is taken from the \u2018<samp>#+COLUMNS</samp>\u2019 line or from the variable\n<code>org-columns-default-format</code>, and column view is established for the\ncurrent entry and its subtree.\n</p>\n</dd>\n<dt><kbd>r</kbd> or <kbd>g</kbd> on a columns view line (<code>org-columns-redo</code>)</dt>\n<dd><span id=\"index-r\"></span>\n<span id=\"index-g\"></span>\n<span id=\"index-org_002dcolumns_002dredo\"></span>\n<p>Recreate the column view, to include recent changes made in the\nbuffer.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> or <kbd>q</kbd> on a columns view line (<code>org-columns-quit</code>)</dt>\n<dd><span id=\"index-q-1\"></span>\n<span id=\"index-C_002dc-C_002dc-10\"></span>\n<span id=\"index-org_002dcolumns_002dquit\"></span>\n<p>Exit column view.\n</p></dd>\n</dl>\n\n<span id=\"Editing-values\"></span><span id=\"Editing-values-1\"></span><h4 class=\"subsubheading\">Editing values</h4>\n\n<dl compact=\"compact\">\n<dt><kbd><span class=\"key\">LEFT</span></kbd>, <kbd><span class=\"key\">RIGHT</span></kbd>, <kbd><span class=\"key\">UP</span></kbd>, <kbd><span class=\"key\">DOWN</span></kbd></dt>\n<dd><p>Move through the column view from field to field.\n</p>\n</dd>\n<dt><kbd>1..9,0</kbd></dt>\n<dd><span id=\"index-1_002e_002e9_002c0\"></span>\n<p>Directly select the Nth allowed value, <kbd>0</kbd> selects the\n10th value.\n</p>\n</dd>\n<dt><kbd>n</kbd> or <kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-columns-next-allowed-value</code>)</dt>\n<dt><kbd>p</kbd> or <kbd>S-<span class=\"key\">LEFT</span></kbd> (<code>org-columns-previous-allowed-value</code>)</dt>\n<dd><span id=\"index-n\"></span>\n<span id=\"index-S_002dRIGHT-6\"></span>\n<span id=\"index-p\"></span>\n<span id=\"index-S_002dLEFT-6\"></span>\n<span id=\"index-org_002dcolumns_002dnext_002dallowed_002dvalue\"></span>\n<span id=\"index-org_002dcolumns_002dprevious_002dallowed_002dvalue\"></span>\n<p>Switch to the next/previous allowed value of the field.  For this,\nyou have to have specified allowed values for a property.\n</p>\n</dd>\n<dt><kbd>e</kbd> (<code>org-columns-edit-value</code>)</dt>\n<dd><span id=\"index-e\"></span>\n<span id=\"index-org_002dcolumns_002dedit_002dvalue\"></span>\n<p>Edit the property at point.  For the special properties, this\ninvokes the same interface that you normally use to change that\nproperty.  For example, the tag completion or fast selection\ninterface pops up when editing a \u2018<samp>TAGS</samp>\u2019 property.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> (<code>org-columns-toggle-or-columns-quit</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-11\"></span>\n<span id=\"index-org_002dcolumns_002dtoggle_002dor_002dcolumns_002dquit\"></span>\n<p>When there is a checkbox at point, toggle it.  Else exit column\nview.\n</p>\n</dd>\n<dt><kbd>v</kbd> (<code>org-columns-show-value</code>)</dt>\n<dd><span id=\"index-v\"></span>\n<span id=\"index-org_002dcolumns_002dshow_002dvalue\"></span>\n<p>View the full value of this property.  This is useful if the width\nof the column is smaller than that of the value.\n</p>\n</dd>\n<dt><kbd>a</kbd> (<code>org-columns-edit-allowed</code>)</dt>\n<dd><span id=\"index-a\"></span>\n<span id=\"index-org_002dcolumns_002dedit_002dallowed\"></span>\n<p>Edit the list of allowed values for this property.  If the list is\nfound in the hierarchy, the modified values is stored there.  If no\nlist is found, the new value is stored in the first entry that is\npart of the current column view.\n</p></dd>\n</dl>\n\n<span id=\"Modifying-column-view-on_002dthe_002dfly\"></span><span id=\"Modifying-column-view-on_002dthe_002dfly-1\"></span><h4 class=\"subsubheading\">Modifying column view on-the-fly</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>&lt;</kbd> (<code>org-columns-narrow</code>)</dt>\n<dt><kbd>&gt;</kbd> (<code>org-columns-widen</code>)</dt>\n<dd><span id=\"index-_003c\"></span>\n<span id=\"index-_003e\"></span>\n<span id=\"index-org_002dcolumns_002dnarrow\"></span>\n<span id=\"index-org_002dcolumns_002dwiden\"></span>\n<p>Make the column narrower/wider by one character.\n</p>\n</dd>\n<dt><kbd>S-M-<span class=\"key\">RIGHT</span></kbd> (<code>org-columns-new</code>)</dt>\n<dd><span id=\"index-S_002dM_002dRIGHT\"></span>\n<span id=\"index-org_002dcolumns_002dnew\"></span>\n<p>Insert a new column, to the left of the current column.\n</p>\n</dd>\n<dt><kbd>S-M-<span class=\"key\">LEFT</span></kbd> (<code>org-columns-delete</code>)</dt>\n<dd><span id=\"index-S_002dM_002dLEFT\"></span>\n<span id=\"index-org_002dcolumns_002ddelete\"></span>\n<p>Delete the current column.\n</p></dd>\n</dl>\n\n"}, {"id": "753Capturingcolumnview", "content": "\n<span id=\"Capturing-column-view\"></span>\n<span id=\"Capturing-column-view-1\"></span><h4 class=\"subsection\">7.5.3 Capturing column view</h4>\n\n<p>Since column view is just an overlay over a buffer, it cannot be\nexported or printed directly.  If you want to capture a column view,\nuse a \u2018<samp>columnview</samp>\u2019 dynamic block (see <a href=\"https://orgmode.org/org.html#Dynamic-Blocks\">Dynamic Blocks</a>).  The frame of\nthis block looks like this:\n</p>\n<span id=\"index-BEGIN-columnview\"></span>\n<div class=\"example\">\n<pre class=\"example\">* The column view\n#+BEGIN: columnview :hlines 1 :id \"label\"\n\n#+END:\n</pre></div>\n\n<p>This dynamic block has the following parameters:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:id</samp>\u2019</dt>\n<dd><p>This is the most important parameter.  Column view is a feature that\nis often localized to a certain (sub)tree, and the capture block\nmight be at a different location in the file.  To identify the tree\nwhose view to capture, you can use four values:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>local</samp>\u2019</dt>\n<dd><p>Use the tree in which the capture block is located.\n</p>\n</dd>\n<dt>\u2018<samp>global</samp>\u2019</dt>\n<dd><p>Make a global view, including all headings in the file.\n</p>\n</dd>\n<dt>\u2018<samp>file:FILENAME</samp>\u2019</dt>\n<dd><p>Run column view at the top of the <var>FILENAME</var> file.\n</p>\n</dd>\n<dt>\u2018<samp>LABEL</samp>\u2019</dt>\n<dd><span id=\"index-ID_002c-property-1\"></span>\n<p>Call column view in the tree that has an \u2018<samp>ID</samp>\u2019 property with the\nvalue <var>LABEL</var>.  You can use <kbd>M-x org-id-copy</kbd> to\ncreate a globally unique ID for the current entry and copy it to\nthe kill-ring.\n</p></dd>\n</dl>\n\n</dd>\n<dt>\u2018<samp>:match</samp>\u2019</dt>\n<dd><p>When set to a string, use this as a tags/property match filter to\nselect only a subset of the headlines in the scope set by the <code>:id</code>\nparameter.\n</p></dd>\n</dl>\n\n\n<dl compact=\"compact\">\n<dt>\u2018<samp>:hlines</samp>\u2019</dt>\n<dd><p>When <code>t</code>, insert an hline after every line.  When a number N, insert\nan hline before each headline with level <code>&lt;= N</code>.\n</p>\n</dd>\n<dt>\u2018<samp>:vlines</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, force column groups to get vertical lines.\n</p>\n</dd>\n<dt>\u2018<samp>:maxlevel</samp>\u2019</dt>\n<dd><p>When set to a number, do not capture entries below this level.\n</p>\n</dd>\n<dt>\u2018<samp>:skip-empty-rows</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, skip rows where the only non-empty specifier of\nthe column view is \u2018<samp>ITEM</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>:exclude-tags</samp>\u2019</dt>\n<dd><p>List of tags to exclude from column view table: entries with these\ntags will be excluded from the column view.\n</p>\n</dd>\n<dt>\u2018<samp>:indent</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, indent each \u2018<samp>ITEM</samp>\u2019 field according to its level.\n</p>\n</dd>\n<dt>\u2018<samp>:format</samp>\u2019</dt>\n<dd><p>Specify a column attribute (see <a href=\"https://orgmode.org/org.html#Column-attributes\">Column attributes</a>) for the dynamic\nblock.\n</p></dd>\n</dl>\n\n<p>The following commands insert or update the dynamic block:\n</p>\n<dl compact=\"compact\">\n<dt><code>org-columns-insert-dblock</code></dt>\n<dd><span id=\"index-C_002dc-C_002dx-x\"></span>\n<span id=\"index-org_002dcolumns_002dinsert_002ddblock\"></span>\n<p>Insert a dynamic block capturing a column view.  Prompt for the\nscope or ID of the view.\n</p>\n<p>This command can be invoked by calling\n<code>org-dynamic-block-insert-dblock</code> (<kbd>C-c C-x x</kbd>) and\nselecting \u201ccolumnview\u201d (see <a href=\"https://orgmode.org/org.html#Dynamic-Blocks\">Dynamic Blocks</a>).\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> <kbd>C-c C-x C-u</kbd> (<code>org-dblock-update</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-12\"></span>\n<span id=\"index-C_002dc-C_002dx-C_002du\"></span>\n<span id=\"index-org_002ddblock_002dupdate\"></span>\n<p>Update dynamic block at point.  point needs to be in the \u2018<samp>#+BEGIN</samp>\u2019\nline of the dynamic block.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-x C-u</kbd> (<code>org-update-all-dblocks</code>)</dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dx-C_002du\"></span>\n<p>Update all dynamic blocks (see <a href=\"https://orgmode.org/org.html#Dynamic-Blocks\">Dynamic Blocks</a>).  This is useful if\nyou have several clock table blocks, column-capturing blocks or\nother dynamic blocks in a buffer.\n</p></dd>\n</dl>\n\n<p>You can add formulas to the column view table and you may add plotting\ninstructions in front of the table\u2014these survive an update of the\nblock.  If there is a \u2018<samp>TBLFM</samp>\u2019 keyword after the table, the table is\nrecalculated automatically after an update.\n</p>\n<p>An alternative way to capture and process property values into a table\nis provided by Eric Schulte\u2019s \u2018<samp>org-collector.el</samp>\u2019, which is a package\nin \u2018<samp>org-contrib</samp>\u2019<a id=\"DOCF58\" href=\"https://orgmode.org/org.html#FOOT58\"><sup>58</sup></a>.  It provides a general API to collect\nproperties from entries in a certain scope, and arbitrary Lisp\nexpressions to process these values before inserting them into a table\nor a dynamic block.\n</p>\n"}, {"id": "8DatesandTimes", "content": "\n<span id=\"Dates-and-Times\"></span>\n<span id=\"Dates-and-Times-1\"></span><h2 class=\"chapter\">8 Dates and Times</h2>\n\n<span id=\"index-dates\"></span>\n<span id=\"index-times\"></span>\n<span id=\"index-timestamp\"></span>\n<span id=\"index-date-stamp\"></span>\n\n<p>To assist project planning, TODO items can be labeled with a date\nand/or a time.  The specially formatted string carrying the date and\ntime information is called a <em>timestamp</em> in Org mode.  This may be\na little confusing because timestamp is often used as indicating when\nsomething was created or last changed.  However, in Org mode this term\nis used in a much wider sense.\n</p>\n\n\n"}, {"id": "81Timestamps", "content": "\n<span id=\"Timestamps\"></span>\n<span id=\"Timestamps-1\"></span><h3 class=\"section\">8.1 Timestamps</h3>\n\n<span id=\"index-timestamps\"></span>\n<span id=\"index-ranges_002c-time\"></span>\n<span id=\"index-date-stamps\"></span>\n<span id=\"index-deadlines\"></span>\n<span id=\"index-scheduling\"></span>\n\n<p>A timestamp is a specification of a date (possibly with a time or\na range of times) in a special format, either \u2018<samp>&lt;2003-09-16 Tue&gt;</samp>\u2019 or\n\u2018<samp>&lt;2003-09-16 Tue 09:39&gt;</samp>\u2019 or \u2018<samp>&lt;2003-09-16 Tue 12:00-12:30&gt;</samp>\u2019<a id=\"DOCF59\" href=\"https://orgmode.org/org.html#FOOT59\"><sup>59</sup></a>.\nA timestamp can appear anywhere in the headline or body of an Org tree\nentry.  Its presence causes entries to be shown on specific dates in\nthe agenda (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>).  We distinguish:\n</p>\n<dl compact=\"compact\">\n<dt>Plain timestamp; Event; Appointment</dt>\n<dd><span id=\"index-timestamp-1\"></span>\n<span id=\"index-appointment\"></span>\n<p>A simple timestamp just assigns a date/time to an item.  This is\njust like writing down an appointment or event in a paper agenda.\nIn the agenda display, the headline of an entry associated with\na plain timestamp is shown exactly on that date.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Meet Peter at the movies\n  &lt;2006-11-01 Wed 19:15&gt;\n* Discussion on climate change\n  &lt;2006-11-02 Thu 20:00-22:00&gt;\n</pre></div>\n\n</dd>\n<dt>Timestamp with repeater interval</dt>\n<dd><span id=\"index-timestamp_002c-with-repeater-interval\"></span>\n<p>A timestamp may contain a <em>repeater interval</em>, indicating that it\napplies not only on the given date, but again and again after\na certain interval of N days (d), weeks (w), months (m), or years\n(y).  The following shows up in the agenda every Wednesday:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Pick up Sam at school\n  &lt;2007-05-16 Wed 12:30 +1w&gt;\n</pre></div>\n\n</dd>\n<dt>Diary-style expression entries</dt>\n<dd><span id=\"index-diary-style-timestamps\"></span>\n<span id=\"index-sexp-timestamps\"></span>\n<p>For more complex date specifications, Org mode supports using the\nspecial expression diary entries implemented in the Emacs Calendar\npackage<a id=\"DOCF60\" href=\"https://orgmode.org/org.html#FOOT60\"><sup>60</sup></a>.  For example, with optional time:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* 22:00-23:00 The nerd meeting on every 2nd Thursday of the month\n  &lt;%%(diary-float t 4 2)&gt;\n</pre></div>\n\n</dd>\n<dt>Time/Date range</dt>\n<dd><span id=\"index-timerange\"></span>\n<span id=\"index-date-range\"></span>\n<p>Two timestamps connected by \u2018<samp>--</samp>\u2019 denote a range.  The headline is\nshown on the first and last day of the range, and on any dates that\nare displayed and fall in the range.  Here is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** Meeting in Amsterdam\n   &lt;2004-08-23 Mon&gt;--&lt;2004-08-26 Thu&gt;\n</pre></div>\n\n</dd>\n<dt>Inactive timestamp</dt>\n<dd><span id=\"index-timestamp_002c-inactive\"></span>\n<span id=\"index-inactive-timestamp\"></span>\n<p>Just like a plain timestamp, but with square brackets instead of\nangular ones.  These timestamps are inactive in the sense that they\ndo <em>not</em> trigger an entry to show up in the agenda.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Gillian comes late for the fifth time\n  [2006-11-01 Wed]\n</pre></div>\n</dd>\n</dl>\n\n"}, {"id": "82CreatingTimestamps", "content": "\n<span id=\"Creating-Timestamps\"></span>\n<span id=\"Creating-Timestamps-1\"></span><h3 class=\"section\">8.2 Creating Timestamps</h3>\n\n<p>For Org mode to recognize timestamps, they need to be in the specific\nformat.  All commands listed below produce timestamps in the correct\nformat.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c .</kbd> (<code>org-time-stamp</code>)</dt>\n<dd><span id=\"index-C_002dc-_002e\"></span>\n<span id=\"index-org_002dtime_002dstamp\"></span>\n<p>Prompt for a date and insert a corresponding timestamp.  When point\nis at an existing timestamp in the buffer, the command is used to\nmodify this timestamp instead of inserting a new one.  When this\ncommand is used twice in succession, a time range is inserted.\n</p>\n<span id=\"index-C_002du-C_002dc-_002e\"></span>\n<span id=\"index-org_002dtime_002dstamp_002drounding_002dminutes\"></span>\n<p>When called with a prefix argument, use the alternative format which\ncontains date and time.  The default time can be rounded to\nmultiples of 5 minutes.  See the option\n<code>org-time-stamp-rounding-minutes</code>.\n</p>\n<span id=\"index-C_002du-C_002du-C_002dc-_002e\"></span>\n<p>With two prefix arguments, insert an active timestamp with the\ncurrent time without prompting.\n</p>\n</dd>\n<dt><kbd>C-c !</kbd> (<code>org-time-stamp-inactive</code>)</dt>\n<dd><span id=\"index-C_002dc-_0021\"></span>\n<span id=\"index-C_002du-C_002dc-_0021\"></span>\n<span id=\"index-C_002du-C_002du-C_002dc-_0021\"></span>\n<span id=\"index-org_002dtime_002dstamp_002dinactive\"></span>\n<p>Like <kbd>C-c .</kbd>, but insert an inactive timestamp that does\nnot cause an agenda entry.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002dc-13\"></span>\n<p>Normalize timestamp, insert or fix day name if missing or wrong.\n</p>\n</dd>\n<dt><kbd>C-c &lt;</kbd> (<code>org-date-from-calendar</code>)</dt>\n<dd><span id=\"index-C_002dc-_003c\"></span>\n<span id=\"index-org_002ddate_002dfrom_002dcalendar\"></span>\n<p>Insert a timestamp corresponding to point date in the calendar.\n</p>\n</dd>\n<dt><kbd>C-c &gt;</kbd> (<code>org-goto-calendar</code>)</dt>\n<dd><span id=\"index-C_002dc-_003e\"></span>\n<span id=\"index-org_002dgoto_002dcalendar\"></span>\n<p>Access the Emacs calendar for the current date.  If there is\na timestamp in the current line, go to the corresponding date\ninstead.\n</p>\n</dd>\n<dt><kbd>C-c C-o</kbd> (<code>org-open-at-point</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002do-1\"></span>\n<span id=\"index-org_002dopen_002dat_002dpoint-1\"></span>\n<p>Access the agenda for the date given by the timestamp or -range at\npoint (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd> (<code>org-timestamp-down-day</code>)</dt>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-timestamp-up-day</code>)</dt>\n<dd><span id=\"index-S_002dLEFT-7\"></span>\n<span id=\"index-S_002dRIGHT-7\"></span>\n<span id=\"index-org_002dtimestamp_002ddown_002dday\"></span>\n<span id=\"index-org_002dtimestamp_002dup_002dday\"></span>\n<p>Change date at point by one day.  These key bindings conflict with\nshift-selection and related modes (see <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>).\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">UP</span></kbd> (<code>org-timestamp-up</code>)</dt>\n<dt><kbd>S-<span class=\"key\">DOWN</span></kbd> (<code>org-timestamp-down</code>)</dt>\n<dd><span id=\"index-S_002dUP-4\"></span>\n<span id=\"index-S_002dDOWN-4\"></span>\n<p>On the beginning or enclosing bracket of a timestamp, change its\ntype.  Within a timestamp, change the item under point.  Point can\nbe on a year, month, day, hour or minute.  When the timestamp\ncontains a time range like \u2018<samp>15:30-16:30</samp>\u2019, modifying the first time\nalso shifts the second, shifting the time block with constant\nlength.  To change the length, modify the second time.  Note that if\npoint is in a headline and not at a timestamp, these same keys\nmodify the priority of an item (see <a href=\"https://orgmode.org/org.html#Priorities\">Priorities</a>).  The key bindings\nalso conflict with shift-selection and related modes (see <a href=\"https://orgmode.org/org.html#Conflicts\">Conflicts</a>).\n</p>\n</dd>\n<dt><kbd>C-c C-y</kbd> (<code>org-evaluate-time-range</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dy\"></span>\n<span id=\"index-org_002devaluate_002dtime_002drange\"></span>\n<span id=\"index-evaluate-time-range\"></span>\n<p>Evaluate a time range by computing the difference between start and\nend.  With a prefix argument, insert result after the time range (in\na table: into the following column).\n</p></dd>\n</dl>\n\n\n\n"}, {"id": "821Thedatetimeprompt", "content": "\n<span id=\"The-date_002ftime-prompt\"></span>\n<span id=\"The-date_002ftime-prompt-1\"></span><h4 class=\"subsection\">8.2.1 The date/time prompt</h4>\n\n<span id=\"index-date_002c-reading-in-minibuffer\"></span>\n<span id=\"index-time_002c-reading-in-minibuffer\"></span>\n\n<span id=\"index-org_002dread_002ddate_002dprefer_002dfuture\"></span>\n<p>When Org mode prompts for a date/time, the default is shown in default\ndate/time format, and the prompt therefore seems to ask for a specific\nformat.  But it in fact accepts date/time information in a variety of\nformats.  Generally, the information should start at the beginning of\nthe string.  Org mode finds whatever information is in there and\nderives anything you have not specified from the <em>default date and\ntime</em>.  The default is usually the current date and time, but when\nmodifying an existing timestamp, or when entering the second stamp of\na range, it is taken from the stamp in the buffer.  When filling in\ninformation, Org mode assumes that most of the time you want to enter\na date in the future: if you omit the month/year and the given\nday/month is <em>before</em> today, it assumes that you mean a future\ndate<a id=\"DOCF61\" href=\"https://orgmode.org/org.html#FOOT61\"><sup>61</sup></a>.  If the date has been automatically shifted into the\nfuture, the time prompt shows this with \u2018<samp>(=&gt;F)</samp>\u2019.\n</p>\n<p>For example, let\u2019s assume that today is <strong>June 13, 2006</strong>.  Here is how\nvarious inputs are interpreted, the items filled in by Org mode are in\n<strong>bold</strong>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>3-2-5</samp>\u2019</td><td>\u21d2 2003-02-05</td></tr>\n<tr><td>\u2018<samp>2/5/3</samp>\u2019</td><td>\u21d2 2003-02-05</td></tr>\n<tr><td>\u2018<samp>14</samp>\u2019</td><td>\u21d2 <strong>2006</strong>-<strong>06</strong>-14</td></tr>\n<tr><td>\u2018<samp>12</samp>\u2019</td><td>\u21d2 <strong>2006</strong>-<strong>07</strong>-12</td></tr>\n<tr><td>\u2018<samp>2/5</samp>\u2019</td><td>\u21d2 <strong>2007</strong>-02-05</td></tr>\n<tr><td>\u2018<samp>Fri</samp>\u2019</td><td>\u21d2 nearest Friday (default date or later)</td></tr>\n<tr><td>\u2018<samp>sep 15</samp>\u2019</td><td>\u21d2 <strong>2006</strong>-09-15</td></tr>\n<tr><td>\u2018<samp>feb 15</samp>\u2019</td><td>\u21d2 <strong>2007</strong>-02-15</td></tr>\n<tr><td>\u2018<samp>sep 12 9</samp>\u2019</td><td>\u21d2 2009-09-12</td></tr>\n<tr><td>\u2018<samp>12:45</samp>\u2019</td><td>\u21d2 <strong>2006</strong>-<strong>06</strong>-<strong>13</strong> 12:45</td></tr>\n<tr><td>\u2018<samp>22 sept 0:34</samp>\u2019</td><td>\u21d2 <strong>2006</strong>-09-22 0:34</td></tr>\n<tr><td>\u2018<samp>w4</samp>\u2019</td><td>\u21d2 ISO week for of the current year <strong>2006</strong></td></tr>\n<tr><td>\u2018<samp>2012 w4 fri</samp>\u2019</td><td>\u21d2 Friday of ISO week 4 in 2012</td></tr>\n<tr><td>\u2018<samp>2012-w04-5</samp>\u2019</td><td>\u21d2 Same as above</td></tr>\n</tbody></table>\n\n<p>Furthermore you can specify a relative date by giving, as the <em>first</em>\nthing in the input: a plus/minus sign, a number and a letter\u2014\u2018<samp>h</samp>\u2019,\n\u2018<samp>d</samp>\u2019, \u2018<samp>w</samp>\u2019, \u2018<samp>m</samp>\u2019 or \u2018<samp>y</samp>\u2019\u2014to indicate a change in hours, days, weeks,\nmonths, or years.  With \u2018<samp>h</samp>\u2019 the date is relative to the current time,\nwith the other letters and a single plus or minus, the date is\nrelative to today at 00:00.  With a double plus or minus, it is\nrelative to the default date.  If instead of a single letter, you use\nthe abbreviation of day name, the date is the Nth such day, e.g.:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>+0</samp>\u2019</td><td>\u21d2 today</td></tr>\n<tr><td>\u2018<samp>.</samp>\u2019</td><td>\u21d2 today</td></tr>\n<tr><td>\u2018<samp>+2h</samp>\u2019</td><td>\u21d2 two hours from now</td></tr>\n<tr><td>\u2018<samp>+4d</samp>\u2019</td><td>\u21d2 four days from today</td></tr>\n<tr><td>\u2018<samp>+4</samp>\u2019</td><td>\u21d2 same as +4d</td></tr>\n<tr><td>\u2018<samp>+2w</samp>\u2019</td><td>\u21d2 two weeks from today</td></tr>\n<tr><td>\u2018<samp>++5</samp>\u2019</td><td>\u21d2 five days from default date</td></tr>\n<tr><td>\u2018<samp>+2tue</samp>\u2019</td><td>\u21d2 second Tuesday from now</td></tr>\n</tbody></table>\n\n<span id=\"index-parse_002dtime_002dmonths\"></span>\n<span id=\"index-parse_002dtime_002dweekdays\"></span>\n<p>The function understands English month and weekday abbreviations.  If\nyou want to use un-abbreviated names and/or other languages, configure\nthe variables <code>parse-time-months</code> and <code>parse-time-weekdays</code>.\n</p>\n<span id=\"index-org_002dread_002ddate_002dforce_002dcompatible_002ddates\"></span>\n<p>Not all dates can be represented in a given Emacs implementation.  By\ndefault Org mode forces dates into the compatibility range 1970\u20132037\nwhich works on all Emacs implementations.  If you want to use dates\noutside of this range, read the docstring of the variable\n<code>org-read-date-force-compatible-dates</code>.\n</p>\n<p>You can specify a time range by giving start and end times or by\ngiving a start time and a duration (in HH:MM format).  Use one or two\ndash(es) as the separator in the former case and use \u2018<samp>+</samp>\u2019 as the\nseparator in the latter case, e.g.:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>11am-1:15pm</samp>\u2019</td><td>\u21d2 11:00-13:15</td></tr>\n<tr><td>\u2018<samp>11h-13h15</samp>\u2019</td><td>\u21d2 same as above</td></tr>\n<tr><td>\u2018<samp>11am--1:15pm</samp>\u2019</td><td>\u21d2 same as above</td></tr>\n<tr><td>\u2018<samp>11am+2:15</samp>\u2019</td><td>\u21d2 same as above</td></tr>\n</tbody></table>\n\n<span id=\"index-calendar_002c-for-selecting-date\"></span>\n<span id=\"index-org_002dpopup_002dcalendar_002dfor_002ddate_002dprompt\"></span>\n<p>Parallel to the minibuffer prompt, a calendar is popped up<a id=\"DOCF62\" href=\"https://orgmode.org/org.html#FOOT62\"><sup>62</sup></a>.\nWhen you exit the date prompt, either by clicking on a date in the\ncalendar, or by pressing <kbd><span class=\"key\">RET</span></kbd>, the date selected in the\ncalendar is combined with the information entered at the prompt.  You\ncan control the calendar fully from the minibuffer:\n</p>\n<span id=\"index-_003c-1\"></span>\n<span id=\"index-_003e-1\"></span>\n<span id=\"index-M_002dv\"></span>\n<span id=\"index-C_002dv\"></span>\n<span id=\"index-mouse_002d1-1\"></span>\n<span id=\"index-S_002dRIGHT-8\"></span>\n<span id=\"index-S_002dLEFT-8\"></span>\n<span id=\"index-S_002dDOWN-5\"></span>\n<span id=\"index-S_002dUP-5\"></span>\n<span id=\"index-M_002dS_002dRIGHT-3\"></span>\n<span id=\"index-M_002dS_002dLEFT-3\"></span>\n<span id=\"index-RET-3\"></span>\n<span id=\"index-_002e\"></span>\n<span id=\"index-C_002d_002e\"></span>\n<table>\n<tbody><tr><td width=\"25%\"><kbd><span class=\"key\">RET</span></kbd></td><td width=\"55%\">Choose date at point in calendar.</td></tr>\n<tr><td width=\"25%\"><kbd>mouse-1</kbd></td><td width=\"55%\">Select date by clicking on it.</td></tr>\n<tr><td width=\"25%\"><kbd>S-<span class=\"key\">RIGHT</span></kbd></td><td width=\"55%\">One day forward.</td></tr>\n<tr><td width=\"25%\"><kbd>S-<span class=\"key\">LEFT</span></kbd></td><td width=\"55%\">One day backward.</td></tr>\n<tr><td width=\"25%\"><kbd>S-<span class=\"key\">DOWN</span></kbd></td><td width=\"55%\">One week forward.</td></tr>\n<tr><td width=\"25%\"><kbd>S-<span class=\"key\">UP</span></kbd></td><td width=\"55%\">One week backward.</td></tr>\n<tr><td width=\"25%\"><kbd>M-S-<span class=\"key\">RIGHT</span></kbd></td><td width=\"55%\">One month forward.</td></tr>\n<tr><td width=\"25%\"><kbd>M-S-<span class=\"key\">LEFT</span></kbd></td><td width=\"55%\">One month backward.</td></tr>\n<tr><td width=\"25%\"><kbd>&gt;</kbd></td><td width=\"55%\">Scroll calendar forward by one month.</td></tr>\n<tr><td width=\"25%\"><kbd>&lt;</kbd></td><td width=\"55%\">Scroll calendar backward by one month.</td></tr>\n<tr><td width=\"25%\"><kbd>M-v</kbd></td><td width=\"55%\">Scroll calendar forward by 3 months.</td></tr>\n<tr><td width=\"25%\"><kbd>C-v</kbd></td><td width=\"55%\">Scroll calendar backward by 3 months.</td></tr>\n<tr><td width=\"25%\"><kbd>C-.</kbd></td><td width=\"55%\">Select today\u2019s date<a id=\"DOCF63\" href=\"https://orgmode.org/org.html#FOOT63\"><sup>63</sup></a></td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dread_002ddate_002ddisplay_002dlive\"></span>\n<p>The actions of the date/time prompt may seem complex, but I assure you\nthey will grow on you, and you will start getting annoyed by pretty\nmuch any other way of entering a date/time out there.  To help you\nunderstand what is going on, the current interpretation of your input\nis displayed live in the minibuffer<a id=\"DOCF64\" href=\"https://orgmode.org/org.html#FOOT64\"><sup>64</sup></a>.\n</p>\n"}, {"id": "822Customtimeformat", "content": "\n<span id=\"Custom-time-format\"></span>\n<span id=\"Custom-time-format-1\"></span><h4 class=\"subsection\">8.2.2 Custom time format</h4>\n\n<span id=\"index-custom-date_002ftime-format\"></span>\n<span id=\"index-time-format_002c-custom\"></span>\n<span id=\"index-date-format_002c-custom\"></span>\n\n<span id=\"index-org_002ddisplay_002dcustom_002dtimes\"></span>\n<span id=\"index-org_002dtime_002dstamp_002dcustom_002dformats\"></span>\n<p>Org mode uses the standard ISO notation for dates and times as it is\ndefined in ISO 8601.  If you cannot get used to this and require\nanother representation of date and time to keep you happy, you can get\nit by customizing the variables <code>org-display-custom-times</code> and\n<code>org-time-stamp-custom-formats</code>.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-t</kbd> (<code>org-toggle-time-stamp-overlays</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dt\"></span>\n<span id=\"index-org_002dtoggle_002dtime_002dstamp_002doverlays\"></span>\n<p>Toggle the display of custom formats for dates and times.\n</p></dd>\n</dl>\n\n<p>Org mode needs the default format for scanning, so the custom\ndate/time format does not <em>replace</em> the default format.  Instead, it\nis put <em>over</em> the default format using text properties.  This has the\nfollowing consequences:\n</p>\n<ul>\n<li> You cannot place point onto a timestamp anymore, only before or\nafter.\n\n</li><li> The <kbd>S-<span class=\"key\">UP</span></kbd> and <kbd>S-<span class=\"key\">DOWN</span></kbd> keys can no longer be used\nto adjust each component of a timestamp.  If point is at the\nbeginning of the stamp, <kbd>S-<span class=\"key\">UP</span></kbd> and <kbd>S-<span class=\"key\">DOWN</span></kbd> change\nthe stamp by one day, just like <kbd>S-<span class=\"key\">LEFT</span></kbd>\n<kbd>S-<span class=\"key\">RIGHT</span></kbd>.  At the end of the stamp, change the time by one\nminute.\n\n</li><li> If the timestamp contains a range of clock times or a repeater,\nthese are not overlaid, but remain in the buffer as they were.\n\n</li><li> When you delete a timestamp character-by-character, it only\ndisappears from the buffer after <em>all</em> (invisible) characters\nbelonging to the ISO timestamp have been removed.\n\n</li><li> If the custom timestamp format is longer than the default and you\nare using dates in tables, table alignment will be messed up.  If\nthe custom format is shorter, things do work as expected.\n</li></ul>\n\n"}, {"id": "83DeadlinesandScheduling", "content": "\n<span id=\"Deadlines-and-Scheduling\"></span>\n<span id=\"Deadlines-and-Scheduling-1\"></span><h3 class=\"section\">8.3 Deadlines and Scheduling</h3>\n\n<p>A timestamp may be preceded by special keywords to facilitate\nplanning.  Both the timestamp and the keyword have to be positioned\nimmediately after the task they refer to.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>DEADLINE</samp>\u2019</dt>\n<dd><span id=\"index-DEADLINE-marker\"></span>\n<p>Meaning: the task\u2014most likely a TODO item, though not\nnecessarily\u2014is supposed to be finished on that date.\n</p>\n<span id=\"index-org_002ddeadline_002dwarning_002ddays\"></span>\n<p>On the deadline date, the task is listed in the agenda.  In\naddition, the agenda for <em>today</em> carries a warning about the\napproaching or missed deadline, starting <code>org-deadline-warning-days</code>\nbefore the due date, and continuing until the entry is marked as\ndone.  An example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** TODO write article about the Earth for the Guide\n    DEADLINE: &lt;2004-02-29 Sun&gt;\n    The editor in charge is [[bbdb:Ford Prefect]]\n</pre></div>\n\n<span id=\"index-org_002dagenda_002dskip_002ddeadline_002dprewarning_002dif_002dscheduled\"></span>\n<p>You can specify a different lead time for warnings for a specific\ndeadlines using the following syntax.  Here is an example with\na warning period of 5 days \u2018<samp>DEADLINE: &lt;2004-02-29 Sun -5d&gt;</samp>\u2019.  This\nwarning is deactivated if the task gets scheduled and you set\n<code>org-agenda-skip-deadline-prewarning-if-scheduled</code> to <code>t</code>.\n</p>\n</dd>\n<dt>\u2018<samp>SCHEDULED</samp>\u2019</dt>\n<dd><span id=\"index-SCHEDULED-marker\"></span>\n<p>Meaning: you are planning to start working on that task on the given\ndate.\n</p>\n<span id=\"index-org_002dagenda_002dskip_002dscheduled_002dif_002ddone\"></span>\n<p>The headline is listed under the given date<a id=\"DOCF65\" href=\"https://orgmode.org/org.html#FOOT65\"><sup>65</sup></a>.  In addition,\na reminder that the scheduled date has passed is present in the\ncompilation for <em>today</em>, until the entry is marked as done, i.e.,\nthe task is automatically forwarded until completed.\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** TODO Call Trillian for a date on New Years Eve.\n    SCHEDULED: &lt;2004-12-25 Sat&gt;\n</pre></div>\n\n<span id=\"index-org_002dscheduled_002ddelay_002ddays\"></span>\n<span id=\"index-org_002dagenda_002dskip_002dscheduled_002ddelay_002dif_002ddeadline\"></span>\n<p>If you want to <em>delay</em> the display of this task in the agenda, use\n\u2018<samp>SCHEDULED: &lt;2004-12-25 Sat -2d&gt;</samp>\u2019: the task is still scheduled on\nthe 25th but will appear two days later.  In case the task contains\na repeater, the delay is considered to affect all occurrences; if\nyou want the delay to only affect the first scheduled occurrence of\nthe task, use \u2018<samp>--2d</samp>\u2019 instead.  See <code>org-scheduled-delay-days</code> and\n<code>org-agenda-skip-scheduled-delay-if-deadline</code> for details on how to\ncontrol this globally or per agenda.\n</p>\n<blockquote>\n<p><b>Important:</b> Scheduling an item in Org mode should <em>not</em> be understood in the\nsame way that we understand <em>scheduling a meeting</em>.  Setting a date\nfor a meeting is just a simple appointment, you should mark this\nentry with a simple plain timestamp, to get this item shown on the\ndate where it applies.  This is a frequent misunderstanding by Org\nusers.  In Org mode, <em>scheduling</em> means setting a date when you want\nto start working on an action item.\n</p>\n</blockquote>\n</dd>\n</dl>\n\n<p>You may use timestamps with repeaters in scheduling and deadline\nentries.  Org mode issues early and late warnings based on the\nassumption that the timestamp represents the <em>nearest instance</em> of the\nrepeater.  However, the use of diary expression entries like\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;%%(diary-float t 42)&gt;\n</pre></div>\n\n\n<p>in scheduling and deadline timestamps is limited.  Org mode does not\nknow enough about the internals of each function to issue early and\nlate warnings.  However, it shows the item on each day where the\nexpression entry matches.\n</p>\n\n\n"}, {"id": "831Insertingdeadlinesorschedules", "content": "\n<span id=\"Inserting-deadline_002fschedule\"></span>\n<span id=\"Inserting-deadlines-or-schedules\"></span><h4 class=\"subsection\">8.3.1 Inserting deadlines or schedules</h4>\n\n<p>The following commands allow you to quickly insert a deadline or to\nschedule an item:<a id=\"DOCF66\" href=\"https://orgmode.org/org.html#FOOT66\"><sup>66</sup></a>\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-d</kbd> (<code>org-deadline</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dd\"></span>\n<span id=\"index-org_002ddeadline\"></span>\n<span id=\"index-org_002dlog_002dredeadline\"></span>\n<p>Insert \u2018<samp>DEADLINE</samp>\u2019 keyword along with a stamp.  The insertion happens\nin the line directly following the headline.  Remove any \u2018<samp>CLOSED</samp>\u2019\ntimestamp .  When called with a prefix argument, also remove any\nexisting deadline from the entry.  Depending on the variable\n<code>org-log-redeadline</code>, take a note when changing an existing\ndeadline<a id=\"DOCF67\" href=\"https://orgmode.org/org.html#FOOT67\"><sup>67</sup></a>.\n</p>\n</dd>\n<dt><kbd>C-c C-s</kbd> (<code>org-schedule</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002ds\"></span>\n<span id=\"index-org_002dschedule\"></span>\n<span id=\"index-org_002dlog_002dreschedule\"></span>\n<p>Insert \u2018<samp>SCHEDULED</samp>\u2019 keyword along with a stamp.  The insertion\nhappens in the line directly following the headline.  Remove any\n\u2018<samp>CLOSED</samp>\u2019 timestamp.  When called with a prefix argument, also remove\nthe scheduling date from the entry.  Depending on the variable\n<code>org-log-reschedule</code>, take a note when changing an existing\nscheduling time<a id=\"DOCF68\" href=\"https://orgmode.org/org.html#FOOT68\"><sup>68</sup></a>.\n</p>\n</dd>\n<dt><kbd>C-c / d</kbd> (<code>org-check-deadlines</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-d\"></span>\n<span id=\"index-org_002dcheck_002ddeadlines\"></span>\n<span id=\"index-sparse-tree_002c-for-deadlines\"></span>\n<span id=\"index-org_002ddeadline_002dwarning_002ddays-1\"></span>\n<p>Create a sparse tree with all deadlines that are either past-due, or\nwhich will become due within <code>org-deadline-warning-days</code>.  With\n<kbd>C-u</kbd> prefix, show all deadlines in the file.  With\na numeric prefix, check that many days.  For example, <kbd>C-1 C-c / d</kbd> shows all deadlines due tomorrow.\n</p>\n</dd>\n<dt><kbd>C-c / b</kbd> (<code>org-check-before-date</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-b\"></span>\n<span id=\"index-org_002dcheck_002dbefore_002ddate\"></span>\n<p>Sparse tree for deadlines and scheduled items before a given date.\n</p>\n</dd>\n<dt><kbd>C-c / a</kbd> (<code>org-check-after-date</code>)</dt>\n<dd><span id=\"index-C_002dc-_002f-a\"></span>\n<span id=\"index-org_002dcheck_002dafter_002ddate\"></span>\n<p>Sparse tree for deadlines and scheduled items after a given date.\n</p></dd>\n</dl>\n\n<p>Note that <code>org-schedule</code> and <code>org-deadline</code> supports setting the date\nby indicating a relative time e.g., \u2018<samp>+1d</samp>\u2019 sets the date to the next\nday after today, and \u2018<samp>--1w</samp>\u2019 sets the date to the previous week before\nany current timestamp.\n</p>\n"}, {"id": "832Repeatedtasks", "content": "\n<span id=\"Repeated-tasks\"></span>\n<span id=\"Repeated-tasks-1\"></span><h4 class=\"subsection\">8.3.2 Repeated tasks</h4>\n\n<span id=\"index-tasks_002c-repeated\"></span>\n<span id=\"index-repeated-tasks\"></span>\n\n<p>Some tasks need to be repeated again and again.  Org mode helps to\norganize such tasks using a so-called repeater in a \u2018<samp>DEADLINE</samp>\u2019,\n\u2018<samp>SCHEDULED</samp>\u2019, or plain timestamps<a id=\"DOCF69\" href=\"https://orgmode.org/org.html#FOOT69\"><sup>69</sup></a>.  In the following example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** TODO Pay the rent\n   DEADLINE: &lt;2005-10-01 Sat +1m&gt;\n</pre></div>\n\n<p>the \u2018<samp>+1m</samp>\u2019 is a repeater; the intended interpretation is that the task\nhas a deadline on \u2018<samp>&lt;2005-10-01&gt;</samp>\u2019 and repeats itself every (one) month\nstarting from that time.  You can use yearly, monthly, weekly, daily\nand hourly repeat cookies by using the \u2018<samp>y</samp>\u2019, \u2018<samp>m</samp>\u2019, \u2018<samp>w</samp>\u2019, \u2018<samp>d</samp>\u2019 and \u2018<samp>h</samp>\u2019\nletters.  If you need both a repeater and a special warning period in\na deadline entry, the repeater should come first and the warning\nperiod last\n</p>\n<div class=\"example\">\n<pre class=\"example\">DEADLINE: &lt;2005-10-01 Sat +1m -3d&gt;\n</pre></div>\n\n\n<span id=\"index-org_002dtodo_002drepeat_002dto_002dstate\"></span>\n<p>Deadlines and scheduled items produce entries in the agenda when they\nare over-due, so it is important to be able to mark such an entry as\ndone once you have done so.  When you mark a \u2018<samp>DEADLINE</samp>\u2019 or\na \u2018<samp>SCHEDULED</samp>\u2019 with the TODO keyword \u2018<samp>DONE</samp>\u2019, it no longer produces\nentries in the agenda.  The problem with this is, however, is that\nthen also the <em>next</em> instance of the repeated entry will not be\nactive.  Org mode deals with this in the following way: when you try\nto mark such an entry as done, using <kbd>C-c C-t</kbd>, it shifts the\nbase date of the repeating timestamp by the repeater interval, and\nimmediately sets the entry state back to TODO<a id=\"DOCF70\" href=\"https://orgmode.org/org.html#FOOT70\"><sup>70</sup></a>.  In the example\nabove, setting the state to \u2018<samp>DONE</samp>\u2019 would actually switch the date like\nthis:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** TODO Pay the rent\n   DEADLINE: &lt;2005-11-01 Tue +1m&gt;\n</pre></div>\n\n<p>To mark a task with a repeater as DONE, use <kbd>C-- 1 C-c C-t</kbd>,\ni.e., <code>org-todo</code> with a numeric prefix argument of \u2018<samp>-1</samp>\u2019.\n</p>\n<span id=\"index-org_002dlog_002drepeat\"></span>\n<p>A timestamp<a id=\"DOCF71\" href=\"https://orgmode.org/org.html#FOOT71\"><sup>71</sup></a> is added under the deadline, to keep a record that\nyou actually acted on the previous instance of this deadline.\n</p>\n<p>As a consequence of shifting the base date, this entry is no longer\nvisible in the agenda when checking past dates, but all future\ninstances will be visible.\n</p>\n<p>With the \u2018<samp>+1m</samp>\u2019 cookie, the date shift is always exactly one month.  So\nif you have not paid the rent for three months, marking this entry\nDONE still keeps it as an overdue deadline.  Depending on the task,\nthis may not be the best way to handle it.  For example, if you forgot\nto call your father for 3 weeks, it does not make sense to call him\n3 times in a single day to make up for it.  Finally, there are tasks,\nlike changing batteries, which should always repeat a certain time\n<em>after</em> the last time you did it.  For these tasks, Org mode has\nspecial repeaters \u2018<samp>++</samp>\u2019 and \u2018<samp>.+</samp>\u2019.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">** TODO Call Father\n   DEADLINE: &lt;2008-02-10 Sun ++1w&gt;\n   Marking this DONE shifts the date by at least one week, but also\n   by as many weeks as it takes to get this date into the future.\n   However, it stays on a Sunday, even if you called and marked it\n   done on Saturday.\n\n** TODO Empty kitchen trash\n   DEADLINE: &lt;2008-02-08 Fri 20:00 ++1d&gt;\n   Marking this DONE shifts the date by at least one day, and also\n   by as many days as it takes to get the timestamp into the future.\n   Since there is a time in the timestamp, the next deadline in the\n   future will be on today's date if you complete the task before\n   20:00.\n\n** TODO Check the batteries in the smoke detectors\n   DEADLINE: &lt;2005-11-01 Tue .+1m&gt;\n   Marking this DONE shifts the date to one month after today.\n\n** TODO Wash my hands\n   DEADLINE: &lt;2019-04-05 08:00 Fri .+1h&gt;\n   Marking this DONE shifts the date to exactly one hour from now.\n</pre></div>\n\n<span id=\"index-org_002dagenda_002dskip_002dscheduled_002dif_002ddeadline_002dis_002dshown\"></span>\n<p>You may have both scheduling and deadline information for a specific\ntask.  If the repeater is set for the scheduling information only, you\nprobably want the repeater to be ignored after the deadline.  If so,\nset the variable <code>org-agenda-skip-scheduled-if-deadline-is-shown</code> to\n<code>repeated-after-deadline</code>.  However, any scheduling information\nwithout a repeater is no longer relevant once the task is done, and\nthus, removed upon repeating the task.  If you want both scheduling\nand deadline information to repeat after the same interval, set the\nsame repeater for both timestamps.\n</p>\n<p>An alternative to using a repeater is to create a number of copies of\na task subtree, with dates shifted in each copy.  The command\n<kbd>C-c C-x c</kbd> was created for this purpose; it is described in\n<a href=\"https://orgmode.org/org.html#Structure-Editing\">Structure Editing</a>.\n</p>\n"}, {"id": "84ClockingWorkTime", "content": "\n<span id=\"Clocking-Work-Time\"></span>\n<span id=\"Clocking-Work-Time-1\"></span><h3 class=\"section\">8.4 Clocking Work Time</h3>\n\n<span id=\"index-clocking-time\"></span>\n<span id=\"index-time-clocking\"></span>\n\n<p>Org mode allows you to clock the time you spend on specific tasks in\na project.  When you start working on an item, you can start the\nclock.  When you stop working on that task, or when you mark the task\ndone, the clock is stopped and the corresponding time interval is\nrecorded.  It also computes the total time spent on each\nsubtree<a id=\"DOCF72\" href=\"https://orgmode.org/org.html#FOOT72\"><sup>72</sup></a> of a project.  And it remembers a history or tasks\nrecently clocked, so that you can jump quickly between a number of\ntasks absorbing your time.\n</p>\n<p>To save the clock history across Emacs sessions, use:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-clock-persist 'history)\n(org-clock-persistence-insinuate)\n</pre></div>\n\n<span id=\"index-org_002dclock_002dpersist\"></span>\n<p>When you clock into a new task after resuming Emacs, the incomplete\nclock<a id=\"DOCF73\" href=\"https://orgmode.org/org.html#FOOT73\"><sup>73</sup></a> is retrieved (see <a href=\"https://orgmode.org/org.html#Resolving-idle-time-_00281_0029\">Resolving idle time (1)</a>) and you are\nprompted about what to do with it.\n</p>\n\n\n"}, {"id": "841Clockingcommands", "content": "\n<span id=\"Clocking-commands\"></span>\n<span id=\"Clocking-commands-1\"></span><h4 class=\"subsection\">8.4.1 Clocking commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-i</kbd> (<code>org-clock-in</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002di\"></span>\n<span id=\"index-org_002dclock_002din\"></span>\n<span id=\"index-org_002dclock_002dinto_002ddrawer\"></span>\n<span id=\"index-org_002dclock_002dcontinuously\"></span>\n<span id=\"index-LOG_005fINTO_005fDRAWER_002c-property-1\"></span>\n<p>Start the clock on the current item (clock-in).  This inserts the\n\u2018<samp>CLOCK</samp>\u2019 keyword together with a timestamp.  If this is not the first\nclocking of this item, the multiple \u2018<samp>CLOCK</samp>\u2019 lines are wrapped into\na \u2018<samp>LOGBOOK</samp>\u2019 drawer (see also the variable <code>org-clock-into-drawer</code>).\nYou can also overrule the setting of this variable for a subtree by\nsetting a \u2018<samp>CLOCK_INTO_DRAWER</samp>\u2019 or \u2018<samp>LOG_INTO_DRAWER</samp>\u2019 property.  When\ncalled with a <kbd>C-u</kbd> prefix argument, select the task from\na list of recently clocked tasks.  With two <kbd>C-u C-u</kbd>\nprefixes, clock into the task at point and mark it as the default\ntask; the default task is always be available with letter\n<kbd>d</kbd> when selecting a clocking task.  With three <kbd>C-u C-u C-u</kbd> prefixes, force continuous clocking by starting the\nclock when the last clock stopped.\n</p>\n<span id=\"index-CLOCK_005fMODELINE_005fTOTAL_002c-property\"></span>\n<span id=\"index-LAST_005fREPEAT_002c-property\"></span>\n<span id=\"index-org_002dclock_002dmode_002dline_002dtotal\"></span>\n<span id=\"index-org_002dclock_002din_002dprepare_002dhook\"></span>\n<p>While the clock is running, Org shows the current clocking time in\nthe mode line, along with the title of the task.  The clock time\nshown is all time ever clocked for this task and its children.  If\nthe task has an effort estimate (see <a href=\"https://orgmode.org/org.html#Effort-Estimates\">Effort Estimates</a>), the mode\nline displays the current clocking time against it<a id=\"DOCF74\" href=\"https://orgmode.org/org.html#FOOT74\"><sup>74</sup></a>.  If the\ntask is a repeating one (see <a href=\"https://orgmode.org/org.html#Repeated-tasks\">Repeated tasks</a>), show only the time\nsince the last reset of the task<a id=\"DOCF75\" href=\"https://orgmode.org/org.html#FOOT75\"><sup>75</sup></a>.  You can exercise more\ncontrol over show time with the \u2018<samp>CLOCK_MODELINE_TOTAL</samp>\u2019 property.  It\nmay have the values \u2018<samp>current</samp>\u2019 to show only the current clocking\ninstance, \u2018<samp>today</samp>\u2019 to show all time clocked on this tasks today\u2014see\nalso the variable <code>org-extend-today-until</code>, <code>all</code> to include all\ntime, or <code>auto</code> which is the default<a id=\"DOCF76\" href=\"https://orgmode.org/org.html#FOOT76\"><sup>76</sup></a>.  Clicking with\n<kbd>mouse-1</kbd> onto the mode line entry pops up a menu with\nclocking options.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-o</kbd> (<code>org-clock-out</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002do\"></span>\n<span id=\"index-org_002dclock_002dout\"></span>\n<span id=\"index-org_002dlog_002dnote_002dclock_002dout\"></span>\n<p>Stop the clock (clock-out).  This inserts another timestamp at the\nsame location where the clock was last started.  It also directly\ncomputes the resulting time in inserts it after the time range as\n\u2018<samp>=&gt;HH:MM</samp>\u2019.  See the variable <code>org-log-note-clock-out</code> for the\npossibility to record an additional note together with the clock-out\ntimestamp<a id=\"DOCF77\" href=\"https://orgmode.org/org.html#FOOT77\"><sup>77</sup></a>.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-x</kbd> (<code>org-clock-in-last</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dx\"></span>\n<span id=\"index-org_002dclock_002din_002dlast\"></span>\n<span id=\"index-org_002dclock_002dcontinuously-1\"></span>\n<p>Re-clock the last clocked task.  With one <kbd>C-u</kbd> prefix\nargument, select the task from the clock history.  With two\n<kbd>C-u</kbd> prefixes, force continuous clocking by starting the\nclock when the last clock stopped.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-e</kbd> (<code>org-clock-modify-effort-estimate</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002de\"></span>\n<span id=\"index-org_002dclock_002dmodify_002deffort_002destimate\"></span>\n<p>Update the effort estimate for the current clock task.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> or <kbd>C-c C-y</kbd> (<code>org-evaluate-time-range</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-14\"></span>\n<span id=\"index-C_002dc-C_002dy-1\"></span>\n<span id=\"index-org_002devaluate_002dtime_002drange-1\"></span>\n<p>Recompute the time interval after changing one of the timestamps.\nThis is only necessary if you edit the timestamps directly.  If you\nchange them with <kbd>S-&lt;cursor&gt;</kbd> keys, the update is\nautomatic.\n</p>\n</dd>\n<dt><kbd>C-S-<span class=\"key\">UP</span></kbd> (<code>org-clock-timestamps-up</code>)</dt>\n<dt><kbd>C-S-<span class=\"key\">DOWN</span></kbd> (<code>org-clock-timestamps-down</code>)</dt>\n<dd><span id=\"index-C_002dS_002dUP\"></span>\n<span id=\"index-org_002dclock_002dtimestamps_002dup\"></span>\n<span id=\"index-C_002dS_002dDOWN\"></span>\n<span id=\"index-org_002dclock_002dtimestamps_002ddown\"></span>\n<p>On CLOCK log lines, increase/decrease both timestamps so that the\nclock duration keeps the same value.\n</p>\n</dd>\n<dt><kbd>S-M-<span class=\"key\">UP</span></kbd> (<code>org-timestamp-up</code>)</dt>\n<dt><kbd>S-M-<span class=\"key\">DOWN</span></kbd> (<code>org-timestamp-down</code>)</dt>\n<dd><span id=\"index-S_002dM_002dUP\"></span>\n<span id=\"index-org_002dclock_002dtimestamp_002dup\"></span>\n<span id=\"index-S_002dM_002dDOWN\"></span>\n<span id=\"index-org_002dclock_002dtimestamp_002ddown\"></span>\n<p>On \u2018<samp>CLOCK</samp>\u2019 log lines, increase/decrease the timestamp at point and\nthe one of the previous, or the next, clock timestamp by the same\nduration.  For example, if you hit <kbd>S-M-<span class=\"key\">UP</span></kbd> to increase\na clocked-out timestamp by five minutes, then the clocked-in\ntimestamp of the next clock is increased by five minutes.\n</p>\n</dd>\n<dt><kbd>C-c C-t</kbd> (<code>org-todo</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dt-1\"></span>\n<span id=\"index-org_002dtodo\"></span>\n<p>Changing the TODO state of an item to DONE automatically stops the\nclock if it is running in this same item.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-q</kbd> (<code>org-clock-cancel</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dq\"></span>\n<span id=\"index-org_002dclock_002dcancel\"></span>\n<p>Cancel the current clock.  This is useful if a clock was started by\nmistake, or if you ended up working on something else.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-j</kbd> (<code>org-clock-goto</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dj\"></span>\n<span id=\"index-or_002dclock_002dgoto\"></span>\n<p>Jump to the headline of the currently clocked in task.  With\na <kbd>C-u</kbd> prefix argument, select the target task from a list\nof recently clocked tasks.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-d</kbd> (<code>org-clock-display</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dd\"></span>\n<span id=\"index-org_002dclock_002ddisplay\"></span>\n<span id=\"index-org_002dremove_002dhighlights_002dwith_002dchange-1\"></span>\n<p>Display time summaries for each subtree in the current buffer.  This\nputs overlays at the end of each headline, showing the total time\nrecorded under that heading, including the time of any subheadings.\nYou can use visibility cycling to study the tree, but the overlays\ndisappear when you change the buffer (see variable\n<code>org-remove-highlights-with-change</code>) or press <kbd>C-c C-c</kbd>.\n</p></dd>\n</dl>\n\n<p>The <kbd>l</kbd> key may be used in the agenda (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>) to show which tasks have been worked on or closed during\na day.\n</p>\n<p><strong>Important:</strong> note that both <code>org-clock-out</code> and <code>org-clock-in-last</code>\ncan have a global keybinding and do not modify the window disposition.\n</p>\n"}, {"id": "842Theclocktable", "content": "\n<span id=\"The-clock-table\"></span>\n<span id=\"The-clock-table-1\"></span><h4 class=\"subsection\">8.4.2 The clock table</h4>\n\n<span id=\"index-clocktable_002c-dynamic-block\"></span>\n<span id=\"index-report_002c-of-clocked-time\"></span>\n\n<p>Org mode can produce quite complex reports based on the time clocking\ninformation.  Such a report is called a <em>clock table</em>, because it is\nformatted as one or several Org tables.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-clock-report</code></dt>\n<dd><span id=\"index-C_002dc-C_002dx-x-1\"></span>\n<span id=\"index-org_002dclock_002dreport\"></span>\n<p>Insert or update a clock table.  When called with a prefix argument,\njump to the first clock table in the current document and update it.\nThe clock table includes archived trees.\n</p>\n<p>This command can be invoked by calling\n<code>org-dynamic-block-insert-dblock</code> (<kbd>C-c C-x x</kbd>) and\nselecting \u201cclocktable\u201d (see <a href=\"https://orgmode.org/org.html#Dynamic-Blocks\">Dynamic Blocks</a>).\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> or <kbd>C-c C-x C-u</kbd> (<code>org-dblock-update</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-15\"></span>\n<span id=\"index-C_002dc-C_002dx-C_002du-1\"></span>\n<span id=\"index-org_002ddblock_002dupdate-1\"></span>\n<p>Update dynamic block at point.  Point needs to be in the \u2018<samp>BEGIN</samp>\u2019\nline of the dynamic block.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-x C-u</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dx-C_002du-1\"></span>\n<p>Update all dynamic blocks (see <a href=\"https://orgmode.org/org.html#Dynamic-Blocks\">Dynamic Blocks</a>).  This is useful if\nyou have several clock table blocks in a buffer.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd></dt>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-clocktable-try-shift</code>)</dt>\n<dd><span id=\"index-S_002dLEFT-9\"></span>\n<span id=\"index-S_002dRIGHT-9\"></span>\n<span id=\"index-org_002dclocktable_002dtry_002dshift\"></span>\n<p>Shift the current \u2018<samp>:block</samp>\u2019 interval and update the table.  Point\nneeds to be in the \u2018<samp>#+BEGIN: clocktable</samp>\u2019 line for this command.  If\n\u2018<samp>:block</samp>\u2019 is \u2018<samp>today</samp>\u2019, it is shifted to \u2018<samp>today-1</samp>\u2019, etc.\n</p></dd>\n</dl>\n\n<p>Here is an example of the frame for a clock table as it is inserted\ninto the buffer by <code>org-clock-report</code>:\n</p>\n<span id=\"index-BEGIN-clocktable\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file\n#+END: clocktable\n</pre></div>\n\n<span id=\"index-org_002dclocktable_002ddefaults\"></span>\n<p>The \u2018<samp>#+BEGIN</samp>\u2019 line contains options to define the scope, structure,\nand formatting of the report.  Defaults for all these options can be\nconfigured in the variable <code>org-clocktable-defaults</code>.\n</p>\n<p>First there are options that determine which clock entries are to\nbe selected:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:maxlevel</samp>\u2019</dt>\n<dd><p>Maximum level depth to which times are listed in the table.  Clocks\nat deeper levels are summed into the upper level.\n</p>\n</dd>\n<dt>\u2018<samp>:scope</samp>\u2019</dt>\n<dd><p>The scope to consider.  This can be any of the following:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>nil</samp>\u2019</td><td>the current buffer or narrowed region</td></tr>\n<tr><td>\u2018<samp>file</samp>\u2019</td><td>the full current buffer</td></tr>\n<tr><td>\u2018<samp>subtree</samp>\u2019</td><td>the subtree where the clocktable is located</td></tr>\n<tr><td>\u2018<samp>treeN</samp>\u2019</td><td>the surrounding level N tree, for example \u2018<samp>tree3</samp>\u2019</td></tr>\n<tr><td>\u2018<samp>tree</samp>\u2019</td><td>the surrounding level 1 tree</td></tr>\n<tr><td>\u2018<samp>agenda</samp>\u2019</td><td>all agenda files</td></tr>\n<tr><td>\u2018<samp>(\"file\" ...)</samp>\u2019</td><td>scan these files</td></tr>\n<tr><td>\u2018<samp>FUNCTION</samp>\u2019</td><td>scan files returned by calling <var>FUNCTION</var> with no argument</td></tr>\n<tr><td>\u2018<samp>file-with-archives</samp>\u2019</td><td>current file and its archives</td></tr>\n<tr><td>\u2018<samp>agenda-with-archives</samp>\u2019</td><td>all agenda files, including archives</td></tr>\n</tbody></table>\n\n</dd>\n<dt>\u2018<samp>:block</samp>\u2019</dt>\n<dd><p>The time block to consider.  This block is specified either\nabsolutely, or relative to the current time and may be any of these\nformats:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>2007-12-31</samp>\u2019</td><td>New year eve 2007</td></tr>\n<tr><td>\u2018<samp>2007-12</samp>\u2019</td><td>December 2007</td></tr>\n<tr><td>\u2018<samp>2007-W50</samp>\u2019</td><td>ISO-week 50 in 2007</td></tr>\n<tr><td>\u2018<samp>2007-Q2</samp>\u2019</td><td>2nd quarter in 2007</td></tr>\n<tr><td>\u2018<samp>2007</samp>\u2019</td><td>the year 2007</td></tr>\n<tr><td>\u2018<samp>today</samp>\u2019, \u2018<samp>yesterday</samp>\u2019, \u2018<samp>today-N</samp>\u2019</td><td>a relative day</td></tr>\n<tr><td>\u2018<samp>thisweek</samp>\u2019, \u2018<samp>lastweek</samp>\u2019, \u2018<samp>thisweek-N</samp>\u2019</td><td>a relative week</td></tr>\n<tr><td>\u2018<samp>thismonth</samp>\u2019, \u2018<samp>lastmonth</samp>\u2019, \u2018<samp>thismonth-N</samp>\u2019</td><td>a relative month</td></tr>\n<tr><td>\u2018<samp>thisyear</samp>\u2019, \u2018<samp>lastyear</samp>\u2019, \u2018<samp>thisyear-N</samp>\u2019</td><td>a relative year</td></tr>\n<tr><td>\u2018<samp>untilnow</samp>\u2019<a id=\"DOCF78\" href=\"https://orgmode.org/org.html#FOOT78\"><sup>78</sup></a></td><td>all clocked time ever</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dclock_002ddisplay_002ddefault_002drange\"></span>\n<p>When this option is not set, Org falls back to the value in\n<code>org-clock-display-default-range</code>, which defaults to the current\nyear.\n</p>\n<p>Use <kbd>S-<span class=\"key\">LEFT</span></kbd> or <kbd>S-<span class=\"key\">RIGHT</span></kbd> to shift the time\ninterval.\n</p>\n</dd>\n<dt>\u2018<samp>:tstart</samp>\u2019</dt>\n<dd><p>A time string specifying when to start considering times.  Relative\ntimes like \u2018<samp>\"&lt;-2w&gt;\"</samp>\u2019 can also be used.  See <a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a> for relative time syntax.\n</p>\n</dd>\n<dt>\u2018<samp>:tend</samp>\u2019</dt>\n<dd><p>A time string specifying when to stop considering times.  Relative\ntimes like \u2018<samp>\"&lt;now&gt;\"</samp>\u2019 can also be used.  See <a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a> for relative time syntax.\n</p>\n</dd>\n<dt>\u2018<samp>:wstart</samp>\u2019</dt>\n<dd><p>The starting day of the week.  The default is 1 for Monday.\n</p>\n</dd>\n<dt>\u2018<samp>:mstart</samp>\u2019</dt>\n<dd><p>The starting day of the month.  The default is 1 for the first.\n</p>\n</dd>\n<dt>\u2018<samp>:step</samp>\u2019</dt>\n<dd><p>Set to \u2018<samp>day</samp>\u2019, \u2018<samp>week</samp>\u2019, \u2018<samp>semimonth</samp>\u2019, \u2018<samp>month</samp>\u2019, or \u2018<samp>year</samp>\u2019 to split the\ntable into chunks.  To use this, either \u2018<samp>:block</samp>\u2019, or \u2018<samp>:tstart</samp>\u2019 and\n\u2018<samp>:tend</samp>\u2019 are required.\n</p>\n</dd>\n<dt>\u2018<samp>:stepskip0</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, do not show steps that have zero time.\n</p>\n</dd>\n<dt>\u2018<samp>:fileskip0</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, do not show table sections from files which did not\ncontribute.\n</p>\n</dd>\n<dt>\u2018<samp>:match</samp>\u2019</dt>\n<dd><p>A tags match to select entries that should contribute.  See\n<a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a> for the match syntax.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dclocktable_002dwrite_002ddefault\"></span>\n<p>Then there are options that determine the formatting of the table.\nThere options are interpreted by the function\n<code>org-clocktable-write-default</code>, but you can specify your own function\nusing the \u2018<samp>:formatter</samp>\u2019 parameter.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:emphasize</samp>\u2019</dt>\n<dd><p>When non-<code>nil</code>, emphasize level one and level two items.\n</p>\n</dd>\n<dt>\u2018<samp>:lang</samp>\u2019</dt>\n<dd><p>Language<a id=\"DOCF79\" href=\"https://orgmode.org/org.html#FOOT79\"><sup>79</sup></a> to use for descriptive cells like \u201cTask\u201d.\n</p>\n</dd>\n<dt>\u2018<samp>:link</samp>\u2019</dt>\n<dd><p>Link the item headlines in the table to their origins.\n</p>\n</dd>\n<dt>\u2018<samp>:narrow</samp>\u2019</dt>\n<dd><p>An integer to limit the width of the headline column in the Org\ntable.  If you write it like \u2018<samp>50!</samp>\u2019, then the headline is also\nshortened in export.\n</p>\n</dd>\n<dt>\u2018<samp>:indent</samp>\u2019</dt>\n<dd><p>Indent each headline field according to its level.\n</p>\n</dd>\n<dt>\u2018<samp>:hidefiles</samp>\u2019</dt>\n<dd><p>Hide the file column when multiple files are used to produce the\ntable.\n</p>\n</dd>\n<dt>\u2018<samp>:tcolumns</samp>\u2019</dt>\n<dd><p>Number of columns to be used for times.  If this is smaller than\n\u2018<samp>:maxlevel</samp>\u2019, lower levels are lumped into one column.\n</p>\n</dd>\n<dt>\u2018<samp>:level</samp>\u2019</dt>\n<dd><p>Should a level number column be included?\n</p>\n</dd>\n<dt>\u2018<samp>:sort</samp>\u2019</dt>\n<dd><p>A cons cell containing the column to sort and a sorting type.  E.g.,\n\u2018<samp>:sort (1 . ?a)</samp>\u2019 sorts the first column alphabetically.\n</p>\n</dd>\n<dt>\u2018<samp>:compact</samp>\u2019</dt>\n<dd><p>Abbreviation for \u2018<samp>:level nil :indent t :narrow 40! :tcolumns 1</samp>\u2019.\nAll are overwritten except if there is an explicit \u2018<samp>:narrow</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>:timestamp</samp>\u2019</dt>\n<dd><p>A timestamp for the entry, when available.  Look for \u2018<samp>SCHEDULED</samp>\u2019,\n\u2018<samp>DEADLINE</samp>\u2019, \u2018<samp>TIMESTAMP</samp>\u2019 and \u2018<samp>TIMESTAMP_IA</samp>\u2019 special properties (see\n<a href=\"https://orgmode.org/org.html#Special-Properties\">Special Properties</a>), in this order.\n</p>\n</dd>\n<dt>\u2018<samp>:tags</samp>\u2019</dt>\n<dd><p>When this flag is non-<code>nil</code>, show the headline\u2019s tags.\n</p>\n</dd>\n<dt>\u2018<samp>:properties</samp>\u2019</dt>\n<dd><p>List of properties shown in the table.  Each property gets its own\ncolumn.\n</p>\n</dd>\n<dt>\u2018<samp>:inherit-props</samp>\u2019</dt>\n<dd><p>When this flag is non-<code>nil</code>, the values for \u2018<samp>:properties</samp>\u2019 are\ninherited.\n</p>\n</dd>\n<dt>\u2018<samp>:formula</samp>\u2019</dt>\n<dd><p>Content of a \u2018<samp>TBLFM</samp>\u2019 keyword to be added and evaluated.  As\na special case, \u2018<samp>:formula %</samp>\u2019 adds a column with % time.  If you do\nnot specify a formula here, any existing formula below the clock\ntable survives updates and is evaluated.\n</p>\n</dd>\n<dt>\u2018<samp>:formatter</samp>\u2019</dt>\n<dd><p>A function to format clock data and insert it into the buffer.\n</p></dd>\n</dl>\n\n<p>To get a clock summary of the current level 1 tree, for the current\nday, you could write:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t\n#+END: clocktable\n</pre></div>\n\n<p>To use a specific time range you could write<a id=\"DOCF80\" href=\"https://orgmode.org/org.html#FOOT80\"><sup>80</sup></a>\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :tstart \"&lt;2006-08-10 Thu 10:00&gt;\"\n                    :tend \"&lt;2006-08-10 Thu 12:00&gt;\"\n#+END: clocktable\n</pre></div>\n\n<p>A range starting a week ago and ending right now could be written as\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :tstart \"&lt;-1w&gt;\" :tend \"&lt;now&gt;\"\n#+END: clocktable\n</pre></div>\n\n<p>A summary of the current subtree with % times would be\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :scope subtree :link t :formula %\n#+END: clocktable\n</pre></div>\n\n<p>A horizontally compact representation of everything clocked during\nlast week would be\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: clocktable :scope agenda :block lastweek :compact t\n#+END: clocktable\n</pre></div>\n\n"}, {"id": "843Resolvingidletimeandcontinuousclocking", "content": "\n<span id=\"Resolving-idle-time\"></span>\n<span id=\"Resolving-idle-time-and-continuous-clocking\"></span><h4 class=\"subsection\">8.4.3 Resolving idle time and continuous clocking</h4>\n\n\n\n<span id=\"Resolving-idle-time-_00281_0029\"></span><span id=\"Resolving-idle-time-1\"></span><h4 class=\"subsubheading\">Resolving idle time</h4>\n\n<span id=\"index-resolve-idle-time\"></span>\n<span id=\"index-idle_002c-resolve_002c-dangling\"></span>\n\n<p>If you clock in on a work item, and then walk away from your\ncomputer\u2014perhaps to take a phone call\u2014you often need to\n\u201cresolve\u201d the time you were away by either subtracting it from the\ncurrent clock, or applying it to another one.\n</p>\n<span id=\"index-org_002dclock_002didle_002dtime\"></span>\n<span id=\"index-org_002dclock_002dx11idle_002dprogram_002dname\"></span>\n<p>By customizing the variable <code>org-clock-idle-time</code> to some integer,\nsuch as 10 or 15, Emacs can alert you when you get back to your\ncomputer after being idle for that many minutes<a id=\"DOCF81\" href=\"https://orgmode.org/org.html#FOOT81\"><sup>81</sup></a>, and ask what\nyou want to do with the idle time.  There will be a question waiting\nfor you when you get back, indicating how much idle time has passed\nconstantly updated with the current amount, as well as a set of\nchoices to correct the discrepancy:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>k</kbd></dt>\n<dd><span id=\"index-k\"></span>\n<p>To keep some or all of the minutes and stay clocked in, press\n<kbd>k</kbd>.  Org asks how many of the minutes to keep.  Press\n<kbd><span class=\"key\">RET</span></kbd> to keep them all, effectively changing nothing, or\nenter a number to keep that many minutes.\n</p>\n</dd>\n<dt><kbd>K</kbd></dt>\n<dd><span id=\"index-K\"></span>\n<p>If you use the shift key and press <kbd>K</kbd>, it keeps however\nmany minutes you request and then immediately clock out of that\ntask.  If you keep all of the minutes, this is the same as just\nclocking out of the current task.\n</p>\n</dd>\n<dt><kbd>s</kbd></dt>\n<dd><span id=\"index-s\"></span>\n<p>To keep none of the minutes, use <kbd>s</kbd> to subtract all the\naway time from the clock, and then check back in from the moment you\nreturned.\n</p>\n</dd>\n<dt><kbd>S</kbd></dt>\n<dd><span id=\"index-S\"></span>\n<p>To keep none of the minutes and just clock out at the start of the\naway time, use the shift key and press <kbd>S</kbd>.  Remember that\nusing shift always leave you clocked out, no matter which option you\nchoose.\n</p>\n</dd>\n<dt><kbd>C</kbd></dt>\n<dd><span id=\"index-C\"></span>\n<p>To cancel the clock altogether, use <kbd>C</kbd>.  Note that if\ninstead of canceling you subtract the away time, and the resulting\nclock amount is less than a minute, the clock is still canceled\nrather than cluttering up the log with an empty entry.\n</p></dd>\n</dl>\n\n<p>What if you subtracted those away minutes from the current clock, and\nnow want to apply them to a new clock?  Simply clock in to any task\nimmediately after the subtraction.  Org will notice that you have\nsubtracted time \u201con the books\u201d, so to speak, and will ask if you want\nto apply those minutes to the next task you clock in on.\n</p>\n<p>There is one other instance when this clock resolution magic occurs.\nSay you were clocked in and hacking away, and suddenly your cat chased\na mouse who scared a hamster that crashed into your UPS\u2019s power\nbutton!  You suddenly lose all your buffers, but thanks to auto-save\nyou still have your recent Org mode changes, including your last clock\nin.\n</p>\n<p>If you restart Emacs and clock into any task, Org will notice that you\nhave a dangling clock which was never clocked out from your last\nsession.  Using that clock\u2019s starting time as the beginning of the\nunaccounted-for period, Org will ask how you want to resolve that\ntime.  The logic and behavior is identical to dealing with away time\ndue to idleness; it is just happening due to a recovery event rather\nthan a set amount of idle time.\n</p>\n<p>You can also check all the files visited by your Org agenda for\ndangling clocks at any time using <kbd>M-x org-resolve-clocks <span class=\"key\">RET</span></kbd> (or <kbd>C-c C-x C-z</kbd>).\n</p>\n<span id=\"Continuous-clocking\"></span><span id=\"Continuous-clocking-1\"></span><h4 class=\"subsubheading\">Continuous clocking</h4>\n\n<span id=\"index-continuous-clocking\"></span>\n\n<span id=\"index-org_002dclock_002dcontinuously-2\"></span>\n<p>You may want to start clocking from the time when you clocked out the\nprevious task.  To enable this systematically, set\n<code>org-clock-continuously</code> to non-<code>nil</code>.  Each time you clock in, Org\nretrieves the clock-out time of the last clocked entry for this\nsession, and start the new clock from there.\n</p>\n<p>If you only want this from time to time, use three universal prefix\narguments with <code>org-clock-in</code> and two <kbd>C-u C-u</kbd> with\n<code>org-clock-in-last</code>.\n</p>\n<span id=\"Clocking-out-automatically-after-some-idle-time\"></span><span id=\"Clocking-out-automatically-after-some-idle-time-1\"></span><h4 class=\"subsubheading\">Clocking out automatically after some idle time</h4>\n\n<span id=\"index-auto-clocking-out-after-idle-time\"></span>\n\n<span id=\"index-org_002dclock_002dauto_002dclockout_002dtimer\"></span>\n<p>When you often forget to clock out before being idle and you don\u2019t\nwant to manually set the clocking time to take into account, you can\nset <code>org-clock-auto-clockout-timer</code> to a number of seconds and add\n\u2018<samp>(org-clock-auto-clockout-insinuate)</samp>\u2019 to your \u2018<samp>.emacs</samp>\u2019 file.\n</p>\n<p>When the clock is running and Emacs is idle for more than this number\nof seconds, the clock will be clocked out automatically.\n</p>\n<p>Use \u2018<samp>M-x org-clock-toggle-auto-clockout RET</samp>\u2019 to temporarily turn this\non or off.\n</p>\n"}, {"id": "85EffortEstimates", "content": "\n<span id=\"Effort-Estimates\"></span>\n<span id=\"Effort-Estimates-1\"></span><h3 class=\"section\">8.5 Effort Estimates</h3>\n\n<span id=\"index-effort-estimates\"></span>\n<span id=\"index-EFFORT_002c-property\"></span>\n<span id=\"index-org_002deffort_002dproperty\"></span>\n\n<p>If you want to plan your work in a very detailed way, or if you need\nto produce offers with quotations of the estimated work effort, you\nmay want to assign effort estimates to entries.  If you are also\nclocking your work, you may later want to compare the planned effort\nwith the actual working time, a great way to improve planning\nestimates.\n</p>\n<p>Effort estimates are stored in a special property \u2018<samp>EFFORT</samp>\u2019.  Multiple\nformats are supported, such as \u2018<samp>3:12</samp>\u2019, \u2018<samp>1:23:45</samp>\u2019, or \u2018<samp>1d3h5min</samp>\u2019; see\nthe file \u2018<samp>org-duration.el</samp>\u2019 for more detailed information about the\nformat.\n</p>\n<p>You can set the effort for an entry with the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x e</kbd>  (<code>org-set-effort</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-e\"></span>\n<span id=\"index-org_002dset_002deffort\"></span>\n<p>Set the effort estimate for the current entry.  With a prefix\nargument, set it to the next allowed value\u2014see below.  This\ncommand is also accessible from the agenda with the <kbd>e</kbd>\nkey.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-e</kbd> (<code>org-clock-modify-effort-estimate</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002de-1\"></span>\n<span id=\"index-org_002dclock_002dmodify_002deffort_002destimate-1\"></span>\n<p>Modify the effort estimate of the item currently being clocked.\n</p></dd>\n</dl>\n\n<p>Clearly the best way to work with effort estimates is through column\nview (see <a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>).  You should start by setting up discrete\nvalues for effort estimates, and a \u2018<samp>COLUMNS</samp>\u2019 format that displays\nthese values together with clock sums\u2014if you want to clock your\ntime.  For a specific buffer you can use:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00\n#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM\n</pre></div>\n\n<p><span id=\"index-org_002dglobal_002dproperties-1\"></span>\n<span id=\"index-org_002dcolumns_002ddefault_002dformat-1\"></span>\nor, even better, you can set up these values globally by customizing\nthe variables <code>org-global-properties</code> and\n<code>org-columns-default-format</code>.  In particular if you want to use this\nsetup also in the agenda, a global setup may be advised.\n</p>\n<p>The way to assign estimates to individual items is then to switch to\ncolumn mode, and to use <kbd>S-<span class=\"key\">RIGHT</span></kbd> and <kbd>S-<span class=\"key\">LEFT</span></kbd> to\nchange the value.  The values you enter are immediately summed up in\nthe hierarchy.  In the column next to it, any clocked time is\ndisplayed.\n</p>\n<span id=\"index-org_002dagenda_002dcolumns_002dadd_002dappointments_002dto_002deffort_002dsum\"></span>\n<p>If you switch to column view in the daily/weekly agenda, the effort\ncolumn summarizes the estimated work effort for each day<a id=\"DOCF82\" href=\"https://orgmode.org/org.html#FOOT82\"><sup>82</sup></a>, and\nyou can use this to find space in your schedule.  To get an overview\nof the entire part of the day that is committed, you can set the\noption <code>org-agenda-columns-add-appointments-to-effort-sum</code>.  The\nappointments on a day that take place over a specified time interval\nare then also added to the load estimate of the day.\n</p>\n<p>Effort estimates can be used in secondary agenda filtering that is\ntriggered with the <kbd>/</kbd> key in the agenda (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).  If you have these estimates defined consistently,\ntwo or three key presses narrow down the list to stuff that fits into\nan available time slot.\n</p>\n"}, {"id": "86TakingNoteswithaRelativeTimer", "content": "\n<span id=\"Timers\"></span>\n<span id=\"Taking-Notes-with-a-Relative-Timer\"></span><h3 class=\"section\">8.6 Taking Notes with a Relative Timer</h3>\n\n<span id=\"index-relative-timer\"></span>\n<span id=\"index-countdown-timer\"></span>\n\n<p>Org provides two types of timers.  There is a relative timer that\ncounts up, which can be useful when taking notes during, for example,\na meeting or a video viewing.  There is also a countdown timer.\n</p>\n<p>The relative and countdown are started with separate commands.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x 0</kbd> (<code>org-timer-start</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-0\"></span>\n<span id=\"index-org_002dtimer_002dstart\"></span>\n<p>Start or reset the relative timer.  By default, the timer is set\nto 0.  When called with a <kbd>C-u</kbd> prefix, prompt the user for\na starting offset.  If there is a timer string at point, this is\ntaken as the default, providing a convenient way to restart taking\nnotes after a break in the process.  When called with a double\nprefix argument <kbd>C-u C-u</kbd>, change all timer strings in the\nactive region by a certain amount.  This can be used to fix timer\nstrings if the timer was not started at exactly the right moment.\n</p>\n</dd>\n<dt><kbd>C-c C-x ;</kbd> (<code>org-timer-set-timer</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_003b\"></span>\n<span id=\"index-org_002dtimer_002dset_002dtimer\"></span>\n<span id=\"index-org_002dtimer_002ddefault_002dtimer\"></span>\n<p>Start a countdown timer.  The user is prompted for a duration.\n<code>org-timer-default-timer</code> sets the default countdown value.  Giving\na numeric prefix argument overrides this default value.  This\ncommand is available as <kbd>;</kbd> in agenda buffers.\n</p></dd>\n</dl>\n\n<p>Once started, relative and countdown timers are controlled with the\nsame commands.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x .</kbd> (<code>org-timer</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_002e\"></span>\n<span id=\"index-org_002dtimer\"></span>\n<p>Insert a relative time into the buffer.  The first time you use\nthis, the timer starts.  Using a prefix argument restarts it.\n</p>\n</dd>\n<dt><kbd>C-c C-x -</kbd> (<code>org-timer-item</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_002d\"></span>\n<span id=\"index-org_002dtimer_002ditem\"></span>\n<p>Insert a description list item with the current relative time.  With\na prefix argument, first reset the timer to 0.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">RET</span></kbd> (<code>org-insert-heading</code>)</dt>\n<dd><span id=\"index-M_002dRET-3\"></span>\n<span id=\"index-org_002dinsert_002dheading-1\"></span>\n<p>Once the timer list is started, you can also use <kbd>M-<span class=\"key\">RET</span></kbd> to\ninsert new timer items.\n</p>\n</dd>\n<dt><kbd>C-c C-x ,</kbd> (<code>org-timer-pause-or-continue</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_002c\"></span>\n<span id=\"index-org_002dtimer_002dpause_002dor_002dcontinue\"></span>\n<p>Pause the timer, or continue it if it is already paused.\n</p>\n</dd>\n<dt><kbd>C-c C-x _</kbd> (<code>org-timer-stop</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_005f\"></span>\n<span id=\"index-org_002dtimer_002dstop\"></span>\n<p>Stop the timer.  After this, you can only start a new timer, not\ncontinue the old one.  This command also removes the timer from the\nmode line.\n</p></dd>\n</dl>\n\n"}, {"id": "9RefilingandArchiving", "content": "\n<span id=\"Refiling-and-Archiving\"></span>\n<span id=\"Refiling-and-Archiving-1\"></span><h2 class=\"chapter\">9 Refiling and Archiving</h2>\n\n<span id=\"index-refiling-notes\"></span>\n<span id=\"index-copying-notes\"></span>\n<span id=\"index-archiving\"></span>\n\n<p>Once information is in the system, it may need to be moved around.\nOrg provides Refile, Copy and Archive commands for this.  Refile and\nCopy helps with moving and copying outlines.  Archiving helps to keep\nthe system compact and fast.\n</p>\n\n\n"}, {"id": "91RefileandCopy", "content": "\n<span id=\"Refile-and-Copy\"></span>\n<span id=\"Refile-and-Copy-1\"></span><h3 class=\"section\">9.1 Refile and Copy</h3>\n\n<span id=\"index-refiling-notes-1\"></span>\n<span id=\"index-copying-notes-1\"></span>\n\n<p>When reviewing the captured data, you may want to refile or to copy\nsome of the entries into a different list, for example into a project.\nCutting, finding the right location, and then pasting the note is\ncumbersome.  To simplify this process, you can use the following\nspecial command:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-w</kbd> (<code>org-refile</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dw-1\"></span>\n<span id=\"index-org_002drefile-1\"></span>\n<span id=\"index-org_002dreverse_002dnote_002dorder\"></span>\n<span id=\"index-org_002drefile_002dtargets\"></span>\n<span id=\"index-org_002drefile_002duse_002doutline_002dpath\"></span>\n<span id=\"index-org_002doutline_002dpath_002dcomplete_002din_002dsteps\"></span>\n<span id=\"index-org_002drefile_002dallow_002dcreating_002dparent_002dnodes\"></span>\n<span id=\"index-org_002dlog_002drefile\"></span>\n<p>Refile the entry or region at point.  This command offers possible\nlocations for refiling the entry and lets you select one with\ncompletion.  The item (or all items in the region) is filed below\nthe target heading as a subitem.  Depending on\n<code>org-reverse-note-order</code>, it is either the first or last subitem.\n</p>\n<p>By default, all level 1 headlines in the current buffer are\nconsidered to be targets, but you can have more complex definitions\nacross a number of files.  See the variable <code>org-refile-targets</code> for\ndetails.  If you would like to select a location via\na file-path-like completion along the outline path, see the\nvariables <code>org-refile-use-outline-path</code> and\n<code>org-outline-path-complete-in-steps</code>.  If you would like to be able\nto create new nodes as new parents for refiling on the fly, check\nthe variable <code>org-refile-allow-creating-parent-nodes</code>.  When the\nvariable <code>org-log-refile</code><a id=\"DOCF83\" href=\"https://orgmode.org/org.html#FOOT83\"><sup>83</sup></a> is set, a timestamp or a note is\nrecorded whenever an entry is refiled.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-w</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dw\"></span>\n<p>Use the refile interface to jump to a heading.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-c C-w</kbd> (<code>org-refile-goto-last-stored</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-C_002dc-C_002dw\"></span>\n<span id=\"index-org_002drefile_002dgoto_002dlast_002dstored\"></span>\n<p>Jump to the location where <code>org-refile</code> last moved a tree to.\n</p>\n</dd>\n<dt><kbd>C-2 C-c C-w</kbd></dt>\n<dd><span id=\"index-C_002d2-C_002dc-C_002dw\"></span>\n<p>Refile as the child of the item currently being clocked.\n</p>\n</dd>\n<dt><kbd>C-3 C-c C-w</kbd></dt>\n<dd><span id=\"index-C_002d3-C_002dc-C_002dw\"></span>\n<span id=\"index-org_002drefile_002dkeep\"></span>\n<p>Refile and keep the entry in place.  Also see <code>org-refile-keep</code> to\nmake this the default behavior, and beware that this may result in\nduplicated \u2018<samp>ID</samp>\u2019 properties.\n</p>\n</dd>\n<dt><kbd>C-0 C-c C-w</kbd> or <kbd>C-u C-u C-u C-c C-w</kbd> (<code>org-refile-cache-clear</code>)</dt>\n<dd><span id=\"index-C_002du-C_002du-C_002du-C_002dc-C_002dw\"></span>\n<span id=\"index-C_002d0-C_002dc-C_002dw\"></span>\n<span id=\"index-org_002drefile_002dcache_002dclear\"></span>\n<span id=\"index-org_002drefile_002duse_002dcache\"></span>\n<p>Clear the target cache.  Caching of refile targets can be turned on\nby setting <code>org-refile-use-cache</code>.  To make the command see new\npossible targets, you have to clear the cache with this command.\n</p>\n</dd>\n<dt><kbd>C-c M-w</kbd> (<code>org-refile-copy</code>)</dt>\n<dd><span id=\"index-C_002dc-M_002dw\"></span>\n<span id=\"index-org_002drefile_002dcopy\"></span>\n<p>Copying works like refiling, except that the original note is not\ndeleted.\n</p>\n</dd>\n<dt><kbd>C-c C-M-w</kbd> (<code>org-refile-reverse</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dM_002dw\"></span>\n<span id=\"index-org_002drefile_002dreverse\"></span>\n<p>Works like refiling, except that it temporarily toggles how the\nvalue of <code>org-reverse-note-order</code> applies to the current buffer.  So\nif <code>org-refile</code> would append the entry as the last entry under the\ntarget header, <code>org-refile-reverse</code> will prepend it as the first\nentry, and vice-versa.\n</p></dd>\n</dl>\n\n"}, {"id": "92Archiving", "content": "\n<span id=\"Archiving\"></span>\n<span id=\"Archiving-1\"></span><h3 class=\"section\">9.2 Archiving</h3>\n\n<span id=\"index-archiving-1\"></span>\n\n<p>When a project represented by a (sub)tree is finished, you may want to\nmove the tree out of the way and to stop it from contributing to the\nagenda.  Archiving is important to keep your working files compact and\nglobal searches like the construction of agenda views fast.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-a</kbd> (<code>org-archive-subtree-default</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002da\"></span>\n<span id=\"index-org_002darchive_002dsubtree_002ddefault\"></span>\n<span id=\"index-org_002darchive_002ddefault_002dcommand\"></span>\n<p>Archive the current entry using the command specified in the\nvariable <code>org-archive-default-command</code>.\n</p></dd>\n</dl>\n\n\n\n"}, {"id": "921Movingatreetoanarchivefile", "content": "\n<span id=\"Moving-subtrees\"></span>\n<span id=\"Moving-a-tree-to-an-archive-file\"></span><h4 class=\"subsection\">9.2.1 Moving a tree to an archive file</h4>\n\n<span id=\"index-external-archiving\"></span>\n\n<p>The most common archiving action is to move a project tree to another\nfile, the archive file.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-s</kbd> or short <kbd>C-c $</kbd> (<code>org-archive-subtree</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002ds\"></span>\n<span id=\"index-C_002dc-_0024\"></span>\n<span id=\"index-org_002darchive_002dsubtree\"></span>\n<span id=\"index-org_002darchive_002dlocation\"></span>\n<p>Archive the subtree starting at point position to the location given\nby <code>org-archive-location</code>.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-x C-s</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dx-C_002ds\"></span>\n<p>Check if any direct children of the current headline could be moved\nto the archive.  To do this, check each subtree for open TODO\nentries.  If none is found, the command offers to move it to the\narchive location.  If point is <em>not</em> on a headline when this command\nis invoked, check level 1 trees.\n</p>\n</dd>\n<dt><kbd>C-u C-u C-c C-x C-s</kbd></dt>\n<dd><span id=\"index-C_002du-C_002du-C_002dc-C_002dx-C_002ds\"></span>\n<p>As above, but check subtree for timestamps instead of TODO entries.\nThe command offers to archive the subtree if it <em>does</em> contain\na timestamp, and that timestamp is in the past.\n</p></dd>\n</dl>\n\n<span id=\"index-archive-locations\"></span>\n<p>The default archive location is a file in the same directory as the\ncurrent file, with the name derived by appending \u2018<samp>_archive</samp>\u2019 to the\ncurrent file name.  You can also choose what heading to file archived\nitems under, with the possibility to add them to a datetree in a file.\nFor information and examples on how to specify the file and the\nheading, see the documentation string of the variable\n<code>org-archive-location</code>.\n</p>\n<p>There is also an in-buffer option for setting this variable, for\nexample:\n</p>\n<span id=\"index-ARCHIVE_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+ARCHIVE: %s_done::\n</pre></div>\n\n\n<span id=\"index-ARCHIVE_002c-property-1\"></span>\n<p>If you would like to have a special archive location for a single\nentry or a (sub)tree, give the entry an \u2018<samp>ARCHIVE</samp>\u2019 property with the\nlocation as the value (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>).\n</p>\n<span id=\"index-org_002darchive_002dsave_002dcontext_002dinfo\"></span>\n<p>When a subtree is moved, it receives a number of special properties\nthat record context information like the file from where the entry\ncame, its outline path the archiving time etc.  Configure the variable\n<code>org-archive-save-context-info</code> to adjust the amount of information\nadded.\n</p>\n<span id=\"index-org_002darchive_002dsubtree_002dsave_002dfile_002dp\"></span>\n<p>When <code>org-archive-subtree-save-file-p</code> is non-<code>nil</code>, save the target\narchive buffer.\n</p>\n"}, {"id": "922Internalarchiving", "content": "\n<span id=\"Internal-archiving\"></span>\n<span id=\"Internal-archiving-1\"></span><h4 class=\"subsection\">9.2.2 Internal archiving</h4>\n\n<span id=\"index-ARCHIVE_002c-tag\"></span>\n<p>If you want to just switch off\u2014for agenda views\u2014certain subtrees\nwithout moving them to a different file, you can use the \u2018<samp>ARCHIVE</samp>\u2019\ntag.\n</p>\n<p>A headline that is marked with the \u2018<samp>ARCHIVE</samp>\u2019 tag (see <a href=\"https://orgmode.org/org.html#Tags\">Tags</a>) stays at\nits location in the outline tree, but behaves in the following way:\n</p>\n<ul>\n<li> <span id=\"index-org_002dcycle_002dopen_002darchived_002dtrees\"></span>\nIt does not open when you attempt to do so with a visibility cycling\ncommand (see <a href=\"https://orgmode.org/org.html#Visibility-Cycling\">Visibility Cycling</a>).  You can force cycling archived\nsubtrees with <kbd>C-<span class=\"key\">TAB</span></kbd>, or by setting the option\n<code>org-cycle-open-archived-trees</code>.  Also normal outline commands, like\n<code>outline-show-all</code>, open archived subtrees.\n\n</li><li> <span id=\"index-org_002dsparse_002dtree_002dopen_002darchived_002dtrees\"></span>\nDuring sparse tree construction (see <a href=\"https://orgmode.org/org.html#Sparse-Trees\">Sparse Trees</a>), matches in\narchived subtrees are not exposed, unless you configure the option\n<code>org-sparse-tree-open-archived-trees</code>.\n\n</li><li> <span id=\"index-org_002dagenda_002dskip_002darchived_002dtrees\"></span>\nDuring agenda view construction (see <a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>), the content of\narchived trees is ignored unless you configure the option\n<code>org-agenda-skip-archived-trees</code>, in which case these trees are\nalways included.  In the agenda you can press <kbd>v a</kbd> to get\narchives temporarily included.\n\n</li><li> <span id=\"index-org_002dexport_002dwith_002darchived_002dtrees\"></span>\nArchived trees are not exported (see <a href=\"https://orgmode.org/org.html#Exporting\">Exporting</a>), only the headline\nis.  Configure the details using the variable\n<code>org-export-with-archived-trees</code>.\n\n</li><li> <span id=\"index-org_002dcolumns_002dskip_002darchived_002dtrees\"></span>\nArchived trees are excluded from column view unless the variable\n<code>org-columns-skip-archived-trees</code> is configured to <code>nil</code>.\n</li></ul>\n\n<p>The following commands help manage the \u2018<samp>ARCHIVE</samp>\u2019 tag:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x a</kbd> (<code>org-toggle-archive-tag</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-a\"></span>\n<span id=\"index-org_002dtoggle_002darchive_002dtag\"></span>\n<p>Toggle the archive tag for the current headline.  When the tag is\nset, the headline changes to a shadowed face, and the subtree below\nit is hidden.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-x a</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dx-a\"></span>\n<p>Check if any direct children of the current headline should be\narchived.  To do this, check each subtree for open TODO entries.  If\nnone is found, the command offers to set the \u2018<samp>ARCHIVE</samp>\u2019 tag for the\nchild.  If point is <em>not</em> on a headline when this command is\ninvoked, check the level 1 trees.\n</p>\n</dd>\n<dt><kbd>C-c C-<span class=\"key\">TAB</span></kbd> (<code>org-force-cycle-archived</code>)</dt>\n<dd><span id=\"index-C_002dTAB\"></span>\n<p>Cycle a tree even if it is tagged with \u2018<samp>ARCHIVE</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>C-c C-x A</kbd> (<code>org-archive-to-archive-sibling</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-A\"></span>\n<span id=\"index-org_002darchive_002dto_002darchive_002dsibling\"></span>\n<p>Move the current entry to the <em>Archive Sibling</em>.  This is a sibling\nof the entry with the heading \u2018<samp>Archive</samp>\u2019 and the archive tag.  The\nentry becomes a child of that sibling and in this way retains a lot\nof its original context, including inherited tags and approximate\nposition in the outline.\n</p></dd>\n</dl>\n\n"}, {"id": "10CaptureandAttachments", "content": "\n<span id=\"Capture-and-Attachments\"></span>\n<span id=\"Capture-and-Attachments-1\"></span><h2 class=\"chapter\">10 Capture and Attachments</h2>\n\n<span id=\"index-capture\"></span>\n<span id=\"index-attachments\"></span>\n<span id=\"index-RSS-feeds\"></span>\n<span id=\"index-Atom-feeds\"></span>\n<span id=\"index-protocols_002c-for-external-access\"></span>\n\n<p>An important part of any organization system is the ability to quickly\ncapture new ideas and tasks, and to associate reference material with\nthem.  Org does this using a process called <em>capture</em>.  It also can\nstore files related to a task (<em>attachments</em>) in a special directory.\nFinally, it can parse RSS feeds for information.  To learn how to let\nexternal programs (for example a web browser) trigger Org to capture\nmaterial, see <a href=\"https://orgmode.org/org.html#Protocols\">Protocols</a>.\n</p>\n\n\n"}, {"id": "101Capture", "content": "\n<span id=\"Capture\"></span>\n<span id=\"Capture-1\"></span><h3 class=\"section\">10.1 Capture</h3>\n\n<span id=\"index-capture-1\"></span>\n\n<p>Capture lets you quickly store notes with little interruption of your\nwork flow.  Org\u2019s method for capturing new items is heavily inspired\nby John Wiegley\u2019s excellent Remember package.\n</p>\n\n\n"}, {"id": "1011Settingupcapture", "content": "\n<span id=\"Setting-up-capture\"></span>\n<span id=\"Setting-up-capture-1\"></span><h4 class=\"subsection\">10.1.1 Setting up capture</h4>\n\n<p>The following customization sets a default target file for notes.\n</p>\n<span id=\"index-org_002ddefault_002dnotes_002dfile\"></span>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-default-notes-file (concat org-directory \"/notes.org\"))\n</pre></div>\n\n<p>You may also define a global key for capturing new material (see\n<a href=\"https://orgmode.org/org.html#Activation\">Activation</a>).\n</p>\n"}, {"id": "1012Usingcapture", "content": "\n<span id=\"Using-capture\"></span>\n<span id=\"Using-capture-1\"></span><h4 class=\"subsection\">10.1.2 Using capture</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>M-x org-capture</kbd> (<code>org-capture</code>)</dt>\n<dd><span id=\"index-org_002dcapture-1\"></span>\n<span id=\"index-date-tree\"></span>\n<p>Display the capture templates menu.  If you have templates defined\n(see <a href=\"https://orgmode.org/org.html#Capture-templates\">Capture templates</a>), it offers these templates for selection or\nuse a new Org outline node as the default template.  It inserts the\ntemplate into the target file and switch to an indirect buffer\nnarrowed to this new node.  You may then insert the information you\nwant.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd> (<code>org-capture-finalize</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-_0028Capture-buffer_0029\"></span>\n<span id=\"index-org_002dcapture_002dfinalize\"></span>\n<p>Once you have finished entering information into the capture buffer,\n<kbd>C-c C-c</kbd> returns you to the window configuration before\nthe capture process, so that you can resume your work without\nfurther distraction.  When called with a prefix argument, finalize\nand then jump to the captured item.\n</p>\n</dd>\n<dt><kbd>C-c C-w</kbd> (<code>org-capture-refile</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dw-_0028Capture-buffer_0029\"></span>\n<span id=\"index-org_002dcapture_002drefile\"></span>\n<p>Finalize the capture process by refiling the note to a different\nplace (see <a href=\"https://orgmode.org/org.html#Refile-and-Copy\">Refile and Copy</a>).  Please realize that this is a normal\nrefiling command that will be executed\u2014so point position at the\nmoment you run this command is important.  If you have inserted\na tree with a parent and children, first move point back to the\nparent.  Any prefix argument given to this command is passed on to\nthe <code>org-refile</code> command.\n</p>\n</dd>\n<dt><kbd>C-c C-k</kbd> (<code>org-capture-kill</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dk-_0028Capture-buffer_0029\"></span>\n<span id=\"index-org_002dcapture_002dkill\"></span>\n<p>Abort the capture process and return to the previous state.\n</p></dd>\n</dl>\n\n<span id=\"index-k-c-_0028Agenda_0029\"></span>\n<p>You can also call <code>org-capture</code> in a special way from the agenda,\nusing the <kbd>k c</kbd> key combination.  With this access, any\ntimestamps inserted by the selected capture template defaults to the\ndate at point in the agenda, rather than to the current date.\n</p>\n<p>To find the locations of the last stored capture, use <code>org-capture</code>\nwith prefix commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-u M-x org-capture</kbd></dt>\n<dd><p>Visit the target location of a capture template.  You get to select\nthe template in the usual way.\n</p>\n</dd>\n<dt><kbd>C-u C-u M-x org-capture</kbd></dt>\n<dd><p>Visit the last stored capture item in its buffer.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dcapture_002dbookmark\"></span>\n<span id=\"index-org_002dcapture_002dlast_002dstored\"></span>\n<p>You can also jump to the bookmark <code>org-capture-last-stored</code>, which is\nautomatically created unless you set <code>org-capture-bookmark</code> to <code>nil</code>.\n</p>\n<p>To insert the capture at point in an Org buffer, call <code>org-capture</code>\nwith a <kbd>C-0</kbd> prefix argument.\n</p>\n"}, {"id": "1013Capturetemplates", "content": "\n<span id=\"Capture-templates\"></span>\n<span id=\"Capture-templates-1\"></span><h4 class=\"subsection\">10.1.3 Capture templates</h4>\n\n<span id=\"index-templates_002c-for-Capture\"></span>\n\n<p>You can use templates for different types of capture items, and for\ndifferent target locations.  The easiest way to create such templates\nis through the customize interface.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C</kbd></dt>\n<dd><span id=\"index-C-_0028Capture-menu\"></span>\n<span id=\"index-org_002dcapture_002dtemplates\"></span>\n<p>Customize the variable <code>org-capture-templates</code>.\n</p></dd>\n</dl>\n\n<p>Before we give the formal description of template definitions, let\u2019s\nlook at an example.  Say you would like to use one template to create\ngeneral TODO entries, and you want to put these entries under the\nheading \u2018<samp>Tasks</samp>\u2019 in your file \u2018<samp>~/org/gtd.org</samp>\u2019.  Also, a date tree in\nthe file \u2018<samp>journal.org</samp>\u2019 should capture journal entries.  A possible\nconfiguration would look like:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-capture-templates\n      '((\"t\" \"Todo\" entry (file+headline \"~/org/gtd.org\" \"Tasks\")\n         \"* TODO %?\\n  %i\\n  %a\")\n        (\"j\" \"Journal\" entry (file+datetree \"~/org/journal.org\")\n         \"* %?\\nEntered on %U\\n  %i\\n  %a\")))\n</pre></div>\n\n<p>If you then press <kbd>t</kbd> from the capture menu, Org will prepare\nthe template for you like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* TODO\n  [[file:LINK TO WHERE YOU INITIATED CAPTURE]]\n</pre></div>\n\n<p>During expansion of the template, \u2018<samp>%a</samp>\u2019 has been replaced by a link to\nthe location from where you called the capture command.  This can be\nextremely useful for deriving tasks from emails, for example.  You\nfill in the task definition, press <kbd>C-c C-c</kbd> and Org returns\nyou to the same place where you started the capture process.\n</p>\n<p>To define special keys to capture to a particular template without\ngoing through the interactive template selection, you can create your\nkey binding like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(define-key global-map (kbd \"C-c x\")\n  (lambda () (interactive) (org-capture nil \"x\")))\n</pre></div>\n\n\n\n"}, {"id": "10131Templateelements", "content": "\n<span id=\"Template-elements\"></span>\n<span id=\"Template-elements-1\"></span><h4 class=\"subsubsection\">10.1.3.1 Template elements</h4>\n\n<p>Now lets look at the elements of a template definition.  Each entry in\n<code>org-capture-templates</code> is a list with the following items:\n</p>\n<dl compact=\"compact\">\n<dt>keys</dt>\n<dd><p>The keys that selects the template, as a string, characters only,\nfor example \u2018<samp>\"a\"</samp>\u2019, for a template to be selected with a single key,\nor \u2018<samp>\"bt\"</samp>\u2019 for selection with two keys.  When using several keys,\nkeys using the same prefix key must be sequential in the list and\npreceded by a 2-element entry explaining the prefix key, for\nexample:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(\"b\" \"Templates for marking stuff to buy\")\n</pre></div>\n\n<p>If you do not define a template for the <kbd>C</kbd> key, this key\nopens the Customize buffer for this complex variable.\n</p>\n</dd>\n<dt>description</dt>\n<dd><p>A short string describing the template, shown during selection.\n</p>\n</dd>\n<dt>type</dt>\n<dd><p>The type of entry, a symbol.  Valid values are:\n</p>\n<dl compact=\"compact\">\n<dt><code>entry</code></dt>\n<dd><p>An Org mode node, with a headline.  Will be filed as the child of\nthe target entry or as a top-level entry.  The target file should\nbe an Org file.\n</p>\n</dd>\n<dt><code>item</code></dt>\n<dd><p>A plain list item, placed in the first plain list at the target\nlocation.  Again the target file should be an Org file.\n</p>\n</dd>\n<dt><code>checkitem</code></dt>\n<dd><p>A checkbox item.  This only differs from the plain list item by\nthe default template.\n</p>\n</dd>\n<dt><code>table-line</code></dt>\n<dd><p>A new line in the first table at the target location.  Where\nexactly the line will be inserted depends on the properties\n<code>:prepend</code> and <code>:table-line-pos</code> (see below).\n</p>\n</dd>\n<dt><code>plain</code></dt>\n<dd><p>Text to be inserted as it is.\n</p></dd>\n</dl>\n\n</dd>\n<dt>target</dt>\n<dd><span id=\"index-org_002ddefault_002dnotes_002dfile-1\"></span>\n<span id=\"index-org_002ddirectory\"></span>\n<p>Specification of where the captured item should be placed.  In Org\nfiles, targets usually define a node.  Entries will become children\nof this node.  Other types will be added to the table or list in the\nbody of this node.  Most target specifications contain a file name.\nIf that file name is the empty string, it defaults to\n<code>org-default-notes-file</code>.  A file can also be given as a variable or\nas a function called with no argument.  When an absolute path is not\nspecified for a target, it is taken as relative to <code>org-directory</code>.\n</p>\n<p>Valid values are:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>(file \"path/to/file\")</samp>\u2019</dt>\n<dd><p>Text will be placed at the beginning or end of that file.\n</p>\n</dd>\n<dt>\u2018<samp>(id \"id of existing org entry\")</samp>\u2019</dt>\n<dd><p>Filing as child of this entry, or in the body of the entry.\n</p>\n</dd>\n<dt>\u2018<samp>(file+headline \"filename\" \"node headline\")</samp>\u2019</dt>\n<dd><p>Fast configuration if the target heading is unique in the file.\n</p>\n</dd>\n<dt>\u2018<samp>(file+olp \"filename\" \"Level 1 heading\" \"Level 2\" ...)</samp>\u2019</dt>\n<dd><p>For non-unique headings, the full path is safer.\n</p>\n</dd>\n<dt>\u2018<samp>(file+regexp \"filename\" \"regexp to find location\")</samp>\u2019</dt>\n<dd><p>Use a regular expression to position point.\n</p>\n</dd>\n<dt>\u2018<samp>(file+olp+datetree \"filename\" [ \"Level 1 heading\" ...])</samp>\u2019</dt>\n<dd><p>This target<a id=\"DOCF84\" href=\"https://orgmode.org/org.html#FOOT84\"><sup>84</sup></a> creates a heading in a date tree<a id=\"DOCF85\" href=\"https://orgmode.org/org.html#FOOT85\"><sup>85</sup></a> for\ntoday\u2019s date.  If the optional outline path is given, the tree\nwill be built under the node it is pointing to, instead of at top\nlevel.  Check out the <code>:time-prompt</code> and <code>:tree-type</code> properties\nbelow for additional options.\n</p>\n</dd>\n<dt>\u2018<samp>(file+function \"filename\" function-finding-location)</samp>\u2019</dt>\n<dd><p>A function to find the right location in the file.\n</p>\n</dd>\n<dt>\u2018<samp>(clock)</samp>\u2019</dt>\n<dd><p>File to the entry that is currently being clocked.\n</p>\n</dd>\n<dt>\u2018<samp>(function function-finding-location)</samp>\u2019</dt>\n<dd><p>Most general way: write your own function which both visits the\nfile and moves point to the right location.\n</p></dd>\n</dl>\n\n</dd>\n<dt>template</dt>\n<dd><p>The template for creating the capture item.  If you leave this\nempty, an appropriate default template will be used.  Otherwise this\nis a string with escape codes, which will be replaced depending on\ntime and context of the capture call.  You may also get this\ntemplate string from a file<a id=\"DOCF86\" href=\"https://orgmode.org/org.html#FOOT86\"><sup>86</sup></a>, or dynamically, from a function\nusing either syntax:\n</p>\n<div class=\"example\">\n<pre class=\"example\">(file \"/path/to/template-file\")\n(function FUNCTION-RETURNING-THE-TEMPLATE)\n</pre></div>\n\n</dd>\n<dt>properties</dt>\n<dd><p>The rest of the entry is a property list of additional options.\nRecognized properties are:\n</p>\n<dl compact=\"compact\">\n<dt><code>:prepend</code></dt>\n<dd><p>Normally new captured information will be appended at the target\nlocation (last child, last table line, last list item, \u2026).\nSetting this property changes that.\n</p>\n</dd>\n<dt><code>:immediate-finish</code></dt>\n<dd><p>When set, do not offer to edit the information, just file it away\nimmediately.  This makes sense if the template only needs\ninformation that can be added automatically.\n</p>\n</dd>\n<dt><code>:jump-to-captured</code></dt>\n<dd><p>When set, jump to the captured entry when finished.\n</p>\n</dd>\n<dt><code>:empty-lines</code></dt>\n<dd><p>Set this to the number of lines to insert before and after the new\nitem.  Default 0, and the only other common value is 1.\n</p>\n</dd>\n<dt><code>:empty-lines-after</code></dt>\n<dd><p>Set this to the number of lines that should be inserted after the\nnew item.  Overrides <code>:empty-lines</code> for the number of lines\ninserted after.\n</p>\n</dd>\n<dt><code>:empty-lines-before</code></dt>\n<dd><p>Set this to the number of lines that should be inserted before the\nnew item.  Overrides <code>:empty-lines</code> for the number lines inserted\nbefore.\n</p>\n</dd>\n<dt><code>:clock-in</code></dt>\n<dd><p>Start the clock in this item.\n</p>\n</dd>\n<dt><code>:clock-keep</code></dt>\n<dd><p>Keep the clock running when filing the captured entry.\n</p>\n</dd>\n<dt><code>:clock-resume</code></dt>\n<dd><p>If starting the capture interrupted a clock, restart that clock\nwhen finished with the capture.  Note that <code>:clock-keep</code> has\nprecedence over <code>:clock-resume</code>.  When setting both to non-<code>nil</code>,\nthe current clock will run and the previous one will not be\nresumed.\n</p>\n</dd>\n<dt><code>:time-prompt</code></dt>\n<dd><p>Prompt for a date/time to be used for date/week trees and when\nfilling the template.  Without this property, capture uses the\ncurrent date and time.  Even if this property has not been set,\nyou can force the same behavior by calling <code>org-capture</code> with\na <kbd>C-1</kbd> prefix argument.\n</p>\n</dd>\n<dt><code>:tree-type</code></dt>\n<dd><p>Use <code>week</code> to make a week tree instead of the month-day tree,\ni.e., place the headings for each day under a heading with the\ncurrent ISO week.  Use <code>month</code> to group entries by month\nonly.  Default is to group entries by day.\n</p>\n</dd>\n<dt><code>:unnarrowed</code></dt>\n<dd><p>Do not narrow the target buffer, simply show the full buffer.\nDefault is to narrow it so that you only see the new material.\n</p>\n</dd>\n<dt><code>:table-line-pos</code></dt>\n<dd><p>Specification of the location in the table where the new line\nshould be inserted.  It should be a string like \u2018<samp>II-3</samp>\u2019 meaning\nthat the new line should become the third line before the second\nhorizontal separator line.\n</p>\n</dd>\n<dt><code>:kill-buffer</code></dt>\n<dd><p>If the target file was not yet visited when capture was invoked,\nkill the buffer again after capture is completed.\n</p>\n</dd>\n<dt><code>:no-save</code></dt>\n<dd><p>Do not save the target file after finishing the capture.\n</p>\n</dd>\n<dt>~:refile-targets</dt>\n<dd><p>Temporarily set <code>org-refile-targets</code> to the\nvalue of this property.\n</p></dd>\n</dl>\n</dd>\n</dl>\n\n"}, {"id": "10132Templateexpansion", "content": "\n<span id=\"Template-expansion\"></span>\n<span id=\"Template-expansion-1\"></span><h4 class=\"subsubsection\">10.1.3.2 Template expansion</h4>\n\n<p>In the template itself, special \u201c%-escapes\u201d<a id=\"DOCF87\" href=\"https://orgmode.org/org.html#FOOT87\"><sup>87</sup></a> allow dynamic\ninsertion of content.  The templates are expanded in the order given\nhere:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>%[FILE]</samp>\u2019</dt>\n<dd><p>Insert the contents of the file given by <var>FILE</var>.\n</p>\n</dd>\n<dt>\u2018<samp>%(EXP)</samp>\u2019</dt>\n<dd><p>Evaluate Elisp expression <var>EXP</var> and replace it with the\nresult.  The <var>EXP</var> form must return a string.  Only\nplaceholders pre-existing within the template, or introduced with\n\u2018<samp>%[file]</samp>\u2019, are expanded this way.  Since this happens after\nexpanding non-interactive \u201c%-escapes\u201d, those can be used to fill the\nexpression.\n</p>\n</dd>\n<dt>\u2018<samp>%&lt;FORMAT&gt;</samp>\u2019</dt>\n<dd><p>The result of format-time-string on the <var>FORMAT</var>\nspecification.\n</p>\n</dd>\n<dt>\u2018<samp>%t</samp>\u2019</dt>\n<dd><p>Timestamp, date only.\n</p>\n</dd>\n<dt>\u2018<samp>%T</samp>\u2019</dt>\n<dd><p>Timestamp, with date and time.\n</p>\n</dd>\n<dt>\u2018<samp>%u</samp>\u2019, \u2018<samp>%U</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%t</samp>\u2019, \u2018<samp>%T</samp>\u2019 above, but inactive timestamps.\n</p>\n</dd>\n<dt>\u2018<samp>%i</samp>\u2019</dt>\n<dd><p>Initial content, the region when capture is called while the region\nis active.  If there is text before \u2018<samp>%i</samp>\u2019 on the same line, such as\nindentation, and \u2018<samp>%i</samp>\u2019 is not inside a \u2018<samp>%(exp)</samp>\u2019 form, that prefix is\nadded before every line in the inserted text.\n</p>\n</dd>\n<dt>\u2018<samp>%a</samp>\u2019</dt>\n<dd><p>Annotation, normally the link created with <code>org-store-link</code>.\n</p>\n</dd>\n<dt>\u2018<samp>%A</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%a</samp>\u2019, but prompt for the description part.\n</p>\n</dd>\n<dt>\u2018<samp>%l</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%a</samp>\u2019, but only insert the literal link.\n</p>\n</dd>\n<dt>\u2018<samp>%L</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%l</samp>\u2019, but without brackets (the link content itself).\n</p>\n</dd>\n<dt>\u2018<samp>%c</samp>\u2019</dt>\n<dd><p>Current kill ring head.\n</p>\n</dd>\n<dt>\u2018<samp>%x</samp>\u2019</dt>\n<dd><p>Content of the X clipboard.\n</p>\n</dd>\n<dt>\u2018<samp>%k</samp>\u2019</dt>\n<dd><p>Title of the currently clocked task.\n</p>\n</dd>\n<dt>\u2018<samp>%K</samp>\u2019</dt>\n<dd><p>Link to the currently clocked task.\n</p>\n</dd>\n<dt>\u2018<samp>%n</samp>\u2019</dt>\n<dd><p>User name (taken from <code>user-full-name</code>).\n</p>\n</dd>\n<dt>\u2018<samp>%f</samp>\u2019</dt>\n<dd><p>File visited by current buffer when org-capture was called.\n</p>\n</dd>\n<dt>\u2018<samp>%F</samp>\u2019</dt>\n<dd><p>Full path of the file or directory visited by current buffer.\n</p>\n</dd>\n<dt>\u2018<samp>%:keyword</samp>\u2019</dt>\n<dd><p>Specific information for certain link types, see below.\n</p>\n</dd>\n<dt>\u2018<samp>%^g</samp>\u2019</dt>\n<dd><p>Prompt for tags, with completion on tags in target file.\n</p>\n</dd>\n<dt>\u2018<samp>%^G</samp>\u2019</dt>\n<dd><p>Prompt for tags, with completion all tags in all agenda files.\n</p>\n</dd>\n<dt>\u2018<samp>%^t</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%t</samp>\u2019, but prompt for date.  Similarly \u2018<samp>%^T</samp>\u2019, \u2018<samp>%^u</samp>\u2019, \u2018<samp>%^U</samp>\u2019.  You\nmay define a prompt like \u2018<samp>%^{Birthday}t</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>%^C</samp>\u2019</dt>\n<dd><p>Interactive selection of which kill or clip to use.\n</p>\n</dd>\n<dt>\u2018<samp>%^L</samp>\u2019</dt>\n<dd><p>Like \u2018<samp>%^C</samp>\u2019, but insert as link.\n</p>\n</dd>\n<dt>\u2018<samp>%^{PROP}p</samp>\u2019</dt>\n<dd><p>Prompt the user for a value for property <var>PROP</var>.  You may\nspecify a default value with \u2018<samp>%^{PROP|default}</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>%^{PROMPT}</samp>\u2019</dt>\n<dd><p>Prompt the user for a string and replace this sequence with it.  You\nmay specify a default value and a completion table with\n\u2018<samp>%^{prompt|default|completion2|completion3...}</samp>\u2019.  The arrow keys\naccess a prompt-specific history.\n</p>\n</dd>\n<dt>\u2018<samp>%\\N</samp>\u2019</dt>\n<dd><p>Insert the text entered at the <var>N</var>th \u2018<samp>%^{PROMPT}</samp>\u2019, where\n<var>N</var> is a number, starting from 1.\n</p>\n</dd>\n<dt>\u2018<samp>%?</samp>\u2019</dt>\n<dd><p>After completing the template, position point here.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dstore_002dlink_002dprops\"></span>\n<p>For specific link types, the following keywords are defined<a id=\"DOCF88\" href=\"https://orgmode.org/org.html#FOOT88\"><sup>88</sup></a>:\n</p>\n<span id=\"index-org_002dlink_002dfrom_002duser_002dregexp\"></span>\n<table>\n<thead><tr><th>Link type</th><th>Available keywords</th></tr></thead>\n<tbody><tr><td>bbdb</td><td>\u2018<samp>%:name</samp>\u2019, \u2018<samp>%:company</samp>\u2019</td></tr>\n<tr><td>irc</td><td>\u2018<samp>%:server</samp>\u2019, \u2018<samp>%:port</samp>\u2019, \u2018<samp>%:nick</samp>\u2019</td></tr>\n<tr><td>mh, rmail</td><td>\u2018<samp>%:type</samp>\u2019, \u2018<samp>%:subject</samp>\u2019, \u2018<samp>%:message-id</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>%:from</samp>\u2019, \u2018<samp>%:fromname</samp>\u2019, \u2018<samp>%:fromaddress</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>%:to</samp>\u2019, \u2018<samp>%:toname</samp>\u2019, \u2018<samp>%:toaddress</samp>\u2019</td></tr>\n<tr><td></td><td>\u2018<samp>%:date</samp>\u2019 (message date header field)</td></tr>\n<tr><td></td><td>\u2018<samp>%:date-timestamp</samp>\u2019 (date as active timestamp)</td></tr>\n<tr><td></td><td>\u2018<samp>%:date-timestamp-inactive</samp>\u2019 (date as inactive timestamp)</td></tr>\n<tr><td></td><td>\u2018<samp>%:fromto</samp>\u2019 (either \u201cto NAME\u201d or \u201cfrom NAME\u201d)<a id=\"DOCF89\" href=\"https://orgmode.org/org.html#FOOT89\"><sup>89</sup></a></td></tr>\n<tr><td>gnus</td><td>\u2018<samp>%:group</samp>\u2019, for messages also all email fields</td></tr>\n<tr><td>w3, w3m</td><td>\u2018<samp>%:url</samp>\u2019</td></tr>\n<tr><td>info</td><td>\u2018<samp>%:file</samp>\u2019, \u2018<samp>%:node</samp>\u2019</td></tr>\n<tr><td>calendar</td><td>\u2018<samp>%:date</samp>\u2019</td></tr>\n<tr><td>org-protocol</td><td>\u2018<samp>%:link</samp>\u2019, \u2018<samp>%:description</samp>\u2019, \u2018<samp>%:annotation</samp>\u2019</td></tr>\n</tbody></table>\n\n"}, {"id": "10133Templatesincontexts", "content": "\n<span id=\"Templates-in-contexts\"></span>\n<span id=\"Templates-in-contexts-1\"></span><h4 class=\"subsubsection\">10.1.3.3 Templates in contexts</h4>\n\n<span id=\"index-org_002dcapture_002dtemplates_002dcontexts\"></span>\n<p>To control whether a capture template should be accessible from\na specific context, you can customize\n<code>org-capture-templates-contexts</code>.  Let\u2019s say, for example, that you\nhave a capture template \u201cp\u201d for storing Gnus emails containing\npatches.  Then you would configure this option like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-capture-templates-contexts\n      '((\"p\" ((in-mode . \"message-mode\")))))\n</pre></div>\n\n<p>You can also tell that the command key <kbd>p</kbd> should refer to\nanother template.  In that case, add this command key like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-capture-templates-contexts\n      '((\"p\" \"q\" ((in-mode . \"message-mode\")))))\n</pre></div>\n\n<p>See the docstring of the variable for more information.\n</p>\n"}, {"id": "102Attachments", "content": "\n<span id=\"Attachments\"></span>\n<span id=\"Attachments-1\"></span><h3 class=\"section\">10.2 Attachments</h3>\n\n<span id=\"index-attachments-1\"></span>\n\n<p>It is often useful to associate reference material with an outline\nnode.  Small chunks of plain text can simply be stored in the subtree\nof a project.  Hyperlinks (see <a href=\"https://orgmode.org/org.html#Hyperlinks\">Hyperlinks</a>) can establish associations\nwith files that live elsewhere on a local, or even remote, computer,\nlike emails or source code files belonging to a project.\n</p>\n<p>Another method is <em>attachments</em>, which are files located in a\ndirectory belonging to an outline node.  Org uses directories either\nnamed by a unique ID of each entry, or by a \u2018<samp>DIR</samp>\u2019 property.\n</p>\n\n\n"}, {"id": "1021Attachmentdefaultsanddispatcher", "content": "\n<span id=\"Attachment-defaults-and-dispatcher\"></span>\n<span id=\"Attachment-defaults-and-dispatcher-1\"></span><h4 class=\"subsection\">10.2.1 Attachment defaults and dispatcher</h4>\n\n<p>By default, Org attach uses ID properties when adding attachments to\noutline nodes.  This makes working with attachments fully automated.\nThere is no decision needed for folder-name or location.  ID-based\ndirectories are by default located in the \u2018<samp>data/</samp>\u2019 directory, which\nlives in the same directory where your Org file lives<a id=\"DOCF90\" href=\"https://orgmode.org/org.html#FOOT90\"><sup>90</sup></a>.\n</p>\n<p>When attachments are made using <code>org-attach</code> a default tag \u2018<samp>ATTACH</samp>\u2019 is\nadded to the node that gets the attachments.\n</p>\n<p>For more control over the setup, see <a href=\"https://orgmode.org/org.html#Attachment-options\">Attachment options</a>.\n</p>\n<p>The following commands deal with attachments:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-a</kbd> (<code>org-attach</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da\"></span>\n<span id=\"index-org_002dattach\"></span>\n<p>The dispatcher for commands related to the attachment system.  After\nthese keys, a list of commands is displayed and you must press an\nadditional key to select a command:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>a</kbd> (<code>org-attach-attach</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-a\"></span>\n<span id=\"index-org_002dattach_002dattach\"></span>\n<span id=\"index-org_002dattach_002dmethod\"></span>\n<p>Select a file and move it into the task\u2019s attachment directory.\nThe file is copied, moved, or linked, depending on\n<code>org-attach-method</code>.  Note that hard links are not supported on\nall systems.\n</p>\n</dd>\n<dt><kbd>c</kbd>/<kbd>m</kbd>/<kbd>l</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002da-c\"></span>\n<span id=\"index-C_002dc-C_002da-m\"></span>\n<span id=\"index-C_002dc-C_002da-l\"></span>\n<p>Attach a file using the copy/move/link method.  Note that hard\nlinks are not supported on all systems.\n</p>\n</dd>\n<dt><kbd>b</kbd> (<code>org-attach-buffer</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-b\"></span>\n<span id=\"index-org_002dattach_002dbuffer\"></span>\n<p>Select a buffer and save it as a file in the task\u2019s attachment\ndirectory.\n</p>\n</dd>\n<dt><kbd>n</kbd> (<code>org-attach-new</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-n\"></span>\n<span id=\"index-org_002dattach_002dnew\"></span>\n<p>Create a new attachment as an Emacs buffer.\n</p>\n</dd>\n<dt><kbd>z</kbd> (<code>org-attach-sync</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-z\"></span>\n<span id=\"index-org_002dattach_002dsync\"></span>\n<p>Synchronize the current task with its attachment directory, in\ncase you added attachments yourself.\n</p>\n</dd>\n<dt><kbd>o</kbd> (<code>org-attach-open</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-o\"></span>\n<span id=\"index-org_002dattach_002dopen\"></span>\n<span id=\"index-org_002dfile_002dapps-1\"></span>\n<p>Open current task\u2019s attachment.  If there is more than one, prompt\nfor a file name first.  Opening follows the rules set by\n<code>org-file-apps</code>.  For more details, see the information on\nfollowing hyperlinks (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>).\n</p>\n</dd>\n<dt><kbd>O</kbd> (<code>org-attach-open-in-emacs</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-O\"></span>\n<span id=\"index-org_002dattach_002dopen_002din_002demacs\"></span>\n<p>Also open the attachment, but force opening the file in Emacs.\n</p>\n</dd>\n<dt><kbd>f</kbd> (<code>org-attach-reveal</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-f\"></span>\n<span id=\"index-org_002dattach_002dreveal\"></span>\n<p>Open the current task\u2019s attachment directory.\n</p>\n</dd>\n<dt><kbd>F</kbd> (<code>org-attach-reveal-in-emacs</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-F\"></span>\n<span id=\"index-org_002dattach_002dreveal_002din_002demacs\"></span>\n<p>Also open the directory, but force using Dired in Emacs.\n</p>\n</dd>\n<dt><kbd>d</kbd> (<code>org-attach-delete-one</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-d\"></span>\n<p>Select and delete a single attachment.\n</p>\n</dd>\n<dt><kbd>D</kbd> (<code>org-attach-delete-all</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-D\"></span>\n<p>Delete all of a task\u2019s attachments.  A safer way is to open the\ndirectory in Dired and delete from there.\n</p>\n</dd>\n<dt><kbd>s</kbd> (<code>org-attach-set-directory</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-s\"></span>\n<span id=\"index-DIR_002c-property\"></span>\n<p>Set a specific directory as the entry\u2019s attachment directory.\nThis works by putting the directory path into the \u2018<samp>DIR</samp>\u2019\nproperty.\n</p>\n</dd>\n<dt><kbd>S</kbd> (<code>org-attach-unset-directory</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-S\"></span>\n<span id=\"index-DIR_002c-property-1\"></span>\n<p>Remove the attachment directory.  This command removes the \u2018<samp>DIR</samp>\u2019\nproperty and asks the user to either move content inside that\nfolder, if an \u2018<samp>ID</samp>\u2019 property is set, delete the content, or to\nleave the attachment directory as is but no longer attached to the\noutline node.\n</p></dd>\n</dl>\n</dd>\n</dl>\n\n"}, {"id": "1022Attachmentoptions", "content": "\n<span id=\"Attachment-options\"></span>\n<span id=\"Attachment-options-1\"></span><h4 class=\"subsection\">10.2.2 Attachment options</h4>\n\n<p>There are a couple of options for attachments that are worth\nmentioning.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-attach-id-dir</code></dt>\n<dd><span id=\"index-org_002dattach_002did_002ddir\"></span>\n<p>The directory where attachments are stored when \u2018<samp>ID</samp>\u2019 is used as\nmethod.\n</p>\n</dd>\n<dt><code>org-attach-dir-relative</code></dt>\n<dd><span id=\"index-org_002dattach_002ddir_002drelative\"></span>\n<p>When setting the \u2018<samp>DIR</samp>\u2019 property on a node using <kbd>C-c C-a s</kbd>\n(<code>org-attach-set-directory</code>), absolute links are entered by default.\nThis option changes that to relative links.\n</p>\n</dd>\n<dt><code>org-attach-use-inheritance</code></dt>\n<dd><span id=\"index-org_002dattach_002duse_002dinheritance\"></span>\n<p>By default folders attached to an outline node are inherited from\nparents according to <code>org-use-property-inheritance</code>.  If one instead\nwant to set inheritance specifically for Org attach that can be done\nusing <code>org-attach-use-inheritance</code>.  Inheriting documents through\nthe node hierarchy makes a lot of sense in most cases.  Especially\nwhen using attachment links (see <a href=\"https://orgmode.org/org.html#Attachment-links\">Attachment links</a>).  The following\nexample shows one use case for attachment inheritance:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Chapter A ...\n  :PROPERTIES:\n  :DIR: Chapter A/\n  :END:\n** Introduction\nSome text\n\n#+NAME: Image 1\n[[attachment:image 1.jpg]]\n</pre></div>\n\n<p>Without inheritance one would not be able to resolve the link to\n\u2018<samp>image 1.jpg</samp>\u2019, since the link is inside a sub-heading to \u2018<samp>Chapter\n  A</samp>\u2019.\n</p>\n<p>Inheritance works the same way for both \u2018<samp>ID</samp>\u2019 and \u2018<samp>DIR</samp>\u2019 property.  If\nboth properties are defined on the same headline then \u2018<samp>DIR</samp>\u2019 takes\nprecedence.  This is also true if inheritance is enabled.  If \u2018<samp>DIR</samp>\u2019\nis inherited from a parent node in the outline, that property still\ntakes precedence over an \u2018<samp>ID</samp>\u2019 property defined on the node itself.\n</p>\n</dd>\n<dt><code>org-attach-method</code></dt>\n<dd><span id=\"index-org_002dattach_002dmethod-1\"></span>\n<p>When attaching files using the dispatcher <kbd>C-c C-a</kbd> it\ndefaults to copying files.  The behavior can be changed by\ncustomizing <code>org-attach-method</code>.  Options are Copy, Move/Rename,\nHard link or Symbolic link.\n</p>\n</dd>\n<dt><code>org-attach-preferred-new-method</code></dt>\n<dd><span id=\"index-org_002dattach_002dpreferred_002dnew_002dmethod\"></span>\n<p>This customization lets you choose the default way to attach to\nnodes without existing \u2018<samp>ID</samp>\u2019 and \u2018<samp>DIR</samp>\u2019 property.  It defaults to <code>id</code>\nbut can also be set to <code>dir</code>, <code>ask</code> or <code>nil</code>.\n</p>\n</dd>\n<dt><code>org-attach-archive-delete</code></dt>\n<dd><span id=\"index-org_002dattach_002darchive_002ddelete\"></span>\n<p>Configure this to determine if attachments should be deleted or not\nwhen a subtree that has attachments is archived.\n</p>\n</dd>\n<dt><code>org-attach-auto-tag</code></dt>\n<dd><span id=\"index-org_002dattach_002dauto_002dtag\"></span>\n<p>When attaching files to a heading it will be assigned a tag\naccording to what is set here.\n</p>\n</dd>\n<dt><code>org-attach-id-to-path-function-list</code></dt>\n<dd><span id=\"index-org_002dattach_002did_002dto_002dpath_002dfunction_002dlist\"></span>\n<p>When \u2018<samp>ID</samp>\u2019 is used for attachments, the ID is parsed into a part of a\ndirectory-path.  See <code>org-attach-id-uuid-folder-format</code> for the\ndefault function.  Define a new one and add it as first element in\n<code>org-attach-id-to-path-function-list</code> if you want the folder\nstructure in any other way.  All functions in this list will be\ntried when resolving existing ID\u2019s into paths, to maintain backward\ncompatibility with existing folders in your system.\n</p>\n</dd>\n<dt><code>org-attach-store-link-p</code></dt>\n<dd><span id=\"index-org_002dattach_002dstore_002dlink_002dp\"></span>\n<p>Stores a link to the file that is being attached.  The link is\nstored in <code>org-stored-links</code> for later insertion with <kbd>C-c C-l</kbd> (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>).  Depending on what option is set in\n<code>org-attach-store-link-p</code>, the link is stored to either the original\nlocation as a file link, the attachment location as an attachment\nlink or to the attachment location as a file link.\n</p>\n</dd>\n<dt><code>org-attach-commands</code></dt>\n<dd><span id=\"index-org_002dattach_002dcommands\"></span>\n<p>List of all commands used in the attach dispatcher.\n</p>\n</dd>\n<dt><code>org-attach-expert</code></dt>\n<dd><span id=\"index-org_002dattach_002dexpert\"></span>\n<p>Do not show the splash buffer with the attach dispatcher when\n<code>org-attach-expert</code> is set to non-<code>nil</code>.\n</p></dd>\n</dl>\n\n<p>See customization group \u2018<samp>Org Attach</samp>\u2019 if you want to change the\ndefault settings.\n</p>\n"}, {"id": "1023Attachmentlinks", "content": "\n<span id=\"Attachment-links\"></span>\n<span id=\"Attachment-links-1\"></span><h4 class=\"subsection\">10.2.3 Attachment links</h4>\n\n<p>Attached files and folders can be referenced using attachment links.\nThis makes it easy to refer to the material added to an outline node.\nEspecially if it was attached using the unique ID of the entry!\n</p>\n<div class=\"example\">\n<pre class=\"example\">* TODO Some task\n  :PROPERTIES:\n  :ID:       95d50008-c12e-479f-a4f2-cc0238205319\n  :END:\nSee attached document for more information: [[attachment:info.org]]\n</pre></div>\n\n<p>See <a href=\"https://orgmode.org/org.html#External-Links\">External Links</a> for more information about these links.\n</p>\n"}, {"id": "1024AutomaticversioncontrolwithGit", "content": "\n<span id=\"Automatic-version_002dcontrol-with-Git\"></span>\n<span id=\"Automatic-version_002dcontrol-with-Git-1\"></span><h4 class=\"subsection\">10.2.4 Automatic version-control with Git</h4>\n\n<p>If the directory attached to an outline node is a Git repository, Org\ncan be configured to automatically commit changes to that repository\nwhen it sees them.\n</p>\n<p>To make Org mode take care of versioning of attachments for you, add\nthe following to your Emacs config:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'org-attach-git)\n</pre></div>\n\n"}, {"id": "1025AttachfromDired", "content": "\n<span id=\"Attach-from-Dired\"></span>\n<span id=\"Attach-from-Dired-1\"></span><h4 class=\"subsection\">10.2.5 Attach from Dired</h4>\n\n<span id=\"index-attach-from-Dired\"></span>\n<span id=\"index-org_002dattach_002ddired_002dto_002dsubtree\"></span>\n\n<p>It is possible to attach files to a subtree from a Dired buffer.  To\nuse this feature, have one window in Dired mode containing the file(s)\nto be attached and another window with point in the subtree that shall\nget the attachments.  In the Dired window, with point on a file,\n<kbd>M-x org-attach-dired-to-subtree</kbd> attaches the file to the\nsubtree using the attachment method set by variable\n<code>org-attach-method</code>.  When files are marked in the Dired window then\nall marked files get attached.\n</p>\n<p>Add the following lines to the Emacs init file to have <kbd>C-c C-x a</kbd> attach files in Dired buffers.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'dired-mode-hook\n          (lambda ()\n            (define-key dired-mode-map\n              (kbd \"C-c C-x a\")\n              #'org-attach-dired-to-subtree)))\n</pre></div>\n\n<p>The following code shows how to bind the previous command with\na specific attachment method.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'dired-mode-hook\n          (lambda ()\n            (define-key dired-mode-map (kbd \"C-c C-x c\")\n              (lambda ()\n                (interactive)\n                (let ((org-attach-method 'cp))\n                  (call-interactively #'org-attach-dired-to-subtree))))))\n</pre></div>\n\n"}, {"id": "103RSSFeeds", "content": "\n<span id=\"RSS-Feeds\"></span>\n<span id=\"RSS-Feeds-1\"></span><h3 class=\"section\">10.3 RSS Feeds</h3>\n\n<span id=\"index-RSS-feeds-1\"></span>\n<span id=\"index-Atom-feeds-1\"></span>\n\n<p>Org can add and change entries based on information found in RSS feeds\nand Atom feeds.  You could use this to make a task out of each new\npodcast in a podcast feed.  Or you could use a phone-based\nnote-creating service on the web to import tasks into Org.  To access\nfeeds, configure the variable <code>org-feed-alist</code>.  The docstring of this\nvariable has detailed information.  With the following\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-feed-alist\n      '((\"Slashdot\"\n         \"https://rss.slashdot.org/Slashdot/slashdot\"\n         \"~/txt/org/feeds.org\" \"Slashdot Entries\")))\n</pre></div>\n\n<p>new items from the feed provided by \u2018<samp>rss.slashdot.org</samp>\u2019 result in new\nentries in the file \u2018<samp>~/org/feeds.org</samp>\u2019 under the heading \u2018<samp>Slashdot\nEntries</samp>\u2019, whenever the following command is used:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x g</kbd> (<code>org-feed-update-all</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-g\"></span>\n<p>Collect items from the feeds configured in <code>org-feed-alist</code> and act\nupon them.\n</p>\n</dd>\n<dt><kbd>C-c C-x G</kbd> (<code>org-feed-goto-inbox</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-G\"></span>\n<p>Prompt for a feed name and go to the inbox configured for this feed.\n</p></dd>\n</dl>\n\n<p>Under the same headline, Org creates a drawer \u2018<samp>FEEDSTATUS</samp>\u2019 in which it\nstores information about the status of items in the feed, to avoid\nadding the same item several times.\n</p>\n<p>For more information, including how to read atom feeds, see\n\u2018<samp>org-feed.el</samp>\u2019 and the docstring of <code>org-feed-alist</code>.\n</p>\n"}, {"id": "11AgendaViews", "content": "\n<span id=\"Agenda-Views\"></span>\n<span id=\"Agenda-Views-1\"></span><h2 class=\"chapter\">11 Agenda Views</h2>\n\n<span id=\"index-agenda-views\"></span>\n\n<p>Due to the way Org works, TODO items, time-stamped items, and tagged\nheadlines can be scattered throughout a file or even a number of\nfiles.  To get an overview of open action items, or of events that are\nimportant for a particular date, this information must be collected,\nsorted and displayed in an organized way.\n</p>\n<p>Org can select items based on various criteria and display them in\na separate buffer.  Six different view types are provided:\n</p>\n<ul>\n<li> an <em>agenda</em> that is like a calendar and shows information for\nspecific dates,\n\n</li><li> a <em>TODO list</em> that covers all unfinished action items,\n\n</li><li> a <em>match view</em>, showings headlines based on the tags, properties,\nand TODO state associated with them,\n\n</li><li> a <em>text search view</em> that shows all entries from multiple files that\ncontain specified keywords,\n\n</li><li> a <em>stuck projects view</em> showing projects that currently do not move\nalong, and\n\n</li><li> <em>custom views</em> that are special searches and combinations of\ndifferent views.\n</li></ul>\n\n<p>The extracted information is displayed in a special <em>agenda buffer</em>.\nThis buffer is read-only, but provides commands to visit the\ncorresponding locations in the original Org files, and even to edit\nthese files remotely.\n</p>\n<span id=\"index-org_002dagenda_002dskip_002dcomment_002dtrees\"></span>\n<span id=\"index-org_002dagenda_002dskip_002darchived_002dtrees-1\"></span>\n<span id=\"index-commented-entries_002c-in-agenda-views\"></span>\n<span id=\"index-archived-entries_002c-in-agenda-views\"></span>\n<p>By default, the report ignores commented (see <a href=\"https://orgmode.org/org.html#Comment-Lines\">Comment Lines</a>) and\narchived (see <a href=\"https://orgmode.org/org.html#Internal-archiving\">Internal archiving</a>) entries.  You can override this by\nsetting <code>org-agenda-skip-comment-trees</code> and\n<code>org-agenda-skip-archived-trees</code> to <code>nil</code>.\n</p>\n<span id=\"index-org_002dagenda_002dwindow_002dsetup\"></span>\n<span id=\"index-org_002dagenda_002drestore_002dwindows_002dafter_002dquit\"></span>\n<p>Two variables control how the agenda buffer is displayed and whether\nthe window configuration is restored when the agenda exits:\n<code>org-agenda-window-setup</code> and <code>org-agenda-restore-windows-after-quit</code>.\n</p>\n\n\n"}, {"id": "111AgendaFiles", "content": "\n<span id=\"Agenda-Files\"></span>\n<span id=\"Agenda-Files-1\"></span><h3 class=\"section\">11.1 Agenda Files</h3>\n\n<span id=\"index-agenda-files\"></span>\n<span id=\"index-files-for-agenda\"></span>\n\n<span id=\"index-org_002dagenda_002dfiles\"></span>\n<p>The information to be shown is normally collected from all <em>agenda\nfiles</em>, the files listed in the variable <code>org-agenda-files</code><a id=\"DOCF91\" href=\"https://orgmode.org/org.html#FOOT91\"><sup>91</sup></a>.\nIf a directory is part of this list, all files with the extension\n\u2018<samp>.org</samp>\u2019 in this directory are part of the list.\n</p>\n<p>Thus, even if you only work with a single Org file, that file should\nbe put into the list<a id=\"DOCF92\" href=\"https://orgmode.org/org.html#FOOT92\"><sup>92</sup></a>.  You can customize <code>org-agenda-files</code>,\nbut the easiest way to maintain it is through the following commands\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c [</kbd> (<code>org-agenda-file-to-front</code>)</dt>\n<dd><span id=\"index-C_002dc-_005b\"></span>\n<span id=\"index-org_002dagenda_002dfile_002dto_002dfront\"></span>\n<span id=\"index-files_002c-adding-to-agenda-list\"></span>\n<p>Add current file to the list of agenda files.  The file is added to\nthe front of the list.  If it was already in the list, it is moved\nto the front.  With a prefix argument, file is added/moved to the\nend.\n</p>\n</dd>\n<dt><kbd>C-c ]</kbd> (<code>org-remove-file</code>)</dt>\n<dd><span id=\"index-C_002dc-_005d\"></span>\n<span id=\"index-org_002dremove_002dfile\"></span>\n<p>Remove current file from the list of agenda files.\n</p>\n</dd>\n<dt><kbd>C-'</kbd></dt>\n<dt><kbd>C-,</kbd> (<code>org-cycle-agenda-files</code>)</dt>\n<dd><span id=\"index-C_002d_0027\"></span>\n<span id=\"index-C_002d_002c\"></span>\n<span id=\"index-org_002dcycle_002dagenda_002dfiles\"></span>\n<span id=\"index-cycling_002c-of-agenda-files\"></span>\n<p>Cycle through agenda file list, visiting one file after the other.\n</p>\n</dd>\n<dt><kbd>M-x org-switchb</kbd></dt>\n<dd><span id=\"index-org_002dswitchb\"></span>\n<p>Command to use an Iswitchb-like interface to switch to and between\nOrg buffers.\n</p></dd>\n</dl>\n\n<p>The Org menu contains the current list of files and can be used to\nvisit any of them.\n</p>\n<p>If you would like to focus the agenda temporarily on a file not in\nthis list, or on just one file in the list, or even on only a subtree\nin a file, then this can be done in different ways.  For a single\nagenda command, you may press <kbd>&lt;</kbd> once or several times in\nthe dispatcher (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).  To restrict the agenda\nscope for an extended period, use the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x &lt;</kbd> (<code>org-agenda-set-restriction-lock</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_003c\"></span>\n<span id=\"index-org_002dagenda_002dset_002drestriction_002dlock\"></span>\n<p>Restrict the agenda to the current subtree.  If there already is\na restriction at point, remove it.  When called with a universal\nprefix argument or with point before the first headline in a file,\nset the agenda scope to the entire file.  This restriction remains\nin effect until removed with <kbd>C-c C-x &gt;</kbd>, or by typing\neither <kbd>&lt;</kbd> or <kbd>&gt;</kbd> in the agenda dispatcher.  If\nthere is a window displaying an agenda view, the new restriction\ntakes effect immediately.\n</p>\n</dd>\n<dt><kbd>C-c C-x &gt;</kbd> (<code>org-agenda-remove-restriction-lock</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_003e\"></span>\n<span id=\"index-org_002dagenda_002dremove_002drestriction_002dlock\"></span>\n<p>Remove the restriction created by <kbd>C-c C-x &lt;</kbd>.\n</p></dd>\n</dl>\n\n<p>When working with Speedbar, you can use the following commands in the\nSpeedbar frame:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>&lt;</kbd> (<code>org-speedbar-set-agenda-restriction</code>)</dt>\n<dd><span id=\"index-org_002dspeedbar_002dset_002dagenda_002drestriction\"></span>\n<p>Restrict the agenda to the item\u2014either an Org file or a subtree in\nsuch a file\u2014at point in the Speedbar frame.  If agenda is already\nrestricted there, remove the restriction.  If there is a window\ndisplaying an agenda view, the new restriction takes effect\nimmediately.\n</p>\n</dd>\n<dt><kbd>&gt;</kbd> (<code>org-agenda-remove-restriction-lock</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dremove_002drestriction_002dlock-1\"></span>\n<p>Remove the restriction.\n</p></dd>\n</dl>\n\n"}, {"id": "112TheAgendaDispatcher", "content": "\n<span id=\"Agenda-Dispatcher\"></span>\n<span id=\"The-Agenda-Dispatcher\"></span><h3 class=\"section\">11.2 The Agenda Dispatcher</h3>\n\n<span id=\"index-agenda-dispatcher\"></span>\n<span id=\"index-dispatching-agenda-commands\"></span>\n\n<p>The views are created through a dispatcher, accessible with <kbd>M-x org-agenda</kbd>, or, better, bound to a global key (see <a href=\"https://orgmode.org/org.html#Activation\">Activation</a>).\nIt displays a menu from which an additional letter is required to\nexecute a command.  The dispatcher offers the following default\ncommands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>a</kbd></dt>\n<dd><p>Create the calendar-like agenda (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>).\n</p>\n</dd>\n<dt><kbd>t</kbd></dt>\n<dt><kbd>T</kbd></dt>\n<dd><p>Create a list of all TODO items (see <a href=\"https://orgmode.org/org.html#Global-TODO-list\">Global TODO list</a>).\n</p>\n</dd>\n<dt><kbd>m</kbd></dt>\n<dt><kbd>M</kbd></dt>\n<dd><p>Create a list of headlines matching a given expression (see\n<a href=\"https://orgmode.org/org.html#Matching-tags-and-properties\">Matching tags and properties</a>).\n</p>\n</dd>\n<dt><kbd>s</kbd></dt>\n<dd><span id=\"index-s-_0028Agenda-dispatcher_0029\"></span>\n<p>Create a list of entries selected by a boolean expression of\nkeywords and/or regular expressions that must or must not occur in\nthe entry.\n</p>\n</dd>\n<dt><kbd>/</kbd></dt>\n<dd><span id=\"index-_002f-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dagenda_002dtext_002dsearch_002dextra_002dfiles\"></span>\n<p>Search for a regular expression in all agenda files and additionally\nin the files listed in <code>org-agenda-text-search-extra-files</code>.  This\nuses the Emacs command <code>multi-occur</code>.  A prefix argument can be used\nto specify the number of context lines for each match, default is\n</p>\n</dd>\n<dt><kbd>#</kbd></dt>\n<dd><p>Create a list of stuck projects (see <a href=\"https://orgmode.org/org.html#Stuck-projects\">Stuck projects</a>).\n</p>\n</dd>\n<dt><kbd>!</kbd></dt>\n<dd><p>Configure the list of stuck projects (see <a href=\"https://orgmode.org/org.html#Stuck-projects\">Stuck projects</a>).\n</p>\n</dd>\n<dt><kbd>&lt;</kbd></dt>\n<dd><span id=\"index-_003c-_0028Agenda-dispatcher_0029\"></span>\n<p>Restrict an agenda command to the current buffer<a id=\"DOCF93\" href=\"https://orgmode.org/org.html#FOOT93\"><sup>93</sup></a>.  If\nnarrowing is in effect restrict to the narrowed part of the buffer.\nAfter pressing <kbd>&lt;</kbd>, you still need to press the character\nselecting the command.\n</p>\n</dd>\n<dt><kbd>&lt; &lt;</kbd></dt>\n<dd><span id=\"index-_003c-_003c-_0028Agenda-dispatcher_0029\"></span>\n<p>If there is an active region, restrict the following agenda command\nto the region.  Otherwise, restrict it to the current\nsubtree<a id=\"DOCF94\" href=\"https://orgmode.org/org.html#FOOT94\"><sup>94</sup></a>.  After pressing <kbd>&lt; &lt;</kbd>, you still need to\npress the character selecting the command.\n</p>\n</dd>\n<dt><kbd>*</kbd></dt>\n<dd><span id=\"index-_002a-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dagenda_002dsticky\"></span>\n<span id=\"index-org_002dtoggle_002dsticky_002dagenda\"></span>\n<p>Toggle sticky agenda views.  By default, Org maintains only a single\nagenda buffer and rebuilds it each time you change the view, to make\nsure everything is always up to date.  If you switch between views\noften and the build time bothers you, you can turn on sticky agenda\nbuffers (make this the default by customizing the variable\n<code>org-agenda-sticky</code>).  With sticky agendas, the dispatcher only\nswitches to the selected view, you need to update it by hand with\n<kbd>r</kbd> or <kbd>g</kbd>.  You can toggle sticky agenda view any\ntime with <code>org-toggle-sticky-agenda</code>.\n</p></dd>\n</dl>\n\n<p>You can also define custom commands that are accessible through the\ndispatcher, just like the default commands.  This includes the\npossibility to create extended agenda buffers that contain several\nblocks together, for example the weekly agenda, the global TODO list\nand a number of special tags matches.  See <a href=\"https://orgmode.org/org.html#Custom-Agenda-Views\">Custom Agenda Views</a>.\n</p>\n"}, {"id": "113TheBuiltinAgendaViews", "content": "\n<span id=\"Built_002din-Agenda-Views\"></span>\n<span id=\"The-Built_002din-Agenda-Views\"></span><h3 class=\"section\">11.3 The Built-in Agenda Views</h3>\n\n<p>In this section we describe the built-in views.\n</p>\n\n\n"}, {"id": "1131Weeklydailyagenda", "content": "\n<span id=\"Weekly_002fdaily-agenda\"></span>\n<span id=\"Weekly_002fdaily-agenda-1\"></span><h4 class=\"subsection\">11.3.1 Weekly/daily agenda</h4>\n\n<span id=\"index-agenda\"></span>\n<span id=\"index-weekly-agenda\"></span>\n<span id=\"index-daily-agenda\"></span>\n\n<p>The purpose of the weekly/daily <em>agenda</em> is to act like a page of\na paper agenda, showing all the tasks for the current week or day.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-agenda a</kbd> (<code>org-agenda-list</code>)</dt>\n<dd><span id=\"index-a-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dagenda_002dlist\"></span>\n<span id=\"index-org_002dagenda_002c-command\"></span>\n<p>Compile an agenda for the current week from a list of Org files.\nThe agenda shows the entries for each day.  With a numeric prefix\nargument<a id=\"DOCF95\" href=\"https://orgmode.org/org.html#FOOT95\"><sup>95</sup></a>\u2014like <kbd>C-u 2 1 M-x org-agenda a</kbd>\u2014you may\nset the number of days to be displayed.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dagenda_002dspan\"></span>\n<span id=\"index-org_002dagenda_002dstart_002dday\"></span>\n<span id=\"index-org_002dagenda_002dstart_002don_002dweekday\"></span>\n<p>The default number of days displayed in the agenda is set by the\nvariable <code>org-agenda-span</code>.  This variable can be set to any number of\ndays you want to see by default in the agenda, or to a span name, such\na <code>day</code>, <code>week</code>, <code>month</code> or <code>year</code>.  For weekly agendas, the default\nis to start on the previous Monday (see\n<code>org-agenda-start-on-weekday</code>).  You can also set the start date using\na date shift: \u2018<samp>(setq org-agenda-start-day \"+10d\")</samp>\u2019 starts the agenda\nten days from today in the future.\n</p>\n<p>Remote editing from the agenda buffer means, for example, that you can\nchange the dates of deadlines and appointments from the agenda buffer.\nThe commands available in the Agenda buffer are listed in <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>.\n</p>\n<span id=\"Calendar_002fDiary-integration\"></span><span id=\"Calendar_002fDiary-integration-1\"></span><h4 class=\"subsubheading\">Calendar/Diary integration</h4>\n\n<span id=\"index-calendar-integration\"></span>\n<span id=\"index-diary-integration\"></span>\n\n<p>Emacs contains the calendar and diary by Edward&nbsp;M.&nbsp;Reingold.  The\ncalendar displays a three-month calendar with holidays from different\ncountries and cultures.  The diary allows you to keep track of\nanniversaries, lunar phases, sunrise/set, recurrent appointments\n(weekly, monthly) and more.  In this way, it is quite complementary to\nOrg.  It can be very useful to combine output from Org with the diary.\n</p>\n<p>In order to include entries from the Emacs diary into Org mode\u2019s\nagenda, you only need to customize the variable\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-include-diary t)\n</pre></div>\n\n<p>After that, everything happens automatically.  All diary entries\nincluding holidays, anniversaries, etc., are included in the agenda\nbuffer created by Org mode.  <kbd><span class=\"key\">SPC</span></kbd>, <kbd><span class=\"key\">TAB</span></kbd>, and\n<kbd><span class=\"key\">RET</span></kbd> can be used from the agenda buffer to jump to the diary\nfile in order to edit existing diary entries.  The <kbd>i</kbd>\ncommand to insert new entries for the current date works in the agenda\nbuffer, as well as the commands <kbd>S</kbd>, <kbd>M</kbd>, and\n<kbd>C</kbd> to display Sunrise/Sunset times, show lunar phases and to\nconvert to other calendars, respectively.  <kbd>c</kbd> can be used to\nswitch back and forth between calendar and agenda.\n</p>\n<p>If you are using the diary only for expression entries and holidays,\nit is faster to not use the above setting, but instead to copy or even\nmove the entries into an Org file.  Org mode evaluates diary-style\nexpression entries, and does it faster because there is no overhead\nfor first creating the diary display.  Note that the expression\nentries must start at the left margin, no whitespace is allowed before\nthem, as seen in the following segment of an Org file:<a id=\"DOCF96\" href=\"https://orgmode.org/org.html#FOOT96\"><sup>96</sup></a>\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Holidays\n  :PROPERTIES:\n  :CATEGORY: Holiday\n  :END:\n%%(org-calendar-holiday)   ; special function for holiday names\n\n* Birthdays\n  :PROPERTIES:\n  :CATEGORY: Ann\n  :END:\n%%(org-anniversary 1956  5 14) Arthur Dent is %d years old\n%%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old\n</pre></div>\n\n<span id=\"Anniversaries-from-BBDB\"></span><span id=\"Anniversaries-from-BBDB-1\"></span><h4 class=\"subsubheading\">Anniversaries from BBDB</h4>\n\n<span id=\"index-BBDB_002c-anniversaries\"></span>\n<span id=\"index-anniversaries_002c-from-BBDB\"></span>\n\n<span id=\"index-org_002dbbdb_002danniversaries\"></span>\n<p>If you are using the Insidious Big Brother Database to store your\ncontacts, you very likely prefer to store anniversaries in BBDB rather\nthan in a separate Org or diary file.  Org supports this and can show\nBBDB anniversaries as part of the agenda.  All you need to do is to\nadd the following to one of your agenda files:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Anniversaries\n  :PROPERTIES:\n  :CATEGORY: Anniv\n  :END:\n%%(org-bbdb-anniversaries)\n</pre></div>\n\n<p>You can then go ahead and define anniversaries for a BBDB record.\nBasically, you need a field named \u2018<samp>anniversary</samp>\u2019 for the BBDB record\nwhich contains the date in the format \u2018<samp>YYYY-MM-DD</samp>\u2019 or \u2018<samp>MM-DD</samp>\u2019,\nfollowed by a space and the class of the anniversary (\u2018<samp>birthday</samp>\u2019,\n\u2018<samp>wedding</samp>\u2019, or a format string).  If you omit the class, it defaults to\n\u2018<samp>birthday</samp>\u2019.  Here are a few examples, the header for the file\n\u2018<samp>ol-bbdb.el</samp>\u2019 contains more detailed information.\n</p>\n<div class=\"example\">\n<pre class=\"example\">1973-06-22\n06-22\n1955-08-02 wedding\n2008-04-14 %s released version 6.01 of Org mode, %d years ago\n</pre></div>\n\n<p>After a change to BBDB, or for the first agenda display during an\nEmacs session, the agenda display suffers a short delay as Org updates\nits hash with anniversaries.  However, from then on things will be\nvery fast, much faster in fact than a long list of\n\u2018<samp>%%(diary-anniversary)</samp>\u2019 entries in an Org or Diary file.\n</p>\n<span id=\"index-org_002dbbdb_002danniversaries_002dfuture\"></span>\n<p>If you would like to see upcoming anniversaries with a bit of\nforewarning, you can use the following instead:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Anniversaries\n  :PROPERTIES:\n  :CATEGORY: Anniv\n  :END:\n%%(org-bbdb-anniversaries-future 3)\n</pre></div>\n\n<p>That will give you three days\u2019 warning: on the anniversary date itself\nand the two days prior.  The argument is optional: if omitted, it\ndefaults to 7.\n</p>\n<span id=\"Appointment-reminders\"></span><span id=\"Appointment-reminders-1\"></span><h4 class=\"subsubheading\">Appointment reminders</h4>\n\n<span id=\"index-appt_002eel\"></span>\n<span id=\"index-appointment-reminders\"></span>\n<span id=\"index-appointment-1\"></span>\n<span id=\"index-reminders\"></span>\n\n<span id=\"index-APPT_005fWARNTIME_002c-keyword\"></span>\n<p>Org can interact with Emacs appointments notification facility.  To\nadd the appointments of your agenda files, use the command\n<code>org-agenda-to-appt</code>.  This command lets you filter through the list\nof your appointments and add only those belonging to a specific\ncategory or matching a regular expression.  It also reads\na \u2018<samp>APPT_WARNTIME</samp>\u2019 property which overrides the value of\n<code>appt-message-warning-time</code> for this appointment.  See the docstring\nfor details.\n</p>\n"}, {"id": "1132TheglobalTODOlist", "content": "\n<span id=\"Global-TODO-list\"></span>\n<span id=\"The-global-TODO-list\"></span><h4 class=\"subsection\">11.3.2 The global TODO list</h4>\n\n<span id=\"index-global-TODO-list\"></span>\n<span id=\"index-TODO-list_002c-global\"></span>\n\n<p>The global TODO list contains all unfinished TODO items formatted and\ncollected into a single place.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-agenda t</kbd> (<code>org-todo-list</code>)</dt>\n<dd><span id=\"index-t-_0028Agenda-dispatcher_0029-1\"></span>\n<span id=\"index-org_002dtodo_002dlist\"></span>\n<p>Show the global TODO list.  This collects the TODO items from all\nagenda files (see <a href=\"https://orgmode.org/org.html#Agenda-Views\">Agenda Views</a>) into a single buffer.  By default,\nthis lists items with a state the is not a DONE state.  The buffer\nis in Agenda mode, so there are commands to examine and manipulate\nthe TODO entries directly from that buffer (see <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>).\n</p>\n</dd>\n<dt><kbd>M-x org-agenda T</kbd> (<code>org-todo-list</code>)</dt>\n<dd><span id=\"index-T-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dtodo_002dlist-1\"></span>\n<span id=\"index-TODO-keyword-matching\"></span>\n<span id=\"index-org_002dtodo_002dkeywords-2\"></span>\n<p>Like the above, but allows selection of a specific TODO keyword.\nYou can also do this by specifying a prefix argument to\n<kbd>t</kbd>.  You are prompted for a keyword, and you may also\nspecify several keywords by separating them with \u2018<samp>|</samp>\u2019 as the boolean\nOR operator.  With a numeric prefix, the Nth keyword in\n<code>org-todo-keywords</code> is selected.\n</p>\n<span id=\"index-r-1\"></span>\n<p>The <kbd>r</kbd> key in the agenda buffer regenerates it, and you\ncan give a prefix argument to this command to change the selected\nTODO keyword, for example <kbd>3 r</kbd>.  If you often need\na search for a specific keyword, define a custom command for it (see\n<a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).\n</p>\n<p>Matching specific TODO keywords can also be done as part of a tags\nsearch (see <a href=\"https://orgmode.org/org.html#Tag-Searches\">Tag Searches</a>).\n</p></dd>\n</dl>\n\n<p>Remote editing of TODO items means that you can change the state of\na TODO entry with a single key press.  The commands available in the\nTODO list are described in <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>.\n</p>\n<span id=\"index-sublevels_002c-inclusion-into-TODO-list\"></span>\n<p>Normally the global TODO list simply shows all headlines with TODO\nkeywords.  This list can become very long.  There are two ways to keep\nit more compact:\n</p>\n<ul>\n<li> <span id=\"index-org_002dagenda_002dtodo_002dignore_002dscheduled\"></span>\n<span id=\"index-org_002dagenda_002dtodo_002dignore_002ddeadlines\"></span>\n<span id=\"index-org_002dagenda_002dtodo_002dignore_002dtimestamp\"></span>\n<span id=\"index-org_002dagenda_002dtodo_002dignore_002dwith_002ddate\"></span>\nSome people view a TODO item that has been <em>scheduled</em> for execution\nor have a <em>deadline</em> (see <a href=\"https://orgmode.org/org.html#Timestamps\">Timestamps</a>) as no longer <em>open</em>.\nConfigure the variables <code>org-agenda-todo-ignore-scheduled</code> to\nexclude some or all scheduled items from the global TODO list,\n<code>org-agenda-todo-ignore-deadlines</code> to exclude some or all items with\na deadline set, <code>org-agenda-todo-ignore-timestamp</code> to exclude some\nor all items with an active timestamp other than a DEADLINE or\na SCHEDULED timestamp and/or <code>org-agenda-todo-ignore-with-date</code> to\nexclude items with at least one active timestamp.\n\n</li><li> <span id=\"index-org_002dagenda_002dtodo_002dlist_002dsublevels-1\"></span>\nTODO items may have sublevels to break up the task into subtasks.\nIn such cases it may be enough to list only the highest level TODO\nheadline and omit the sublevels from the global list.  Configure the\nvariable <code>org-agenda-todo-list-sublevels</code> to get this behavior.\n</li></ul>\n\n"}, {"id": "1133Matchingtagsandproperties", "content": "\n<span id=\"Matching-tags-and-properties\"></span>\n<span id=\"Matching-tags-and-properties-1\"></span><h4 class=\"subsection\">11.3.3 Matching tags and properties</h4>\n\n<span id=\"index-matching_002c-of-tags\"></span>\n<span id=\"index-matching_002c-of-properties\"></span>\n<span id=\"index-tags-view\"></span>\n<span id=\"index-match-view\"></span>\n\n<p>If headlines in the agenda files are marked with <em>tags</em> (see <a href=\"https://orgmode.org/org.html#Tags\">Tags</a>),\nor have properties (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>), you can select\nheadlines based on this metadata and collect them into an agenda\nbuffer.  The match syntax described here also applies when creating\nsparse trees with <kbd>C-c / m</kbd>.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-agenda m</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-m-_0028Agenda-dispatcher_0029-2\"></span>\n<span id=\"index-org_002dtags_002dview-2\"></span>\n<p>Produce a list of all headlines that match a given set of tags.  The\ncommand prompts for a selection criterion, which is a boolean logic\nexpression with tags, like \u2018<samp>+work+urgent-withboss</samp>\u2019 or \u2018<samp>work|home</samp>\u2019\n(see <a href=\"https://orgmode.org/org.html#Tags\">Tags</a>).  If you often need a specific search, define a custom\ncommand for it (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).\n</p>\n</dd>\n<dt><kbd>M-x org-agenda M</kbd> (<code>org-tags-view</code>)</dt>\n<dd><span id=\"index-M-_0028Agenda-dispatcher_0029-2\"></span>\n<span id=\"index-org_002dtags_002dview-3\"></span>\n<span id=\"index-org_002dtags_002dmatch_002dlist_002dsublevels-3\"></span>\n<span id=\"index-org_002dagenda_002dtags_002dtodo_002dhonor_002dignore_002doptions\"></span>\n<p>Like <kbd>m</kbd>, but only select headlines that are also TODO\nitems and force checking subitems (see the variable\n<code>org-tags-match-list-sublevels</code>).  To exclude scheduled/deadline\nitems, see the variable <code>org-agenda-tags-todo-honor-ignore-options</code>.\nMatching specific TODO keywords together with a tags match is also\npossible, see <a href=\"https://orgmode.org/org.html#Tag-Searches\">Tag Searches</a>.\n</p></dd>\n</dl>\n\n<p>The commands available in the tags list are described in <a href=\"https://orgmode.org/org.html#Agenda-Commands\">Agenda Commands</a>.\n</p>\n<span id=\"index-boolean-logic_002c-for-agenda-searches\"></span>\n<p>A search string can use Boolean operators \u2018<samp>&amp;</samp>\u2019 for AND and \u2018<samp>|</samp>\u2019 for OR.\n\u2018<samp>&amp;</samp>\u2019 binds more strongly than \u2018<samp>|</samp>\u2019.  Parentheses are currently not\nimplemented.  Each element in the search is either a tag, a regular\nexpression matching tags, or an expression like \u2018<samp>PROPERTY OPERATOR\nVALUE</samp>\u2019 with a comparison operator, accessing a property value.  Each\nelement may be preceded by \u2018<samp>-</samp>\u2019 to select against it, and \u2018<samp>+</samp>\u2019 is\nsyntactic sugar for positive selection.  The AND operator \u2018<samp>&amp;</samp>\u2019 is\noptional when \u2018<samp>+</samp>\u2019 or \u2018<samp>-</samp>\u2019 is present.  Here are some examples, using\nonly tags.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>+work-boss</samp>\u2019</dt>\n<dd><p>Select headlines tagged \u2018<samp>work</samp>\u2019, but discard those also tagged\n\u2018<samp>boss</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>work|laptop</samp>\u2019</dt>\n<dd><p>Selects lines tagged \u2018<samp>work</samp>\u2019 or \u2018<samp>laptop</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>work|laptop+night</samp>\u2019</dt>\n<dd><p>Like before, but require the \u2018<samp>laptop</samp>\u2019 lines to be tagged also\n\u2018<samp>night</samp>\u2019.\n</p></dd>\n</dl>\n\n<span id=\"index-regular-expressions_002c-with-tags-search\"></span>\n<p>Instead of a tag, you may also specify a regular expression enclosed\nin curly braces (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>).  For example,\n\u2018<samp>work+{^boss.*}</samp>\u2019 matches headlines that contain the tag \u2018<samp>:work:</samp>\u2019 and\nany tag <em>starting</em> with \u2018<samp>boss</samp>\u2019.\n</p>\n<span id=\"index-group-tags_002c-as-regular-expressions\"></span>\n<p>Group tags (see <a href=\"https://orgmode.org/org.html#Tag-Hierarchy\">Tag Hierarchy</a>) are expanded as regular expressions.\nE.g., if \u2018<samp>work</samp>\u2019 is a group tag for the group \u2018<samp>:work:lab:conf:</samp>\u2019, then\nsearching for \u2018<samp>work</samp>\u2019 also searches for \u2018<samp>{\\(?:work\\|lab\\|conf\\)}</samp>\u2019 and\nsearching for \u2018<samp>-work</samp>\u2019 searches for all headlines but those with one of\nthe tags in the group (i.e., \u2018<samp>-{\\(?:work\\|lab\\|conf\\)}</samp>\u2019).\n</p>\n<span id=\"index-TODO-keyword-matching_002c-with-tags-search\"></span>\n<span id=\"index-level_002c-for-tags_002fproperty-match\"></span>\n<span id=\"index-category_002c-for-tags_002fproperty-match\"></span>\n<span id=\"index-org_002dodd_002dlevels_002donly\"></span>\n<p>You may also test for properties (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>) at the\nsame time as matching tags.  The properties may be real properties, or\nspecial properties that represent other metadata (see <a href=\"https://orgmode.org/org.html#Special-Properties\">Special Properties</a>).  For example, the property \u2018<samp>TODO</samp>\u2019 represents the TODO\nkeyword of the entry.  Or, the property \u2018<samp>LEVEL</samp>\u2019 represents the level\nof an entry.  So searching \u2018<samp>+LEVEL=3+boss-TODO\u200b=\"DONE\"</samp>\u2019 lists all level\nthree headlines that have the tag \u2018<samp>boss</samp>\u2019 and are <em>not</em> marked with the\nTODO keyword \u2018<samp>DONE</samp>\u2019.  In buffers with <code>org-odd-levels-only</code> set,\n\u2018<samp>LEVEL</samp>\u2019 does not count the number of stars, but \u2018<samp>LEVEL=2</samp>\u2019 corresponds\nto 3 stars etc.\n</p>\n<p>Here are more examples:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>work+TODO\u200b=\"WAITING\"</samp>\u2019</dt>\n<dd><p>Select \u2018<samp>work</samp>\u2019-tagged TODO lines with the specific TODO keyword\n\u2018<samp>WAITING</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>work+TODO\u200b=\"WAITING\"|home+TODO\u200b=\"WAITING\"</samp>\u2019</dt>\n<dd><p>Waiting tasks both at work and at home.\n</p></dd>\n</dl>\n\n<p>When matching properties, a number of different operators can be used\nto test the value of a property.  Here is a complex example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">+work-boss+PRIORITY=\"A\"+Coffee=\"unlimited\"+Effort&lt;2\n         +With={Sarah\\|Denny}+SCHEDULED&gt;=\"&lt;2008-10-11&gt;\"\n</pre></div>\n\n<p>The type of comparison depends on how the comparison value is written:\n</p>\n<ul>\n<li> If the comparison value is a plain number, a numerical comparison is\ndone, and the allowed operators are \u2018<samp>&lt;</samp>\u2019, \u2018<samp>=</samp>\u2019, \u2018<samp>&gt;</samp>\u2019, \u2018<samp>&lt;=</samp>\u2019, \u2018<samp>&gt;=</samp>\u2019, and\n\u2018<samp>&lt;&gt;</samp>\u2019.\n\n</li><li> If the comparison value is enclosed in double-quotes, a string\ncomparison is done, and the same operators are allowed.\n\n</li><li> If the comparison value is enclosed in double-quotes <em>and</em> angular\nbrackets (like \u2018<samp>DEADLINE&lt;\u200b=\"&lt;2008-12-24 18:30&gt;\"</samp>\u2019), both values are\nassumed to be date/time specifications in the standard Org way, and\nthe comparison is done accordingly.  Valid values also include\n\u2018<samp>\"&lt;now&gt;\"</samp>\u2019 for now (including time), \u2018<samp>\"&lt;today&gt;\"</samp>\u2019, and \u2018<samp>\"&lt;tomorrow&gt;\"</samp>\u2019\nfor these days at 0:00 hours, i.e., without a time specification.\nYou can also use strings like \u2018<samp>\"&lt;+5d&gt;\"</samp>\u2019 or \u2018<samp>\"&lt;-2m&gt;\"</samp>\u2019 with units \u2018<samp>d</samp>\u2019,\n\u2018<samp>w</samp>\u2019, \u2018<samp>m</samp>\u2019, and \u2018<samp>y</samp>\u2019 for day, week, month, and year, respectively.\n\n</li><li> If the comparison value is enclosed in curly braces, a regexp match\nis performed, with \u2018<samp>=</samp>\u2019 meaning that the regexp matches the property\nvalue, and \u2018<samp>&lt;&gt;</samp>\u2019 meaning that it does not match.\n</li></ul>\n\n<p>So the search string in the example finds entries tagged \u2018<samp>work</samp>\u2019 but\nnot \u2018<samp>boss</samp>\u2019, which also have a priority value \u2018<samp>A</samp>\u2019, a \u2018<samp>Coffee</samp>\u2019 property\nwith the value \u2018<samp>unlimited</samp>\u2019, an \u2018<samp>EFFORT</samp>\u2019 property that is numerically\nsmaller than 2, a \u2018<samp>With</samp>\u2019 property that is matched by the regular\nexpression \u2018<samp>Sarah\\|Denny</samp>\u2019, and that are scheduled on or after October\n11, 2008.\n</p>\n<p>You can configure Org mode to use property inheritance during\na search, but beware that this can slow down searches considerably.\nSee <a href=\"https://orgmode.org/org.html#Property-Inheritance\">Property Inheritance</a>, for details.\n</p>\n<p>For backward compatibility, and also for typing speed, there is also\na different way to test TODO states in a search.  For this, terminate\nthe tags/property part of the search string (which may include several\nterms connected with \u2018<samp>|</samp>\u2019) with a \u2018<samp>/</samp>\u2019 and then specify a Boolean\nexpression just for TODO keywords.  The syntax is then similar to that\nfor tags, but should be applied with care: for example, a positive\nselection on several TODO keywords cannot meaningfully be combined\nwith boolean AND.  However, <em>negative selection</em> combined with AND can\nbe meaningful.  To make sure that only lines are checked that actually\nhave any TODO keyword (resulting in a speed-up), use <kbd>M-x org-agenda M</kbd>, or equivalently start the TODO part after the slash\nwith \u2018<samp>!</samp>\u2019.  Using <kbd>M-x org-agenda M</kbd> or \u2018<samp>/!</samp>\u2019 does not match\nTODO keywords in a DONE state.  Examples:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>work/WAITING</samp>\u2019</dt>\n<dd><p>Same as \u2018<samp>work+TODO\u200b=\"WAITING\"</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>work/!-WAITING-NEXT</samp>\u2019</dt>\n<dd><p>Select \u2018<samp>work</samp>\u2019-tagged TODO lines that are neither \u2018<samp>WAITING</samp>\u2019 nor\n\u2018<samp>NEXT</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>work/!+WAITING|+NEXT</samp>\u2019</dt>\n<dd><p>Select \u2018<samp>work</samp>\u2019-tagged TODO lines that are either \u2018<samp>WAITING</samp>\u2019 or \u2018<samp>NEXT</samp>\u2019.\n</p></dd>\n</dl>\n\n"}, {"id": "1134Searchview", "content": "\n<span id=\"Search-view\"></span>\n<span id=\"Search-view-1\"></span><h4 class=\"subsection\">11.3.4 Search view</h4>\n\n<span id=\"index-search-view\"></span>\n<span id=\"index-text-search\"></span>\n<span id=\"index-searching_002c-for-text\"></span>\n\n<p>This agenda view is a general text search facility for Org mode\nentries.  It is particularly useful to find notes.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-agenda s</kbd> (<code>org-search-view</code>)</dt>\n<dd><span id=\"index-s-_0028Agenda-dispatcher_0029-1\"></span>\n<span id=\"index-org_002dsearch_002dview\"></span>\n<p>This is a special search that lets you select entries by matching\na substring or specific words using a boolean logic.\n</p></dd>\n</dl>\n\n<p>For example, the search string \u2018<samp>computer equipment</samp>\u2019 matches entries\nthat contain \u2018<samp>computer equipment</samp>\u2019 as a substring, even if the two\nwords are separated by more space or a line break.\n</p>\n<p>Search view can also search for specific keywords in the entry, using\nBoolean logic.  The search string \u2018<samp>+computer\n+wifi -ethernet -{8\\.11[bg]}</samp>\u2019 matches note entries that contain the\nkeywords \u2018<samp>computer</samp>\u2019 and \u2018<samp>wifi</samp>\u2019, but not the keyword \u2018<samp>ethernet</samp>\u2019, and\nwhich are also not matched by the regular expression \u2018<samp>8\\.11[bg]</samp>\u2019,\nmeaning to exclude both \u2018<samp>8.11b</samp>\u2019 and \u2018<samp>8.11g</samp>\u2019.  The first \u2018<samp>+</samp>\u2019 is\nnecessary to turn on boolean search, other \u2018<samp>+</samp>\u2019 characters are\noptional.  For more details, see the docstring of the command\n<code>org-search-view</code>.\n</p>\n<p>You can incrementally and conveniently adjust a boolean search from\nthe agenda search view with the following keys\n</p>\n<table>\n<tbody><tr><td width=\"10%\"><kbd>[</kbd></td><td width=\"60%\">Add a positive search word</td></tr>\n<tr><td width=\"10%\"><kbd>]</kbd></td><td width=\"60%\">Add a negative search word</td></tr>\n<tr><td width=\"10%\"><kbd>{</kbd></td><td width=\"60%\">Add a positive regular expression</td></tr>\n<tr><td width=\"10%\"><kbd>}</kbd></td><td width=\"60%\">Add a negative regular expression</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dagenda_002dtext_002dsearch_002dextra_002dfiles-1\"></span>\n<p>Note that in addition to the agenda files, this command also searches\nthe files listed in <code>org-agenda-text-search-extra-files</code>.\n</p>\n"}, {"id": "1135Stuckprojects", "content": "\n<span id=\"Stuck-projects\"></span>\n<span id=\"Stuck-projects-1\"></span><h4 class=\"subsection\">11.3.5 Stuck projects</h4>\n\n<span id=\"index-GTD_002c-Getting-Things-Done\"></span>\n\n<p>If you are following a system like David Allen\u2019s GTD to organize your\nwork, one of the \u201cduties\u201d you have is a regular review to make sure\nthat all projects move along.  A <em>stuck</em> project is a project that has\nno defined next actions, so it never shows up in the TODO lists Org\nmode produces.  During the review, you need to identify such projects\nand define next actions for them.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-agenda #</kbd> (<code>org-agenda-list-stuck-projects</code>)</dt>\n<dd><span id=\"index-_0023-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dagenda_002dlist_002dstuck_002dprojects\"></span>\n<p>List projects that are stuck.\n</p>\n</dd>\n<dt><kbd>M-x org-agenda !</kbd></dt>\n<dd><span id=\"index-_0021-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dstuck_002dprojects\"></span>\n<p>Customize the variable <code>org-stuck-projects</code> to define what a stuck\nproject is and how to find it.\n</p></dd>\n</dl>\n\n<p>You almost certainly need to configure this view before it works for\nyou.  The built-in default assumes that all your projects are level-2\nheadlines, and that a project is not stuck if it has at least one\nentry marked with a TODO keyword \u2018<samp>TODO</samp>\u2019 or \u2018<samp>NEXT</samp>\u2019 or \u2018<samp>NEXTACTION</samp>\u2019.\n</p>\n<p>Let\u2019s assume that you, in your own way of using Org mode, identify\nprojects with a tag \u2018<samp>:PROJECT:</samp>\u2019, and that you use a TODO keyword\n\u2018<samp>MAYBE</samp>\u2019 to indicate a project that should not be considered yet.\nLet\u2019s further assume that the TODO keyword \u2018<samp>DONE</samp>\u2019 marks finished\nprojects, and that \u2018<samp>NEXT</samp>\u2019 and \u2018<samp>TODO</samp>\u2019 indicate next actions.  The tag\n\u2018<samp>:@shop:</samp>\u2019 indicates shopping and is a next action even without the\nNEXT tag.  Finally, if the project contains the special word \u2018<samp>IGNORE</samp>\u2019\nanywhere, it should not be listed either.  In this case you would\nstart by identifying eligible projects with a tags/TODO match (see\n<a href=\"https://orgmode.org/org.html#Tag-Searches\">Tag Searches</a>) \u2018<samp>+PROJECT/-MAYBE-DONE</samp>\u2019, and then check for \u2018<samp>TODO</samp>\u2019,\n\u2018<samp>NEXT</samp>\u2019, \u2018<samp>@shop</samp>\u2019, and \u2018<samp>IGNORE</samp>\u2019 in the subtree to identify projects that\nare not stuck.  The correct customization for this is:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-stuck-projects\n      '(\"+PROJECT/-MAYBE-DONE\" (\"NEXT\" \"TODO\") (\"@shop\")\n        \"\\\\&lt;IGNORE\\\\&gt;\"))\n</pre></div>\n\n<p>Note that if a project is identified as non-stuck, the subtree of this\nentry is searched for stuck projects.\n</p>\n"}, {"id": "114PresentationandSorting", "content": "\n<span id=\"Presentation-and-Sorting\"></span>\n<span id=\"Presentation-and-Sorting-1\"></span><h3 class=\"section\">11.4 Presentation and Sorting</h3>\n\n<span id=\"index-presentation_002c-of-agenda-items\"></span>\n\n<span id=\"index-org_002dagenda_002dprefix_002dformat\"></span>\n<span id=\"index-org_002dagenda_002dtags_002dcolumn\"></span>\n<p>Before displaying items in an agenda view, Org mode visually prepares\nthe items and sorts them.  Each item occupies a single line.  The line\nstarts with a <em>prefix</em> that contains the <em>category</em> (see <a href=\"https://orgmode.org/org.html#Categories\">Categories</a>)\nof the item and other important information.  You can customize in\nwhich column tags are displayed through <code>org-agenda-tags-column</code>.  You\ncan also customize the prefix using the option\n<code>org-agenda-prefix-format</code>.  This prefix is followed by a cleaned-up\nversion of the outline headline associated with the item.\n</p>\n\n\n"}, {"id": "1141Categories", "content": "\n<span id=\"Categories\"></span>\n<span id=\"Categories-1\"></span><h4 class=\"subsection\">11.4.1 Categories</h4>\n\n<span id=\"index-category\"></span>\n<span id=\"index-CATEGORY_002c-keyword\"></span>\n\n<p>The category is a broad label assigned to each agenda item.  By\ndefault, the category is simply derived from the file name, but you\ncan also specify it with a special line in the buffer, like\nthis:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CATEGORY: Thesis\n</pre></div>\n\n\n<span id=\"index-CATEGORY_002c-property-1\"></span>\n<p>If you would like to have a special category for a single entry or\na (sub)tree, give the entry a \u2018<samp>CATEGORY</samp>\u2019 property with the special\ncategory you want to apply as the value.\n</p>\n<span id=\"index-org_002dagenda_002dcategory_002dicon_002dalist\"></span>\n<p>The display in the agenda buffer looks best if the category is not\nlonger than 10 characters.  You can set up icons for category by\ncustomizing the <code>org-agenda-category-icon-alist</code> variable.\n</p>\n"}, {"id": "1142Timeofdayspecifications", "content": "\n<span id=\"Time_002dof_002dday-specifications\"></span>\n<span id=\"Time_002dof_002dday-specifications-1\"></span><h4 class=\"subsection\">11.4.2 Time-of-day specifications</h4>\n\n<span id=\"index-time_002dof_002dday-specification\"></span>\n\n<p>Org mode checks each agenda item for a time-of-day specification.  The\ntime can be part of the timestamp that triggered inclusion into the\nagenda, for example\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;2005-05-10 Tue 19:00&gt;\n</pre></div>\n\n\n<p>Time ranges can be specified with two timestamps:\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;2005-05-10 Tue 20:30&gt;--&lt;2005-05-10 Tue 22:15&gt;\n</pre></div>\n\n\n<span id=\"index-org_002dagenda_002dsearch_002dheadline_002dfor_002dtime\"></span>\n<p>In the headline of the entry itself, a time(range)\u2014like \u2018<samp>12:45</samp>\u2019 or\na \u2018<samp>8:30-1pm</samp>\u2019\u2014may also appear as plain text<a id=\"DOCF97\" href=\"https://orgmode.org/org.html#FOOT97\"><sup>97</sup></a>.\n</p>\n<p>If the agenda integrates the Emacs diary (see <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>),\ntime specifications in diary entries are recognized as well.\n</p>\n<p>For agenda display, Org mode extracts the time and displays it in\na standard 24 hour format as part of the prefix.  The example times in\nthe previous paragraphs would end up in the agenda like this:\n</p>\n<div class=\"example\">\n<pre class=\"example\"> 8:30-13:00 Arthur Dent lies in front of the bulldozer\n12:45...... Ford Prefect arrives and takes Arthur to the pub\n19:00...... The Vogon reads his poem\n20:30-22:15 Marvin escorts the Hitchhikers to the bridge\n</pre></div>\n\n<span id=\"index-time-grid\"></span>\n<p>If the agenda is in single-day mode, or for the display of today, the\ntimed entries are embedded in a time grid, like\n</p>\n<div class=\"example\">\n<pre class=\"example\"> 8:00...... ------------------\n 8:30-13:00 Arthur Dent lies in front of the bulldozer\n10:00...... ------------------\n12:00...... ------------------\n12:45...... Ford Prefect arrives and takes Arthur to the pub\n14:00...... ------------------\n16:00...... ------------------\n18:00...... ------------------\n19:00...... The Vogon reads his poem\n20:00...... ------------------\n20:30-22:15 Marvin escorts the Hitchhikers to the bridge\n</pre></div>\n\n<span id=\"index-org_002dagenda_002duse_002dtime_002dgrid\"></span>\n<span id=\"index-org_002dagenda_002dtime_002dgrid\"></span>\n<p>The time grid can be turned on and off with the variable\n<code>org-agenda-use-time-grid</code>, and can be configured with\n<code>org-agenda-time-grid</code>.\n</p>\n"}, {"id": "1143Sortingofagendaitems", "content": "\n<span id=\"Sorting-of-agenda-items\"></span>\n<span id=\"Sorting-of-agenda-items-1\"></span><h4 class=\"subsection\">11.4.3 Sorting of agenda items</h4>\n\n<span id=\"index-sorting_002c-of-agenda-items\"></span>\n<span id=\"index-priorities_002c-of-agenda-items\"></span>\n\n<p>Before being inserted into a view, the items are sorted.  How this is\ndone depends on the type of view.\n</p>\n<ul>\n<li> <span id=\"index-org_002dagenda_002dfiles-1\"></span>\nFor the daily/weekly agenda, the items for each day are sorted.  The\ndefault order is to first collect all items containing an explicit\ntime-of-day specification.  These entries are shown at the beginning\nof the list, as a <em>schedule</em> for the day.  After that, items remain\ngrouped in categories, in the sequence given by <code>org-agenda-files</code>.\nWithin each category, items are sorted by priority (see\n<a href=\"https://orgmode.org/org.html#Priorities\">Priorities</a>), which is composed of the base priority (2000 for\npriority \u2018<samp>A</samp>\u2019, 1000 for \u2018<samp>B</samp>\u2019, and 0 for \u2018<samp>C</samp>\u2019), plus additional\nincrements for overdue scheduled or deadline items.\n\n</li><li> For the TODO list, items remain in the order of categories, but\nwithin each category, sorting takes place according to priority (see\n<a href=\"https://orgmode.org/org.html#Priorities\">Priorities</a>).  The priority used for sorting derives from the\npriority cookie, with additions depending on how close an item is to\nits due or scheduled date.\n\n</li><li> For tags matches, items are not sorted at all, but just appear in\nthe sequence in which they are found in the agenda files.\n</li></ul>\n\n<span id=\"index-org_002dagenda_002dsorting_002dstrategy\"></span>\n<p>Sorting can be customized using the variable\n<code>org-agenda-sorting-strategy</code>, and may also include criteria based on\nthe estimated effort of an entry (see <a href=\"https://orgmode.org/org.html#Effort-Estimates\">Effort Estimates</a>).\n</p>\n"}, {"id": "1144Filteringlimitingagendaitems", "content": "\n<span id=\"Filtering_002flimiting-agenda-items\"></span>\n<span id=\"Filtering_002flimiting-agenda-items-1\"></span><h4 class=\"subsection\">11.4.4 Filtering/limiting agenda items</h4>\n\n<span id=\"index-org_002dagenda_002dcategory_002dfilter_002dpreset\"></span>\n<span id=\"index-org_002dagenda_002dtag_002dfilter_002dpreset\"></span>\n<span id=\"index-org_002dagenda_002deffort_002dfilter_002dpreset\"></span>\n<span id=\"index-org_002dagenda_002dregexp_002dfilter_002dpreset\"></span>\n<p>Agenda built-in or custom commands are statically defined.  Agenda\nfilters and limits allow to flexibly narrow down the list of agenda\nentries.\n</p>\n<p><em>Filters</em> only change the visibility of items, are very fast and are\nmostly used interactively<a id=\"DOCF98\" href=\"https://orgmode.org/org.html#FOOT98\"><sup>98</sup></a>.  You can switch quickly between\ndifferent filters without having to recreate the agenda.  <em>Limits</em> on\nthe other hand take effect before the agenda buffer is populated, so\nthey are mostly useful when defined as local variables within custom\nagenda commands.\n</p>\n<span id=\"Filtering-in-the-agenda\"></span><span id=\"Filtering-in-the-agenda-1\"></span><h4 class=\"subsubheading\">Filtering in the agenda</h4>\n\n<span id=\"index-agenda-filtering\"></span>\n<span id=\"index-filtering-entries_002c-in-agenda\"></span>\n<span id=\"index-tag-filtering_002c-in-agenda\"></span>\n<span id=\"index-category-filtering_002c-in-agenda\"></span>\n<span id=\"index-top-headline-filtering_002c-in-agenda\"></span>\n<span id=\"index-effort-filtering_002c-in-agenda\"></span>\n<span id=\"index-query-editing_002c-in-agenda\"></span>\n\n<p>The general filtering command is <code>org-agenda-filter</code>, bound to\n<kbd>/</kbd>.  Before we introduce it, we describe commands for\nindividual filter types.  All filtering commands handle prefix\narguments in the same way:  A single <kbd>C-u</kbd> prefix negates the\nfilter, so it removes lines selected by the filter.  A double prefix\nadds the new filter condition to the one(s) already in place, so\nfilter elements are accumulated.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>\\</kbd> (<code>org-agenda-filter-by-tag</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter_002dby_002dtag\"></span>\n<p>Filter the agenda view with respect to a tag.  You are prompted for\na tag selection letter; <kbd><span class=\"key\">SPC</span></kbd> means any tag at all.\nPressing <kbd><span class=\"key\">TAB</span></kbd> at that prompt offers completion to select a\ntag, including any tags that do not have a selection character.  The\ncommand then hides all entries that do not contain or inherit this\ntag.  Pressing <kbd>+</kbd> or <kbd>-</kbd> at the prompt switches\nbetween filtering for and against the next tag.  To clear the\nfilter, press <kbd>\\</kbd> twice (once to call the command again,\nand once at the prompt).\n</p>\n</dd>\n<dt><kbd>&lt;</kbd> (<code>org-agenda-filter-by-category</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter_002dby_002dcategory\"></span>\n<p>Filter by category of the line at point, and show only entries with\nthis category.  When called with a prefix argument, hide all entries\nwith the category at point.  To clear the filter, call this command\nagain by pressing <kbd>&lt;</kbd>.\n</p>\n</dd>\n<dt><kbd>=</kbd> (<code>org-agenda-filter-by-regexp</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter_002dby_002dregexp\"></span>\n<p>Filter the agenda view by a regular expression: only show agenda\nentries matching the regular expression the user entered.  To clear\nthe filter, call the command again by pressing <kbd>=</kbd>.\n</p>\n</dd>\n<dt><kbd>_</kbd> (<code>org-agenda-filter-by-effort</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter_002dby_002deffort\"></span>\n<p>Filter the agenda view with respect to effort estimates, so select\ntasks that take the right amount of time.  You first need to set up\na list of efforts globally, for example\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-global-properties\n      '((\"Effort_ALL\". \"0 0:10 0:30 1:00 2:00 3:00 4:00\")))\n</pre></div>\n\n<span id=\"index-org_002dsort_002dagenda_002dnoeffort_002dis_002dhigh\"></span>\n<p>You can then filter for an effort by first typing an operator, one\nof <kbd>&lt;</kbd>, <kbd>&gt;</kbd> and <kbd>=</kbd>, and then the\none-digit index of an effort estimate in your array of allowed\nvalues, where <kbd>0</kbd> means the 10th value.  The filter then\nrestricts to entries with effort smaller-or-equal, equal, or\nlarger-or-equal than the selected value.  For application of the\noperator, entries without a defined effort are treated according to\nthe value of <code>org-sort-agenda-noeffort-is-high</code>.  To clear the\nfilter, press <kbd>_</kbd> twice (once to call the command again,\nand once at the first prompt).\n</p>\n</dd>\n<dt><kbd>^</kbd> (<code>org-agenda-filter-by-top-headline</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter_002dby_002dtop_002dheadline\"></span>\n<p>Filter the current agenda view and only display items that fall\nunder the same top-level headline as the current entry.  To clear\nthe filter, call this command again by pressing <kbd>^</kbd>.\n</p>\n</dd>\n<dt><kbd>/</kbd> (<code>org-agenda-filter</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dfilter\"></span>\n<p>This is the unified interface to four of the five filter methods\ndescribed above.  At the prompt, specify different filter elements\nin a single string, with full completion support.  For example,\n</p>\n<div class=\"example\">\n<pre class=\"example\">+work-John+&lt;0:10-/plot/\n</pre></div>\n\n\n<p>selects entries with category \u2018<samp>work</samp>\u2019 and effort estimates below 10\nminutes, and deselects entries with tag \u2018<samp>John</samp>\u2019 or matching the\nregexp \u2018<samp>plot</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#Regular-Expressions\">Regular Expressions</a>).  You can leave \u2018<samp>+</samp>\u2019 out if\nthat does not lead to ambiguities.  The sequence of elements is\narbitrary.  The filter syntax assumes that there is no overlap\nbetween categories and tags.  Otherwise, tags take priority.  If you\nreply to the prompt with the empty string, all filtering is removed.\nIf a filter is specified, it replaces all current filters.  But if\nyou call the command with a double prefix argument, or if you add an\nadditional \u2018<samp>+</samp>\u2019 (e.g., \u2018<samp>++work</samp>\u2019) to the front of the string, the new\nfilter elements are added to the active ones.  A single prefix\nargument applies the entire filter in a negative sense.\n</p>\n</dd>\n<dt><kbd>|</kbd> (<code>org-agenda-filter-remove-all</code>)</dt>\n<dd><p>Remove all filters in the current agenda view.\n</p></dd>\n</dl>\n\n<span id=\"Computed-tag-filtering\"></span><span id=\"Computed-tag-filtering-1\"></span><h4 class=\"subsubheading\">Computed tag filtering</h4>\n\n<span id=\"index-org_002dagenda_002dauto_002dexclude_002dfunction\"></span>\n<p>If the variable <code>org-agenda-auto-exclude-function</code> is set to\na user-defined function, that function can select tags that should be\nused as a tag filter when requested.  The function will be called with\nlower-case versions of all tags represented in the current view.  The\nfunction should return \u2018<samp>\"-tag\"</samp>\u2019 if the filter should remove\nentries with that tag, \u2018<samp>\"+tag\"</samp>\u2019 if only entries with this tag should\nbe kept, or \u2018<samp>nil</samp>\u2019 if that tag is irrelevant.  For example, let\u2019s say\nyou use a \u2018<samp>Net</samp>\u2019 tag to identify tasks which need network access, an\n\u2018<samp>Errand</samp>\u2019 tag for errands in town, and a \u2018<samp>Call</samp>\u2019 tag for making phone\ncalls.  You could auto-exclude these tags based on the availability of\nthe Internet, and outside of business hours, with something like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-auto-exclude-fn (tag)\n  (when (cond ((string= tag \"net\")\n               (/= 0 (call-process \"/sbin/ping\" nil nil nil\n                                   \"-c1\" \"-q\" \"-t1\" \"mail.gnu.org\")))\n              ((member tag '(\"errand\" \"call\"))\n               (let ((hr (nth 2 (decode-time))))\n                 (or (&lt; hr 8) (&gt; hr 21)))))\n    (concat \"-\" tag)))\n\n(setq org-agenda-auto-exclude-function #'my-auto-exclude-fn)\n</pre></div>\n\n<p>You can apply this self-adapting filter by using a triple prefix\nargument to <code>org-agenda-filter</code>, i.e.&nbsp;press <kbd>C-u C-u C-u /</kbd>,\nor by pressing <kbd><span class=\"key\">RET</span></kbd> in <code>org-agenda-filter-by-tag</code>.\n</p>\n<span id=\"Setting-limits-for-the-agenda\"></span><span id=\"Setting-limits-for-the-agenda-1\"></span><h4 class=\"subsubheading\">Setting limits for the agenda</h4>\n\n<span id=\"index-limits_002c-in-agenda\"></span>\n\n<p>Here is a list of options that you can set, either globally, or\nlocally in your custom agenda views (see <a href=\"https://orgmode.org/org.html#Custom-Agenda-Views\">Custom Agenda Views</a>).\n</p>\n<dl compact=\"compact\">\n<dt><code>org-agenda-max-entries</code></dt>\n<dd><span id=\"index-org_002dagenda_002dmax_002dentries\"></span>\n<p>Limit the number of entries.\n</p>\n</dd>\n<dt><code>org-agenda-max-effort</code></dt>\n<dd><span id=\"index-org_002dagenda_002dmax_002deffort\"></span>\n<p>Limit the duration of accumulated efforts (as minutes).\n</p>\n</dd>\n<dt><code>org-agenda-max-todos</code></dt>\n<dd><span id=\"index-org_002dagenda_002dmax_002dtodos\"></span>\n<p>Limit the number of entries with TODO keywords.\n</p>\n</dd>\n<dt><code>org-agenda-max-tags</code></dt>\n<dd><span id=\"index-org_002dagenda_002dmax_002dtags\"></span>\n<p>Limit the number of tagged entries.\n</p></dd>\n</dl>\n\n<p>When set to a positive integer, each option excludes entries from\nother categories: for example, \u2018<samp>(setq org-agenda-max-effort 100)</samp>\u2019\nlimits the agenda to 100 minutes of effort and exclude any entry that\nhas no effort property.  If you want to include entries with no effort\nproperty, use a negative value for <code>org-agenda-max-effort</code>.  One\nuseful setup is to use <code>org-agenda-max-entries</code> locally in a custom\ncommand.  For example, this custom command displays the next five\nentries with a \u2018<samp>NEXT</samp>\u2019 TODO keyword.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"n\" todo \"NEXT\"\n         ((org-agenda-max-entries 5)))))\n</pre></div>\n\n<p>Once you mark one of these five entry as DONE, rebuilding the agenda\nwill again the next five entries again, including the first entry that\nwas excluded so far.\n</p>\n<p>You can also dynamically set temporary limits, which are lost when\nrebuilding the agenda:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>~</kbd> (<code>org-agenda-limit-interactively</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002dlimit_002dinteractively\"></span>\n<p>This prompts for the type of limit to apply and its value.\n</p></dd>\n</dl>\n\n"}, {"id": "115CommandsintheAgendaBuffer", "content": "\n<span id=\"Agenda-Commands\"></span>\n<span id=\"Commands-in-the-Agenda-Buffer\"></span><h3 class=\"section\">11.5 Commands in the Agenda Buffer</h3>\n\n<span id=\"index-commands_002c-in-agenda-buffer\"></span>\n\n<p>Entries in the agenda buffer are linked back to the Org file or diary\nfile where they originate.  You are not allowed to edit the agenda\nbuffer itself, but commands are provided to show and jump to the\noriginal entry location, and to edit the Org files \u201cremotely\u201d from the\nagenda buffer.  In this way, all information is stored only once,\nremoving the risk that your agenda and note files may diverge.\n</p>\n<p>Some commands can be executed with mouse clicks on agenda lines.  For\nthe other commands, point needs to be in the desired line.\n</p>\n<span id=\"Motion-_00281_0029\"></span><span id=\"Motion-2\"></span><h4 class=\"subheading\">Motion</h4>\n\n<span id=\"index-motion-commands-in-agenda\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>n</kbd> (<code>org-agenda-next-line</code>)</dt>\n<dd><span id=\"index-n-1\"></span>\n<span id=\"index-org_002dagenda_002dnext_002dline\"></span>\n<p>Next line (same as <kbd><span class=\"key\">DOWN</span></kbd> and <kbd>C-n</kbd>).\n</p>\n</dd>\n<dt><kbd>p</kbd> (<code>org-agenda-previous-line</code>)</dt>\n<dd><span id=\"index-p-1\"></span>\n<span id=\"index-org_002dagenda_002dprevious_002dline\"></span>\n<p>Previous line (same as <kbd><span class=\"key\">UP</span></kbd> and <kbd>C-p</kbd>).\n</p></dd>\n</dl>\n\n<span id=\"View_002fGo-to-Org-file\"></span><span id=\"View_002fGo-to-Org-file-1\"></span><h4 class=\"subheading\">View/Go to Org file</h4>\n\n<span id=\"index-view-file-commands-in-agenda\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd><span class=\"key\">SPC</span></kbd> or <kbd>mouse-3</kbd> (<code>org-agenda-show-and-scroll-up</code>)</dt>\n<dd><span id=\"index-SPC-1\"></span>\n<span id=\"index-mouse_002d3-1\"></span>\n<span id=\"index-org_002dagenda_002dshow_002dand_002dscroll_002dup\"></span>\n<p>Display the original location of the item in another window.\nWith a prefix argument, make sure that drawers stay folded.\n</p>\n</dd>\n<dt><kbd>L</kbd> (<code>org-agenda-recenter</code>)</dt>\n<dd><span id=\"index-org_002dagenda_002drecenter\"></span>\n<p>Display original location and recenter that window.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">TAB</span></kbd> or <kbd>mouse-2</kbd> (<code>org-agenda-goto</code>)</dt>\n<dd><span id=\"index-TAB-6\"></span>\n<span id=\"index-mouse_002d2-1\"></span>\n<span id=\"index-org_002dagenda_002dgoto\"></span>\n<p>Go to the original location of the item in another window.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">RET</span></kbd> (<code>org-agenda-switch-to</code>)</dt>\n<dd><span id=\"index-RET-4\"></span>\n<span id=\"index-org_002dagenda_002dswitch_002dto\"></span>\n<p>Go to the original location of the item and delete other windows.\n</p>\n</dd>\n<dt><kbd>F</kbd> (<code>org-agenda-follow-mode</code>)</dt>\n<dd><span id=\"index-F\"></span>\n<span id=\"index-org_002dagenda_002dfollow_002dmode\"></span>\n<span id=\"index-org_002dagenda_002dstart_002dwith_002dfollow_002dmode\"></span>\n<p>Toggle Follow mode.  In Follow mode, as you move point through the\nagenda buffer, the other window always shows the corresponding\nlocation in the Org file.  The initial setting for this mode in new\nagenda buffers can be set with the variable\n<code>org-agenda-start-with-follow-mode</code>.\n</p>\n</dd>\n<dt><kbd>C-c C-x b</kbd> (<code>org-agenda-tree-to-indirect-buffer</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-b-1\"></span>\n<span id=\"index-org_002dagenda_002dtree_002dto_002dindirect_002dbuffer\"></span>\n<p>Display the entire subtree of the current item in an indirect\nbuffer.  With a numeric prefix argument N, go up to level N and then\ntake that tree.  If N is negative, go up that many levels.  With\na <kbd>C-u</kbd> prefix, do not remove the previously used indirect\nbuffer.\n</p>\n</dd>\n<dt><kbd>C-c C-o</kbd> (<code>org-agenda-open-link</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002do-2\"></span>\n<span id=\"index-org_002dagenda_002dopen_002dlink\"></span>\n<p>Follow a link in the entry.  This offers a selection of any links in\nthe text belonging to the referenced Org node.  If there is only one\nlink, follow it without a selection prompt.\n</p></dd>\n</dl>\n\n<span id=\"Change-display\"></span><span id=\"Change-display-1\"></span><h4 class=\"subheading\">Change display</h4>\n\n<span id=\"index-change-agenda-display\"></span>\n<span id=\"index-display-changing_002c-in-agenda\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>A</kbd></dt>\n<dd><span id=\"index-A\"></span>\n<p>Interactively select another agenda view and append it to the\ncurrent view.\n</p>\n</dd>\n<dt><kbd>o</kbd></dt>\n<dd><span id=\"index-o\"></span>\n<p>Delete other windows.\n</p>\n</dd>\n<dt><kbd>v d</kbd> or short <kbd>d</kbd> (<code>org-agenda-day-view</code>)</dt>\n<dd><span id=\"index-v-d\"></span>\n<span id=\"index-d\"></span>\n<span id=\"index-org_002dagenda_002dday_002dview\"></span>\n<p>Switch to day view.  When switching to day view, this setting\nbecomes the default for subsequent agenda refreshes.  A numeric\nprefix argument may be used to jump directly to a specific day of\nthe year.  For example, <kbd>32 d</kbd> jumps to February 1st.  When\nsetting day view, a year may be encoded in the prefix argument as\nwell.  For example, <kbd>200712 d</kbd> jumps to January 12, 2007.\nIf such a year specification has only one or two digits, it is\nexpanded into one of the 30 next years or the last 69 years.\n</p>\n</dd>\n<dt><kbd>v w</kbd> or short <kbd>w</kbd> (<code>org-agenda-week-view</code>)</dt>\n<dd><span id=\"index-v-w\"></span>\n<span id=\"index-w\"></span>\n<span id=\"index-org_002dagenda_002dweek_002dview\"></span>\n<p>Switch to week view.  When switching week view, this setting becomes\nthe default for subsequent agenda refreshes.  A numeric prefix\nargument may be used to jump directly to a specific day of the ISO\nweek.  For example <kbd>9 w</kbd> to ISO week number 9.  When\nsetting week view, a year may be encoded in the prefix argument as\nwell.  For example, <kbd>200712 w</kbd> jumps to week 12 in 2007.\nIf such a year specification has only one or two digits, it is\nexpanded into one of the 30 next years or the last 69 years.\n</p>\n</dd>\n<dt><kbd>v m</kbd> (<code>org-agenda-month-view</code>)</dt>\n<dd><span id=\"index-v-m\"></span>\n<span id=\"index-org_002dagenda_002dmonth_002dview\"></span>\n<p>Switch to month view.  Because month views are slow to create, they\ndo not become the default for subsequent agenda refreshes.\nA numeric prefix argument may be used to jump directly to a specific\nday of the month.  When setting month view, a year may be encoded in\nthe prefix argument as well.  For example, <kbd>200712 m</kbd> jumps\nto December, 2007.  If such a year specification has only one or two\ndigits, it is expanded into one of the 30 next years or the last 69\nyears.\n</p>\n</dd>\n<dt><kbd>v y</kbd> (<code>org-agenda-year-view</code>)</dt>\n<dd><span id=\"index-v-y\"></span>\n<span id=\"index-org_002dagenda_002dyear_002dview\"></span>\n<p>Switch to year view.  Because year views are slow to create, they do\nnot become the default for subsequent agenda refreshes.  A numeric\nprefix argument may be used to jump directly to a specific day of\nthe year.\n</p>\n</dd>\n<dt><kbd>v <span class=\"key\">SPC</span></kbd> (<code>org-agenda-reset-view</code>)</dt>\n<dd><span id=\"index-v-SPC\"></span>\n<span id=\"index-org_002dagenda_002dreset_002dview\"></span>\n<span id=\"index-org_002dagenda_002dspan-1\"></span>\n<p>Reset the current view to <code>org-agenda-span</code>.\n</p>\n</dd>\n<dt><kbd>f</kbd> (<code>org-agenda-later</code>)</dt>\n<dd><span id=\"index-f\"></span>\n<span id=\"index-org_002dagenda_002dlater\"></span>\n<p>Go forward in time to display the span following the current one.\nFor example, if the display covers a week, switch to the following\nweek.  With a prefix argument, repeat that many times.\n</p>\n</dd>\n<dt><kbd>b</kbd> (<code>org-agenda-earlier</code>)</dt>\n<dd><span id=\"index-b\"></span>\n<span id=\"index-org_002dagenda_002dearlier\"></span>\n<p>Go backward in time to display earlier dates.\n</p>\n</dd>\n<dt><kbd>.</kbd> (<code>org-agenda-goto-today</code>)</dt>\n<dd><span id=\"index-_002e-1\"></span>\n<span id=\"index-org_002dagenda_002dgoto_002dtoday\"></span>\n<p>Go to today.\n</p>\n</dd>\n<dt><kbd>j</kbd> (<code>org-agenda-goto-date</code>)</dt>\n<dd><span id=\"index-j\"></span>\n<span id=\"index-org_002dagenda_002dgoto_002ddate\"></span>\n<p>Prompt for a date and go there.\n</p>\n</dd>\n<dt><kbd>J</kbd> (<code>org-agenda-clock-goto</code>)</dt>\n<dd><span id=\"index-J\"></span>\n<span id=\"index-org_002dagenda_002dclock_002dgoto\"></span>\n<p>Go to the currently clocked-in task <em>in the agenda buffer</em>.\n</p>\n</dd>\n<dt><kbd>D</kbd> (<code>org-agenda-toggle-diary</code>)</dt>\n<dd><span id=\"index-D\"></span>\n<span id=\"index-org_002dagenda_002dtoggle_002ddiary\"></span>\n<p>Toggle the inclusion of diary entries.  See <a href=\"https://orgmode.org/org.html#Weekly_002fdaily-agenda\">Weekly/daily agenda</a>.\n</p>\n</dd>\n<dt><kbd>v l</kbd> or <kbd>v L</kbd> or short <kbd>l</kbd> (<code>org-agenda-log-mode</code>)</dt>\n<dd><span id=\"index-v-l\"></span>\n<span id=\"index-l\"></span>\n<span id=\"index-v-L\"></span>\n<span id=\"index-org_002dagenda_002dlog_002dmode\"></span>\n<span id=\"index-org_002dlog_002ddone-1\"></span>\n<span id=\"index-org_002dagenda_002dlog_002dmode_002ditems\"></span>\n<p>Toggle Logbook mode.  In Logbook mode, entries that were marked as\ndone while logging was on (see the variable <code>org-log-done</code>) are\nshown in the agenda, as are entries that have been clocked on that\nday.  You can configure the entry types that should be included in\nlog mode using the variable <code>org-agenda-log-mode-items</code>.  When\ncalled with a <kbd>C-u</kbd> prefix argument, show all possible\nlogbook entries, including state changes.  When called with two\nprefix arguments <kbd>C-u C-u</kbd>, show only logging information,\nnothing else.  <kbd>v L</kbd> is equivalent to <kbd>C-u v l</kbd>.\n</p>\n</dd>\n<dt><kbd>v [</kbd> or short <kbd>[</kbd> (<code>org-agenda-manipulate-query-add</code>)</dt>\n<dd><span id=\"index-v-_005b\"></span>\n<span id=\"index-_005b\"></span>\n<span id=\"index-org_002dagenda_002dmanipulate_002dquery_002dadd\"></span>\n<p>Include inactive timestamps into the current view.  Only for\nweekly/daily agenda.\n</p>\n</dd>\n<dt><kbd>v a</kbd> (<code>org-agenda-archives-mode</code>)</dt>\n<dd><span id=\"index-v-a\"></span>\n<span id=\"index-org_002dagenda_002darchives_002dmode\"></span>\n<p>Toggle Archives mode.  In Archives mode, trees that are archived\n(see <a href=\"https://orgmode.org/org.html#Internal-archiving\">Internal archiving</a>) are also scanned when producing the\nagenda.  To exit archives mode, press <kbd>v a</kbd> again.\n</p>\n</dd>\n<dt><kbd>v A</kbd></dt>\n<dd><span id=\"index-v-A\"></span>\n<p>Toggle Archives mode.  Include all archive files as well.\n</p>\n</dd>\n<dt><kbd>v R</kbd> or short <kbd>R</kbd> (<code>org-agenda-clockreport-mode</code>)</dt>\n<dd><span id=\"index-v-R\"></span>\n<span id=\"index-R\"></span>\n<span id=\"index-org_002dagenda_002dclockreport_002dmode\"></span>\n<span id=\"index-org_002dagenda_002dstart_002dwith_002dclockreport_002dmode\"></span>\n<span id=\"index-org_002dclock_002dreport_002dinclude_002dclocking_002dtask\"></span>\n<p>Toggle Clockreport mode.  In Clockreport mode, the daily/weekly\nagenda always shows a table with the clocked times for the time span\nand file scope covered by the current agenda view.  The initial\nsetting for this mode in new agenda buffers can be set with the\nvariable <code>org-agenda-start-with-clockreport-mode</code>.  By using\na prefix argument when toggling this mode (i.e., <kbd>C-u R</kbd>),\nthe clock table does not show contributions from entries that are\nhidden by agenda filtering<a id=\"DOCF99\" href=\"https://orgmode.org/org.html#FOOT99\"><sup>99</sup></a>.  See also the variable\n<code>org-clock-report-include-clocking-task</code>.\n</p>\n</dd>\n<dt><kbd>v c</kbd></dt>\n<dd><span id=\"index-v-c\"></span>\n<span id=\"index-org_002dagenda_002dclock_002dconsistency_002dchecks\"></span>\n<p>Show overlapping clock entries, clocking gaps, and other clocking\nproblems in the current agenda range.  You can then visit clocking\nlines and fix them manually.  See the variable\n<code>org-agenda-clock-consistency-checks</code> for information on how to\ncustomize the definition of what constituted a clocking problem.  To\nreturn to normal agenda display, press <kbd>l</kbd> to exit Logbook\nmode.\n</p>\n</dd>\n<dt><kbd>v E</kbd> or short <kbd>E</kbd> (<code>org-agenda-entry-text-mode</code>)</dt>\n<dd><span id=\"index-v-E\"></span>\n<span id=\"index-E\"></span>\n<span id=\"index-org_002dagenda_002dentry_002dtext_002dmode\"></span>\n<span id=\"index-org_002dagenda_002dstart_002dwith_002dentry_002dtext_002dmode\"></span>\n<span id=\"index-org_002dagenda_002dentry_002dtext_002dmaxlines\"></span>\n<p>Toggle entry text mode.  In entry text mode, a number of lines from\nthe Org outline node referenced by an agenda line are displayed\nbelow the line.  The maximum number of lines is given by the\nvariable <code>org-agenda-entry-text-maxlines</code>.  Calling this command\nwith a numeric prefix argument temporarily modifies that number to\nthe prefix value.\n</p>\n</dd>\n<dt><kbd>G</kbd> (<code>org-agenda-toggle-time-grid</code>)</dt>\n<dd><span id=\"index-G\"></span>\n<span id=\"index-org_002dagenda_002duse_002dtime_002dgrid-1\"></span>\n<span id=\"index-org_002dagenda_002dtime_002dgrid-1\"></span>\n<p>Toggle the time grid on and off.  See also the variables\n<code>org-agenda-use-time-grid</code> and <code>org-agenda-time-grid</code>.\n</p>\n</dd>\n<dt><kbd>r</kbd> (<code>org-agenda-redo</code>)</dt>\n<dt><kbd>g</kbd></dt>\n<dd><span id=\"index-r-2\"></span>\n<span id=\"index-g-1\"></span>\n<span id=\"index-org_002dagenda_002dredo\"></span>\n<p>Recreate the agenda buffer, for example to reflect the changes after\nmodification of the timestamps of items with <kbd>S-<span class=\"key\">LEFT</span></kbd> and\n<kbd>S-<span class=\"key\">RIGHT</span></kbd>.  When the buffer is the global TODO list,\na prefix argument is interpreted to create a selective list for\na specific TODO keyword.\n</p>\n</dd>\n<dt><kbd>C-x C-s</kbd> or short <kbd>s</kbd> (<code>org-save-all-org-buffers</code>)</dt>\n<dd><span id=\"index-C_002dx-C_002ds-1\"></span>\n<span id=\"index-org_002dsave_002dall_002dorg_002dbuffers\"></span>\n<span id=\"index-s-1\"></span>\n<p>Save all Org buffers in the current Emacs session, and also the\nlocations of IDs.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-c</kbd> (<code>org-agenda-columns</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dc-1\"></span>\n<span id=\"index-org_002dagenda_002dcolumns\"></span>\n<span id=\"index-org_002dcolumns_002ddefault_002dformat-2\"></span>\n<p>Invoke column view (see <a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>) in the agenda buffer.  The\ncolumn view format is taken from the entry at point, or, if there is\nno entry at point, from the first entry in the agenda view.  So\nwhatever the format for that entry would be in the original buffer\n(taken from a property, from a \u2018<samp>COLUMNS</samp>\u2019 keyword, or from the\ndefault variable <code>org-columns-default-format</code>) is used in the\nagenda.\n</p>\n</dd>\n<dt><kbd>C-c C-x &gt;</kbd> (<code>org-agenda-remove-restriction-lock</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_003e-1\"></span>\n<span id=\"index-org_002dagenda_002dremove_002drestriction_002dlock-2\"></span>\n<p>Remove the restriction lock on the agenda, if it is currently\nrestricted to a file or subtree (see <a href=\"https://orgmode.org/org.html#Agenda-Files\">Agenda Files</a>).\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">UP</span></kbd> (<code>org-agenda-drag-line-backward</code>)</dt>\n<dd><span id=\"index-M_002dUP-4\"></span>\n<span id=\"index-org_002dagenda_002ddrag_002dline_002dbackward\"></span>\n<p>Drag the line at point backward one line.  With a numeric prefix\nargument, drag backward by that many lines.\n</p>\n<p>Moving agenda lines does not persist after an agenda refresh and\ndoes not modify the contributing Org files.\n</p>\n</dd>\n<dt><kbd>M-<span class=\"key\">DOWN</span></kbd> (<code>org-agenda-drag-line-forward</code>)</dt>\n<dd><span id=\"index-M_002dDOWN-4\"></span>\n<span id=\"index-org_002dagenda_002ddrag_002dline_002dforward\"></span>\n<p>Drag the line at point forward one line.  With a numeric prefix\nargument, drag forward by that many lines.\n</p></dd>\n</dl>\n\n<span id=\"Remote-editing\"></span><span id=\"Remote-editing-1\"></span><h4 class=\"subheading\">Remote editing</h4>\n\n<span id=\"index-remote-editing_002c-from-agenda\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>0--9</kbd></dt>\n<dd><p>Digit argument.\n</p>\n</dd>\n<dt><kbd>C-_</kbd> (<code>org-agenda-undo</code>)</dt>\n<dd><span id=\"index-C_002d_005f\"></span>\n<span id=\"index-org_002dagenda_002dundo\"></span>\n<span id=\"index-undoing-remote_002dediting-events\"></span>\n<span id=\"index-remote-editing_002c-undo\"></span>\n<p>Undo a change due to a remote editing command.  The change is undone\nboth in the agenda buffer and in the remote buffer.\n</p>\n</dd>\n<dt><kbd>t</kbd> (<code>org-agenda-todo</code>)</dt>\n<dd><span id=\"index-t\"></span>\n<span id=\"index-org_002dagenda_002dtodo\"></span>\n<p>Change the TODO state of the item, both in the agenda and in the\noriginal Org file.  A prefix arg is passed through to the <code>org-todo</code>\ncommand, so for example a <kbd>C-u</kbd> prefix are will trigger\ntaking a note to document the state change.\n</p>\n</dd>\n<dt><kbd>C-S-<span class=\"key\">RIGHT</span></kbd> (<code>org-agenda-todo-nextset</code>)</dt>\n<dd><span id=\"index-C_002dS_002dRIGHT-1\"></span>\n<span id=\"index-org_002dagenda_002dtodo_002dnextset\"></span>\n<p>Switch to the next set of TODO keywords.\n</p>\n</dd>\n<dt><kbd>C-S-<span class=\"key\">LEFT</span></kbd>, <code>org-agenda-todo-previousset</code></dt>\n<dd><span id=\"index-C_002dS_002dLEFT-1\"></span>\n<p>Switch to the previous set of TODO keywords.\n</p>\n</dd>\n<dt><kbd>C-k</kbd> (<code>org-agenda-kill</code>)</dt>\n<dd><span id=\"index-C_002dk\"></span>\n<span id=\"index-org_002dagenda_002dkill\"></span>\n<span id=\"index-org_002dagenda_002dconfirm_002dkill\"></span>\n<p>Delete the current agenda item along with the entire subtree\nbelonging to it in the original Org file.  If the text to be deleted\nremotely is longer than one line, the kill needs to be confirmed by\nthe user.  See variable <code>org-agenda-confirm-kill</code>.\n</p>\n</dd>\n<dt><kbd>C-c C-w</kbd> (<code>org-agenda-refile</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dw-2\"></span>\n<span id=\"index-org_002dagenda_002drefile\"></span>\n<p>Refile the entry at point.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-a</kbd> or short <kbd>a</kbd> (<code>org-agenda-archive-default-with-confirmation</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002da-1\"></span>\n<span id=\"index-a-1\"></span>\n<span id=\"index-org_002dagenda_002darchive_002ddefault_002dwith_002dconfirmation\"></span>\n<span id=\"index-org_002darchive_002ddefault_002dcommand-1\"></span>\n<p>Archive the subtree corresponding to the entry at point using the\ndefault archiving command set in <code>org-archive-default-command</code>.\nWhen using the <kbd>a</kbd> key, confirmation is required.\n</p>\n</dd>\n<dt><kbd>C-c C-x a</kbd> (<code>org-agenda-toggle-archive-tag</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-a-1\"></span>\n<span id=\"index-org_002dagenda_002dtoggle_002darchive_002dtag\"></span>\n<p>Toggle the archive tag (see <a href=\"https://orgmode.org/org.html#Internal-archiving\">Internal archiving</a>) for the current\nheadline.\n</p>\n</dd>\n<dt><kbd>C-c C-x A</kbd> (<code>org-agenda-archive-to-archive-sibling</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-A-1\"></span>\n<span id=\"index-org_002dagenda_002darchive_002dto_002darchive_002dsibling\"></span>\n<p>Move the subtree corresponding to the current entry to its <em>archive\nsibling</em>.\n</p>\n</dd>\n<dt><kbd>C-c C-x C-s</kbd> or short <kbd>$</kbd> (<code>org-agenda-archive</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002ds-1\"></span>\n<span id=\"index-_0024\"></span>\n<span id=\"index-org_002dagenda_002darchive\"></span>\n<p>Archive the subtree corresponding to the current headline.  This\nmeans the entry is moved to the configured archive location, most\nlikely a different file.\n</p>\n</dd>\n<dt><kbd>T</kbd> (<code>org-agenda-show-tags</code>)</dt>\n<dd><span id=\"index-T\"></span>\n<span id=\"index-org_002dagenda_002dshow_002dtags\"></span>\n<span id=\"index-org_002dagenda_002dshow_002dinherited_002dtags\"></span>\n<p>Show all tags associated with the current item.  This is useful if\nyou have turned off <code>org-agenda-show-inherited-tags</code>, but still want\nto see all tags of a headline occasionally.\n</p>\n</dd>\n<dt><kbd>:</kbd> (<code>org-agenda-set-tags</code>)</dt>\n<dd><span id=\"index-_003a\"></span>\n<span id=\"index-org_002dagenda_002dset_002dtags\"></span>\n<p>Set tags for the current headline.  If there is an active region in\nthe agenda, change a tag for all headings in the region.\n</p>\n</dd>\n<dt><kbd>,</kbd> (<code>org-agenda-priority</code>)</dt>\n<dd><span id=\"index-_002c\"></span>\n<span id=\"index-org_002dagenda_002dpriority\"></span>\n<p>Set the priority for the current item.  Org mode prompts for the\npriority character.  If you reply with <kbd><span class=\"key\">SPC</span></kbd>, the priority\ncookie is removed from the entry.\n</p>\n</dd>\n<dt><kbd>+</kbd> or <kbd>S-<span class=\"key\">UP</span></kbd> (<code>org-agenda-priority-up</code>)</dt>\n<dd><span id=\"index-_002b\"></span>\n<span id=\"index-S_002dUP-6\"></span>\n<span id=\"index-org_002dagenda_002dpriority_002dup\"></span>\n<p>Increase the priority of the current item.  The priority is changed\nin the original buffer, but the agenda is not resorted.  Use the\n<kbd>r</kbd> key for this.\n</p>\n</dd>\n<dt><kbd>-</kbd> or <kbd>S-<span class=\"key\">DOWN</span></kbd> (<code>org-agenda-priority-down</code>)</dt>\n<dd><span id=\"index-_002d\"></span>\n<span id=\"index-S_002dDOWN-6\"></span>\n<span id=\"index-org_002dagenda_002dpriority_002ddown\"></span>\n<p>Decrease the priority of the current item.\n</p>\n</dd>\n<dt><kbd>C-c C-x e</kbd> or short <kbd>e</kbd> (<code>org-agenda-set-effort</code>)</dt>\n<dd><span id=\"index-e-1\"></span>\n<span id=\"index-C_002dc-C_002dx-e-1\"></span>\n<span id=\"index-org_002dagenda_002dset_002deffort\"></span>\n<p>Set the effort property for the current item.\n</p>\n</dd>\n<dt><kbd>C-c C-z</kbd> or short <kbd>z</kbd> (<code>org-agenda-add-note</code>)</dt>\n<dd><span id=\"index-z\"></span>\n<span id=\"index-C_002dc-C_002dz-1\"></span>\n<span id=\"index-org_002dagenda_002dadd_002dnote\"></span>\n<span id=\"index-org_002dlog_002dinto_002ddrawer-1\"></span>\n<p>Add a note to the entry.  This note is recorded, and then filed to\nthe same location where state change notes are put.  Depending on\n<code>org-log-into-drawer</code>, this may be inside a drawer.\n</p>\n</dd>\n<dt><kbd>C-c C-a</kbd> (<code>org-attach</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002da-1\"></span>\n<span id=\"index-org_002dattach-1\"></span>\n<p>Dispatcher for all command related to attachments.\n</p>\n</dd>\n<dt><kbd>C-c C-s</kbd> (<code>org-agenda-schedule</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002ds-1\"></span>\n<span id=\"index-org_002dagenda_002dschedule\"></span>\n<p>Schedule this item.  With a prefix argument, remove the\nscheduling timestamp\n</p>\n</dd>\n<dt><kbd>C-c C-d</kbd> (<code>org-agenda-deadline</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dd-1\"></span>\n<span id=\"index-org_002dagenda_002ddeadline\"></span>\n<p>Set a deadline for this item.  With a prefix argument, remove the\ndeadline.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">RIGHT</span></kbd> (<code>org-agenda-do-date-later</code>)</dt>\n<dd><span id=\"index-S_002dRIGHT-10\"></span>\n<span id=\"index-org_002dagenda_002ddo_002ddate_002dlater\"></span>\n<p>Change the timestamp associated with the current line by one day\ninto the future.  If the date is in the past, the first call to this\ncommand moves it to today.  With a numeric prefix argument, change\nit by that many days.  For example, <kbd>3 6 5 S-<span class=\"key\">RIGHT</span></kbd> changes\nit by a year.  With a <kbd>C-u</kbd> prefix, change the time by one\nhour.  If you immediately repeat the command, it will continue to\nchange hours even without the prefix argument.  With a double\n<kbd>C-u C-u</kbd> prefix, do the same for changing minutes.  The\nstamp is changed in the original Org file, but the change is not\ndirectly reflected in the agenda buffer.  Use <kbd>r</kbd> or\n<kbd>g</kbd> to update the buffer.\n</p>\n</dd>\n<dt><kbd>S-<span class=\"key\">LEFT</span></kbd> (<code>org-agenda-do-date-earlier</code>)</dt>\n<dd><span id=\"index-S_002dLEFT-10\"></span>\n<span id=\"index-org_002dagenda_002ddo_002ddate_002dearlier\"></span>\n<p>Change the timestamp associated with the current line by one day\ninto the past.\n</p>\n</dd>\n<dt><kbd>&gt;</kbd> (<code>org-agenda-date-prompt</code>)</dt>\n<dd><span id=\"index-_003e-2\"></span>\n<span id=\"index-org_002dagenda_002ddate_002dprompt\"></span>\n<p>Change the timestamp associated with the current line.  The key\n<kbd>&gt;</kbd> has been chosen, because it is the same as\n<kbd>S-.</kbd>  on my keyboard.\n</p>\n</dd>\n<dt><kbd>I</kbd> (<code>org-agenda-clock-in</code>)</dt>\n<dd><span id=\"index-I\"></span>\n<span id=\"index-org_002dagenda_002dclock_002din\"></span>\n<p>Start the clock on the current item.  If a clock is running already,\nit is stopped first.\n</p>\n</dd>\n<dt><kbd>O</kbd> (<code>org-agenda-clock-out</code>)</dt>\n<dd><span id=\"index-O\"></span>\n<span id=\"index-org_002dagenda_002dclock_002dout\"></span>\n<p>Stop the previously started clock.\n</p>\n</dd>\n<dt><kbd>X</kbd> (<code>org-agenda-clock-cancel</code>)</dt>\n<dd><span id=\"index-X\"></span>\n<span id=\"index-org_002dagenda_002dclock_002dcancel\"></span>\n<p>Cancel the currently running clock.\n</p>\n</dd>\n<dt><kbd>J</kbd> (<code>org-agenda-clock-goto</code>)</dt>\n<dd><span id=\"index-J-1\"></span>\n<span id=\"index-org_002dagenda_002dclock_002dgoto-1\"></span>\n<p>Jump to the running clock in another window.\n</p>\n</dd>\n<dt><kbd>k</kbd> (<code>org-agenda-capture</code>)</dt>\n<dd><span id=\"index-k-1\"></span>\n<span id=\"index-org_002dagenda_002dcapture\"></span>\n<span id=\"index-capturing_002c-from-agenda\"></span>\n<span id=\"index-org_002dcapture_002duse_002dagenda_002ddate\"></span>\n<p>Like <code>org-capture</code>, but use the date at point as the default date\nfor the capture template.  See <code>org-capture-use-agenda-date</code> to make\nthis the default behavior of <code>org-capture</code>.\n</p></dd>\n</dl>\n\n<span id=\"Bulk-remote-editing-selected-entries\"></span><span id=\"Bulk-remote-editing-selected-entries-1\"></span><h4 class=\"subheading\">Bulk remote editing selected entries</h4>\n\n<span id=\"index-remote-editing_002c-bulk_002c-from-agenda\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dcustom_002dfunctions\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>m</kbd> (<code>org-agenda-bulk-mark</code>)</dt>\n<dd><span id=\"index-m\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dmark\"></span>\n\n<p>Mark the entry at point for bulk action.  If there is an active\nregion in the agenda, mark the entries in the region.  With numeric\nprefix argument, mark that many successive entries.\n</p>\n</dd>\n<dt><kbd>*</kbd> (<code>org-agenda-bulk-mark-all</code>)</dt>\n<dd><span id=\"index-_002a\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dmark_002dall\"></span>\n\n<p>Mark all visible agenda entries for bulk action.\n</p>\n</dd>\n<dt><kbd>u</kbd> (<code>org-agenda-bulk-unmark</code>)</dt>\n<dd><span id=\"index-u\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dunmark\"></span>\n\n<p>Unmark entry for bulk action.\n</p>\n</dd>\n<dt><kbd>U</kbd> (<code>org-agenda-bulk-remove-all-marks</code>)</dt>\n<dd><span id=\"index-U\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dremove_002dall_002dmarks\"></span>\n\n<p>Unmark all marked entries for bulk action.\n</p>\n</dd>\n<dt><kbd>M-m</kbd> (<code>org-agenda-bulk-toggle</code>)</dt>\n<dd><span id=\"index-M_002dm\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dtoggle\"></span>\n\n<p>Toggle mark of the entry at point for bulk action.\n</p>\n</dd>\n<dt><kbd>M-*</kbd> (<code>org-agenda-bulk-toggle-all</code>)</dt>\n<dd><span id=\"index-M_002d_002a\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dtoggle_002dall\"></span>\n\n<p>Toggle mark of every entry for bulk action.\n</p>\n</dd>\n<dt><kbd>%</kbd> (<code>org-agenda-bulk-mark-regexp</code>)</dt>\n<dd><span id=\"index-_0025\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dmark_002dregexp\"></span>\n\n<p>Mark entries matching a regular expression for bulk action.\n</p>\n</dd>\n<dt><kbd>B</kbd> (<code>org-agenda-bulk-action</code>)</dt>\n<dd><span id=\"index-B\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002daction\"></span>\n<span id=\"index-org_002dagenda_002dbulk_002dpersistent_002dmarks\"></span>\n\n<p>Bulk action: act on all marked entries in the agenda.  This prompts\nfor another key to select the action to be applied.  The prefix\nargument to <kbd>B</kbd> is passed through to the <kbd>s</kbd> and\n<kbd>d</kbd> commands, to bulk-remove these special timestamps.  By\ndefault, marks are removed after the bulk.  If you want them to\npersist, set <code>org-agenda-bulk-persistent-marks</code> to <code>t</code> or hit\n<kbd>p</kbd> at the prompt.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>p</kbd></dt>\n<dd><p>Toggle persistent marks.\n</p>\n</dd>\n<dt><kbd>$</kbd></dt>\n<dd><p>Archive all selected entries.\n</p>\n</dd>\n<dt><kbd>A</kbd></dt>\n<dd><p>Archive entries by moving them to their respective archive\nsiblings.\n</p>\n</dd>\n<dt><kbd>t</kbd></dt>\n<dd><p>Change TODO state.  This prompts for a single TODO keyword and\nchanges the state of all selected entries, bypassing blocking and\nsuppressing logging notes\u2014but not timestamps.\n</p>\n</dd>\n<dt><kbd>+</kbd></dt>\n<dd><p>Add a tag to all selected entries.\n</p>\n</dd>\n<dt><kbd>-</kbd></dt>\n<dd><p>Remove a tag from all selected entries.\n</p>\n</dd>\n<dt><kbd>s</kbd></dt>\n<dd><p>Schedule all items to a new date.  To shift existing schedule\ndates by a fixed number of days, use something starting with\ndouble plus at the prompt, for example \u2018<samp>++8d</samp>\u2019 or \u2018<samp>++2w</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>d</kbd></dt>\n<dd><p>Set deadline to a specific date.\n</p>\n</dd>\n<dt><kbd>r</kbd></dt>\n<dd><p>Prompt for a single refile target and move all entries.  The\nentries are no longer in the agenda; refresh (<kbd>g</kbd>) to\nbring them back.\n</p>\n</dd>\n<dt><kbd>S</kbd></dt>\n<dd><p>Reschedule randomly into the coming N days.  N is prompted for.\nWith a prefix argument (<kbd>C-u B S</kbd>), scatter only across\nweekdays.\n</p>\n</dd>\n<dt><kbd>f</kbd></dt>\n<dd><span id=\"index-org_002dagenda_002dbulk_002dcustom_002dfunctions-1\"></span>\n<p>Apply a function<a id=\"DOCF100\" href=\"https://orgmode.org/org.html#FOOT100\"><sup>100</sup></a> to marked entries.  For example, the\nfunction below sets the \u2018<samp>CATEGORY</samp>\u2019 property of the entries to\n\u2018<samp>web</samp>\u2019.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun set-category ()\n  (interactive \"P\")\n  (let ((marker (or (org-get-at-bol 'org-hd-marker)\n                    (org-agenda-error))))\n    (org-with-point-at marker\n      (org-back-to-heading t)\n      (org-set-property \"CATEGORY\" \"web\"))))\n</pre></div>\n</dd>\n</dl>\n</dd>\n</dl>\n\n<span id=\"Calendar-commands\"></span><span id=\"Calendar-commands-1\"></span><h4 class=\"subheading\">Calendar commands</h4>\n\n<span id=\"index-calendar-commands_002c-from-agenda\"></span>\n\n<dl compact=\"compact\">\n<dt><kbd>c</kbd> (<code>org-agenda-goto-calendar</code>)</dt>\n<dd><span id=\"index-c\"></span>\n<span id=\"index-org_002dagenda_002dgoto_002dcalendar\"></span>\n<p>Open the Emacs calendar and go to the date at point in the agenda.\n</p>\n</dd>\n<dt><kbd>c</kbd> (<code>org-calendar-goto-agenda</code>)</dt>\n<dd><span id=\"index-c-1\"></span>\n<span id=\"index-org_002dcalendar_002dgoto_002dagenda\"></span>\n<p>When in the calendar, compute and show the Org agenda for the date\nat point.\n</p>\n</dd>\n<dt><kbd>i</kbd> (<code>org-agenda-diary-entry</code>)</dt>\n<dd><span id=\"index-i\"></span>\n<span id=\"index-org_002dagenda_002ddiary_002dentry\"></span>\n\n<span id=\"index-diary-entries_002c-creating-from-agenda\"></span>\n<p>Insert a new entry into the diary, using the date at point and (for\nblock entries) the date at the mark.  This adds to the Emacs diary\nfile<a id=\"DOCF101\" href=\"https://orgmode.org/org.html#FOOT101\"><sup>101</sup></a>, in a way similar to the <kbd>i</kbd> command in the\ncalendar.  The diary file pops up in another window, where you can\nadd the entry.\n</p>\n<span id=\"index-org_002dagenda_002ddiary_002dfile\"></span>\n<p>If you configure <code>org-agenda-diary-file</code> to point to an Org file,\nOrg creates entries in that file instead.  Most entries are stored\nin a date-based outline tree that will later make it easy to archive\nappointments from previous months/years.  The tree is built under an\nentry with a \u2018<samp>DATE_TREE</samp>\u2019 property, or else with years as top-level\nentries.  Emacs prompts you for the entry text\u2014if you specify it,\nthe entry is created in <code>org-agenda-diary-file</code> without further\ninteraction.  If you directly press <kbd><span class=\"key\">RET</span></kbd> at the prompt\nwithout typing text, the target file is shown in another window for\nyou to finish the entry there.  See also the <kbd>k r</kbd> command.\n</p>\n</dd>\n<dt><kbd>M</kbd> (<code>org-agenda-phases-of-moon</code>)</dt>\n<dd><span id=\"index-M\"></span>\n<span id=\"index-org_002dagenda_002dphases_002dof_002dmoon\"></span>\n<p>Show the phases of the moon for the three months around current\ndate.\n</p>\n</dd>\n<dt><kbd>S</kbd> (<code>org-agenda-sunrise-sunset</code>)</dt>\n<dd><span id=\"index-S-1\"></span>\n<span id=\"index-org_002dagenda_002dsunrise_002dsunset\"></span>\n<p>Show sunrise and sunset times.  The geographical location must be\nset with calendar variables, see the documentation for the Emacs\ncalendar.\n</p>\n</dd>\n<dt><kbd>C</kbd> (<code>org-agenda-convert-date</code>)</dt>\n<dd><span id=\"index-C-1\"></span>\n<span id=\"index-org_002dagenda_002dconvert_002ddate\"></span>\n<p>Convert the date at point into many other cultural and historic\ncalendars.\n</p>\n</dd>\n<dt><kbd>H</kbd> (<code>org-agenda-holidays</code>)</dt>\n<dd><span id=\"index-H\"></span>\n<span id=\"index-org_002dagenda_002dholidays\"></span>\n<p>Show holidays for three months around point date.\n</p></dd>\n</dl>\n\n<span id=\"Quit-and-exit\"></span><span id=\"Quit-and-exit-1\"></span><h4 class=\"subheading\">Quit and exit</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>q</kbd> (<code>org-agenda-quit</code>)</dt>\n<dd><span id=\"index-q-2\"></span>\n<span id=\"index-org_002dagenda_002dquit\"></span>\n\n<p>Quit agenda, remove the agenda buffer.\n</p>\n</dd>\n<dt><kbd>x</kbd> (<code>org-agenda-exit</code>)</dt>\n<dd><span id=\"index-x\"></span>\n<span id=\"index-org_002dagenda_002dexit\"></span>\n\n<span id=\"index-agenda-files_002c-removing-buffers\"></span>\n<p>Exit agenda, remove the agenda buffer and all buffers loaded by\nEmacs for the compilation of the agenda.  Buffers created by the\nuser to visit Org files are not removed.\n</p></dd>\n</dl>\n\n"}, {"id": "116CustomAgendaViews", "content": "\n<span id=\"Custom-Agenda-Views\"></span>\n<span id=\"Custom-Agenda-Views-1\"></span><h3 class=\"section\">11.6 Custom Agenda Views</h3>\n\n<span id=\"index-custom-agenda-views\"></span>\n<span id=\"index-agenda-views_002c-custom\"></span>\n\n<p>Custom agenda commands serve two purposes: to store and quickly access\nfrequently used TODO and tags searches, and to create special\ncomposite agenda buffers.  Custom agenda commands are accessible\nthrough the dispatcher (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>), just like the\ndefault commands.\n</p>\n\n\n"}, {"id": "1161Storingsearches", "content": "\n<span id=\"Storing-searches\"></span>\n<span id=\"Storing-searches-1\"></span><h4 class=\"subsection\">11.6.1 Storing searches</h4>\n\n<p>The first application of custom searches is the definition of keyboard\nshortcuts for frequently used searches, either creating an agenda\nbuffer, or a sparse tree (the latter covering of course only the\ncurrent buffer).\n</p>\n<span id=\"index-C-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dagenda_002dcustom_002dcommands-1\"></span>\n<span id=\"index-agenda-views_002c-main-example\"></span>\n<span id=\"index-agenda_002c-as-an-agenda-views\"></span>\n<span id=\"index-agenda_002a_002c-as-an-agenda-views\"></span>\n<span id=\"index-tags_002c-as-an-agenda-view\"></span>\n<span id=\"index-todo_002c-as-an-agenda-view\"></span>\n<span id=\"index-tags_002dtodo\"></span>\n<span id=\"index-todo_002dtree\"></span>\n<span id=\"index-occur_002dtree\"></span>\n<span id=\"index-tags_002dtree\"></span>\n<p>Custom commands are configured in the variable\n<code>org-agenda-custom-commands</code>.  You can customize this variable, for\nexample by pressing <kbd>C</kbd> from the agenda dispatcher (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).  You can also directly set it with Emacs Lisp in\nthe Emacs init file.  The following example contains all valid agenda\nviews:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"x\" agenda)\n        (\"y\" agenda*)\n        (\"w\" todo \"WAITING\")\n        (\"W\" todo-tree \"WAITING\")\n        (\"u\" tags \"+boss-urgent\")\n        (\"v\" tags-todo \"+boss-urgent\")\n        (\"U\" tags-tree \"+boss-urgent\")\n        (\"f\" occur-tree \"\\\\&lt;FIXME\\\\&gt;\")\n        (\"h\" . \"HOME+Name tags searches\") ;description for \"h\" prefix\n        (\"hl\" tags \"+home+Lisa\")\n        (\"hp\" tags \"+home+Peter\")\n        (\"hk\" tags \"+home+Kim\")))\n</pre></div>\n\n<p>The initial string in each entry defines the keys you have to press\nafter the dispatcher command in order to access the command.  Usually\nthis is just a single character, but if you have many similar\ncommands, you can also define two-letter combinations where the first\ncharacter is the same in several combinations and serves as a prefix\nkey<a id=\"DOCF102\" href=\"https://orgmode.org/org.html#FOOT102\"><sup>102</sup></a>.  The second parameter is the search type, followed by the\nstring or regular expression to be used for the matching.  The example\nabove will therefore define:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>x</kbd></dt>\n<dd><p>as a global search for agenda entries planned<a id=\"DOCF103\" href=\"https://orgmode.org/org.html#FOOT103\"><sup>103</sup></a> this week/day.\n</p>\n</dd>\n<dt><kbd>y</kbd></dt>\n<dd><p>as the same search, but only for entries with an hour specification\nlike \u2018<samp>[h]h:mm</samp>\u2019\u2014think of them as appointments.\n</p>\n</dd>\n<dt><kbd>w</kbd></dt>\n<dd><p>as a global search for TODO entries with \u2018<samp>WAITING</samp>\u2019 as the TODO\nkeyword.\n</p>\n</dd>\n<dt><kbd>W</kbd></dt>\n<dd><p>as the same search, but only in the current buffer and displaying\nthe results as a sparse tree.\n</p>\n</dd>\n<dt><kbd>u</kbd></dt>\n<dd><p>as a global tags search for headlines tagged \u2018<samp>boss</samp>\u2019 but not\n\u2018<samp>urgent</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>v</kbd></dt>\n<dd><p>The same search, but limiting it to headlines that are also TODO\nitems.\n</p>\n</dd>\n<dt><kbd>U</kbd></dt>\n<dd><p>as the same search, but only in the current buffer and displaying\nthe result as a sparse tree.\n</p>\n</dd>\n<dt><kbd>f</kbd></dt>\n<dd><p>to create a sparse tree (again, current buffer only) with all\nentries containing the word \u2018<samp>FIXME</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>h</kbd></dt>\n<dd><p>as a prefix command for a \u2018<samp>HOME</samp>\u2019 tags search where you have to press\nan additional key (<kbd>l</kbd>, <kbd>p</kbd> or <kbd>k</kbd>) to\nselect a name (Lisa, Peter, or Kim) as additional tag to match.\n</p></dd>\n</dl>\n\n<p>Note that <code>*-tree</code> agenda views need to be called from an Org buffer\nas they operate on the current buffer only.\n</p>\n"}, {"id": "1162Blockagenda", "content": "\n<span id=\"Block-agenda\"></span>\n<span id=\"Block-agenda-1\"></span><h4 class=\"subsection\">11.6.2 Block agenda</h4>\n\n<span id=\"index-block-agenda\"></span>\n<span id=\"index-agenda_002c-with-block-views\"></span>\n\n<p>Another possibility is the construction of agenda views that comprise\nthe results of <em>several</em> commands, each of which creates a block in\nthe agenda buffer.  The available commands include <code>agenda</code> for the\ndaily or weekly agenda (as created with <kbd>a</kbd>) , <code>alltodo</code> for\nthe global TODO list (as constructed with <kbd>t</kbd>), <code>stuck</code> for\nthe list of stuck projects (as obtained with <kbd>#</kbd>) and the\nmatching commands discussed above: <code>todo</code>, <code>tags</code>, and <code>tags-todo</code>.\n</p>\n<p>Here are two examples:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"h\" \"Agenda and Home-related tasks\"\n         ((agenda \"\")\n          (tags-todo \"home\")\n          (tags \"garden\")))\n        (\"o\" \"Agenda and Office-related tasks\"\n         ((agenda \"\")\n          (tags-todo \"work\")\n          (tags \"office\")))))\n</pre></div>\n\n<p>This defines <kbd>h</kbd> to create a multi-block view for stuff you\nneed to attend to at home.  The resulting agenda buffer contains your\nagenda for the current week, all TODO items that carry the tag \u2018<samp>home</samp>\u2019,\nand also all lines tagged with \u2018<samp>garden</samp>\u2019.  Finally the command\n<kbd>o</kbd> provides a similar view for office tasks.\n</p>\n"}, {"id": "1163Settingoptionsforcustomcommands", "content": "\n<span id=\"Setting-options\"></span>\n<span id=\"Setting-options-for-custom-commands\"></span><h4 class=\"subsection\">11.6.3 Setting options for custom commands</h4>\n\n<span id=\"index-options_002c-for-custom-agenda-views\"></span>\n\n<span id=\"index-org_002dagenda_002dcustom_002dcommands-2\"></span>\n<p>Org mode contains a number of variables regulating agenda construction\nand display.  The global variables define the behavior for all agenda\ncommands, including the custom commands.  However, if you want to\nchange some settings just for a single custom view, you can do so.\nSetting options requires inserting a list of variable names and values\nat the right spot in <code>org-agenda-custom-commands</code>.  For example:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"w\" todo \"WAITING\"\n         ((org-agenda-sorting-strategy '(priority-down))\n          (org-agenda-prefix-format \"  Mixed: \")))\n        (\"U\" tags-tree \"+boss-urgent\"\n         ((org-show-context-detail 'minimal)))\n        (\"N\" search \"\"\n         ((org-agenda-files '(\"~org/notes.org\"))\n          (org-agenda-text-search-extra-files nil)))))\n</pre></div>\n\n<p>Now the <kbd>w</kbd> command sorts the collected entries only by\npriority, and the prefix format is modified to just say \u2018<samp>Mixed:</samp>\u2019\ninstead of giving the category of the entry.  The sparse tags tree of\n<kbd>U</kbd> now turns out ultra-compact, because neither the headline\nhierarchy above the match, nor the headline following the match are\nshown.  The command <kbd>N</kbd> does a text search limited to only\na single file.\n</p>\n<p>For command sets creating a block agenda, <code>org-agenda-custom-commands</code>\nhas two separate spots for setting options.  You can add options that\nshould be valid for just a single command in the set, and options that\nshould be valid for all commands in the set.  The former are just\nadded to the command entry; the latter must come after the list of\ncommand entries.  Going back to the block agenda example (see <a href=\"https://orgmode.org/org.html#Block-agenda\">Block agenda</a>), let\u2019s change the sorting strategy for the <kbd>h</kbd>\ncommands to <code>priority-down</code>, but let\u2019s sort the results for \u2018<samp>garden</samp>\u2019\ntags query in the opposite order, <code>priority-up</code>.  This would look like\nthis:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"h\" \"Agenda and Home-related tasks\"\n         ((agenda)\n          (tags-todo \"home\")\n          (tags \"garden\"\n                ((org-agenda-sorting-strategy '(priority-up)))))\n         ((org-agenda-sorting-strategy '(priority-down))))\n        (\"o\" \"Agenda and Office-related tasks\"\n         ((agenda)\n          (tags-todo \"work\")\n          (tags \"office\")))))\n</pre></div>\n\n<p>As you see, the values and parentheses setting is a little complex.\nWhen in doubt, use the customize interface to set this variable\u2014it\nfully supports its structure.  Just one caveat: when setting options\nin this interface, the <em>values</em> are just Lisp expressions.  So if the\nvalue is a string, you need to add the double-quotes around the value\nyourself.\n</p>\n<span id=\"index-org_002dagenda_002dcustom_002dcommands_002dcontexts\"></span>\n<p>To control whether an agenda command should be accessible from\na specific context, you can customize\n<code>org-agenda-custom-commands-contexts</code>.  Let\u2019s say for example that you\nhave an agenda command <kbd>o</kbd> displaying a view that you only\nneed when reading emails.  Then you would configure this option like\nthis:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands-contexts\n      '((\"o\" (in-mode . \"message-mode\"))))\n</pre></div>\n\n<p>You can also tell that the command key <kbd>o</kbd> should refer to\nanother command key <kbd>r</kbd>.  In that case, add this command key\nlike this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands-contexts\n      '((\"o\" \"r\" (in-mode . \"message-mode\"))))\n</pre></div>\n\n<p>See the docstring of the variable for more information.\n</p>\n"}, {"id": "117ExportingAgendaViews", "content": "\n<span id=\"Exporting-Agenda-Views\"></span>\n<span id=\"Exporting-Agenda-Views-1\"></span><h3 class=\"section\">11.7 Exporting Agenda Views</h3>\n\n<span id=\"index-agenda-views_002c-exporting\"></span>\n\n<p>If you are away from your computer, it can be very useful to have\na printed version of some agenda views to carry around.  Org mode can\nexport custom agenda views as plain text, HTML<a id=\"DOCF104\" href=\"https://orgmode.org/org.html#FOOT104\"><sup>104</sup></a>, Postscript,\nPDF<a id=\"DOCF105\" href=\"https://orgmode.org/org.html#FOOT105\"><sup>105</sup></a>, and iCalendar files.  If you want to do this only\noccasionally, use the following command:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-x C-w</kbd> (<code>org-agenda-write</code>)</dt>\n<dd><span id=\"index-C_002dx-C_002dw\"></span>\n<span id=\"index-org_002dagenda_002dwrite\"></span>\n<span id=\"index-exporting-agenda-views\"></span>\n<span id=\"index-agenda-views_002c-exporting-1\"></span>\n\n<span id=\"index-org_002dagenda_002dexporter_002dsettings\"></span>\n<p>Write the agenda view to a file.\n</p></dd>\n</dl>\n\n<p>If you need to export certain agenda views frequently, you can\nassociate any custom agenda command with a list of output file\nnames<a id=\"DOCF106\" href=\"https://orgmode.org/org.html#FOOT106\"><sup>106</sup></a>.  Here is an example that first defines custom commands\nfor the agenda and the global TODO list, together with a number of\nfiles to which to export them.  Then we define two block agenda\ncommands and specify file names for them as well.  File names can be\nrelative to the current working directory, or absolute.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"X\" agenda \"\" nil (\"agenda.html\" \"agenda.ps\"))\n        (\"Y\" alltodo \"\" nil (\"todo.html\" \"todo.txt\" \"todo.ps\"))\n        (\"h\" \"Agenda and Home-related tasks\"\n         ((agenda \"\")\n          (tags-todo \"home\")\n          (tags \"garden\"))\n         nil\n         (\"~/views/home.html\"))\n        (\"o\" \"Agenda and Office-related tasks\"\n         ((agenda)\n          (tags-todo \"work\")\n          (tags \"office\"))\n         nil\n         (\"~/views/office.ps\" \"~/calendars/office.ics\"))))\n</pre></div>\n\n<p>The extension of the file name determines the type of export.  If it\nis \u2018<samp>.html</samp>\u2019, Org mode uses the htmlize package to convert the buffer to\nHTML and save it to this file name.  If the extension is \u2018<samp>.ps</samp>\u2019,\n<code>ps-print-buffer-with-faces</code> is used to produce Postscript output.  If\nthe extension is \u2018<samp>.ics</samp>\u2019, iCalendar export is run export over all files\nthat were used to construct the agenda, and limit the export to\nentries listed in the agenda.  Any other extension produces a plain\nASCII file.\n</p>\n<p>The export files are <em>not</em> created when you use one of those\ncommands interactively because this might use too much overhead.\nInstead, there is a special command to produce <em>all</em> specified\nfiles in one step:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>e</kbd> (<code>org-store-agenda-views</code>)</dt>\n<dd><span id=\"index-e-_0028Agenda-dispatcher_0029\"></span>\n<span id=\"index-org_002dstore_002dagenda_002dviews\"></span>\n<p>Export all agenda views that have export file names associated with\nthem.\n</p></dd>\n</dl>\n\n<p>You can use the options section of the custom agenda commands to also\nset options for the export commands.  For example:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-custom-commands\n      '((\"X\" agenda \"\"\n         ((ps-number-of-columns 2)\n          (ps-landscape-mode t)\n          (org-agenda-prefix-format \" [ ] \")\n          (org-agenda-with-colors nil)\n          (org-agenda-remove-tags t))\n         (\"theagenda.ps\"))))\n</pre></div>\n\n<p><span id=\"index-org_002dagenda_002dexporter_002dsettings-1\"></span>\nThis command sets two options for the Postscript exporter, to make it\nprint in two columns in landscape format\u2014the resulting page can be\ncut in two and then used in a paper agenda.  The remaining settings\nmodify the agenda prefix to omit category and scheduling information,\nand instead include a checkbox to check off items.  We also remove the\ntags to make the lines compact, and we do not want to use colors for\nthe black-and-white printer.  Settings specified in\n<code>org-agenda-exporter-settings</code> also apply, e.g.,\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-exporter-settings\n      '((ps-number-of-columns 2)\n        (ps-landscape-mode t)\n        (org-agenda-add-entry-text-maxlines 5)\n        (htmlize-output-type 'css)))\n</pre></div>\n\n<p>but the settings in <code>org-agenda-custom-commands</code> take precedence.\n</p>\n<p>From the command line you may also use:\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacs -eval (org-batch-store-agenda-views) -kill\n</pre></div>\n\n<p>or, if you need to modify some parameters<a id=\"DOCF107\" href=\"https://orgmode.org/org.html#FOOT107\"><sup>107</sup></a>\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacs -eval '(org-batch-store-agenda-views                      \\\n              org-agenda-span (quote month)                     \\\n              org-agenda-start-day \"2007-11-01\"                 \\\n              org-agenda-include-diary nil                      \\\n              org-agenda-files (quote (\"~/org/project.org\")))'  \\\n      -kill\n</pre></div>\n\n<p>which creates the agenda views restricted to the file\n\u2018<samp>~/org/project.org</samp>\u2019, without diary entries and with a 30-day extent.\n</p>\n<p>You can also extract agenda information in a way that allows further\nprocessing by other programs.  See <a href=\"https://orgmode.org/org.html#Extracting-Agenda-Information\">Extracting Agenda Information</a>, for\nmore information.\n</p>\n"}, {"id": "118UsingColumnViewintheAgenda", "content": "\n<span id=\"Agenda-Column-View\"></span>\n<span id=\"Using-Column-View-in-the-Agenda\"></span><h3 class=\"section\">11.8 Using Column View in the Agenda</h3>\n\n<span id=\"index-column-view_002c-in-agenda\"></span>\n<span id=\"index-agenda_002c-column-view\"></span>\n\n<p>Column view (see <a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>) is normally used to view and edit\nproperties embedded in the hierarchical structure of an Org file.  It\ncan be quite useful to use column view also from the agenda, where\nentries are collected by certain criteria.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-c</kbd> (<code>org-agenda-columns</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dc-2\"></span>\n<span id=\"index-org_002dagenda_002dcolumns-1\"></span>\n\n<p>Turn on column view in the agenda.\n</p></dd>\n</dl>\n\n<p>To understand how to use this properly, it is important to realize\nthat the entries in the agenda are no longer in their proper outline\nenvironment.  This causes the following issues:\n</p>\n<ol>\n<li> <span id=\"index-org_002dcolumns_002ddefault_002dformat_002dfor_002dagenda\"></span>\n<span id=\"index-org_002dcolumns_002ddefault_002dformat-3\"></span>\nOrg needs to make a decision which columns format to use.  Since\nthe entries in the agenda are collected from different files, and\ndifferent files may have different columns formats, this is a\nnon-trivial problem.  Org first checks if\n<code>org-overriding-columns-format</code> is currently set, and if so, takes\nthe format from there.  You should set this variable only in the\n<em>local settings section</em> of a custom agenda command (see <a href=\"https://orgmode.org/org.html#Custom-Agenda-Views\">Custom Agenda Views</a>) to make it valid for that specific agenda view.  If\nno such binding exists, it checks, in sequence,\n<code>org-columns-default-format-for-agenda</code>, the format associated with\nthe first item in the agenda (through a property or a \u2018<samp>#+COLUMNS</samp>\u2019\nsetting in that buffer) and finally <code>org-columns-default-format</code>.\n\n</li><li> <span id=\"index-CLOCKSUM_002c-special-property-1\"></span>\nIf any of the columns has a summary type defined (see <a href=\"https://orgmode.org/org.html#Column-attributes\">Column attributes</a>), turning on column view in the agenda visits all\nrelevant agenda files and make sure that the computations of this\nproperty are up to date.  This is also true for the special\n\u2018<samp>CLOCKSUM</samp>\u2019 property.  Org then sums the values displayed in the\nagenda.  In the daily/weekly agenda, the sums cover a single day;\nin all other views they cover the entire block.\n\n<p>It is important to realize that the agenda may show the same entry\n<em>twice</em>\u2014for example as scheduled and as a deadline\u2014and it may\nshow two entries from the same hierarchy (for example a <em>parent</em>\nand its <em>child</em>).  In these cases, the summation in the agenda\nleads to incorrect results because some values count double.\n</p>\n</li><li> When the column view in the agenda shows the \u2018<samp>CLOCKSUM</samp>\u2019 property,\nthat is always the entire clocked time for this item.  So even in\nthe daily/weekly agenda, the clocksum listed in column view may\noriginate from times outside the current view.  This has the\nadvantage that you can compare these values with a column listing\nthe planned total effort for a task\u2014one of the major\napplications for column view in the agenda.  If you want\ninformation about clocked time in the displayed period use clock\ntable mode (press <kbd>R</kbd> in the agenda).\n\n</li><li> <span id=\"index-CLOCKSUM_005fT_002c-special-property-1\"></span>\nWhen the column view in the agenda shows the \u2018<samp>CLOCKSUM_T</samp>\u2019 property,\nthat is always today\u2019s clocked time for this item.  So even in the\nweekly agenda, the clocksum listed in column view only originates\nfrom today.  This lets you compare the time you spent on a task for\ntoday, with the time already spent\u2014via \u2018<samp>CLOCKSUM</samp>\u2019\u2014and with\nthe planned total effort for it.\n</li></ol>\n\n"}, {"id": "12MarkupforRichContents", "content": "\n<span id=\"Markup-for-Rich-Contents\"></span>\n<span id=\"Markup-for-Rich-Contents-1\"></span><h2 class=\"chapter\">12 Markup for Rich Contents</h2>\n\n<p>Org is primarily about organizing and searching through your\nplain-text notes.  However, it also provides a lightweight yet robust\nmarkup language for rich text formatting and more.  For instance, you\nmay want to center or emphasize text.  Or you may need to insert\na formula or image in your writing.  Org offers syntax for all of this\nand more.  Used in conjunction with the export framework (see\n<a href=\"https://orgmode.org/org.html#Exporting\">Exporting</a>), you can author beautiful documents in Org\u2014like the fine\nmanual you are currently reading.\n</p>\n\n\n"}, {"id": "121Paragraphs", "content": "\n<span id=\"Paragraphs\"></span>\n<span id=\"Paragraphs-1\"></span><h3 class=\"section\">12.1 Paragraphs</h3>\n\n<span id=\"index-paragraphs_002c-markup-rules\"></span>\n<p>Paragraphs are separated by at least one empty line.  If you need to\nenforce a line break within a paragraph, use \u2018<samp>\\\\</samp>\u2019 at the end of\na line.\n</p>\n<span id=\"index-line-breaks_002c-markup-rules\"></span>\n<p>To preserve the line breaks, indentation and blank lines in a region,\nbut otherwise use normal formatting, you can use this construct, which\ncan also be used to format poetry.\n</p>\n<span id=\"index-BEGIN_005fVERSE\"></span>\n<span id=\"index-verse-blocks\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_VERSE\n Great clouds overhead\n Tiny black birds rise and fall\n Snow covers Emacs\n\n    ---AlexSchroeder\n#+END_VERSE\n</pre></div>\n\n<p>When quoting a passage from another document, it is customary to\nformat this as a paragraph that is indented on both the left and the\nright margin.  You can include quotations in Org documents like this:\n</p>\n<span id=\"index-BEGIN_005fQUOTE\"></span>\n<span id=\"index-quote-blocks\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_QUOTE\nEverything should be made as simple as possible,\nbut not any simpler ---Albert Einstein\n#+END_QUOTE\n</pre></div>\n\n<p>If you would like to center some text, do it like this:\n</p>\n<span id=\"index-BEGIN_005fCENTER\"></span>\n<span id=\"index-center-blocks\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_CENTER\nEverything should be made as simple as possible, \\\\\nbut not any simpler\n#+END_CENTER\n</pre></div>\n\n"}, {"id": "122EmphasisandMonospace", "content": "\n<span id=\"Emphasis-and-Monospace\"></span>\n<span id=\"Emphasis-and-Monospace-1\"></span><h3 class=\"section\">12.2 Emphasis and Monospace</h3>\n\n<span id=\"index-underlined-text_002c-markup-rules\"></span>\n<span id=\"index-bold-text_002c-markup-rules\"></span>\n<span id=\"index-italic-text_002c-markup-rules\"></span>\n<span id=\"index-verbatim-text_002c-markup-rules\"></span>\n<span id=\"index-code-text_002c-markup-rules\"></span>\n<span id=\"index-strike_002dthrough-text_002c-markup-rules\"></span>\n\n<p>You can make words \u2018<samp>*bold*</samp>\u2019, \u2018<samp>/italic/</samp>\u2019, \u2018<samp>_underlined_</samp>\u2019, \u2018<samp>=verbatim=</samp>\u2019\nand \u2018<samp>~code~</samp>\u2019, and, if you must, \u2018<samp>+strike-through+</samp>\u2019.  Text in the code\nand verbatim string is not processed for Org specific syntax; it is\nexported verbatim.\n</p>\n<span id=\"index-org_002dfontify_002demphasized_002dtext\"></span>\n<p>To turn off fontification for marked up text, you can set\n<code>org-fontify-emphasized-text</code> to <code>nil</code>.  To narrow down the list of\navailable markup syntax, you can customize <code>org-emphasis-alist</code>.\n</p>\n<p>Sometimes, when marked text also contains the marker character itself,\nthe result may be unsettling.  For example,\n</p>\n<div class=\"example\">\n<pre class=\"example\">/One may expect this whole sentence to be italicized, but the\nfollowing ~user/?variable~ contains =/= character, which effectively\nstops emphasis there./\n</pre></div>\n\n<p>You can use zero width space to help Org sorting out the ambiguity.\nSee <a href=\"https://orgmode.org/org.html#Escape-Character\">Escape Character</a> for more details.\n</p>\n"}, {"id": "123SubscriptsandSuperscripts", "content": "\n<span id=\"Subscripts-and-Superscripts\"></span>\n<span id=\"Subscripts-and-Superscripts-1\"></span><h3 class=\"section\">12.3 Subscripts and Superscripts</h3>\n\n<span id=\"index-subscript\"></span>\n<span id=\"index-superscript\"></span>\n\n<p>\u2018<samp>^</samp>\u2019 and \u2018<samp>_</samp>\u2019 are used to indicate super- and subscripts.  To increase\nthe readability of ASCII text, it is not necessary, but OK, to\nsurround multi-character sub- and superscripts with curly braces.  For\nexample\n</p>\n<div class=\"example\">\n<pre class=\"example\">The radius of the sun is R_sun = 6.96 x 10^8 m.  On the other hand,\nthe radius of Alpha Centauri is R_{Alpha Centauri} = 1.28 x R_{sun}.\n</pre></div>\n\n<span id=\"index-org_002duse_002dsub_002dsuperscripts\"></span>\n<p>If you write a text where the underscore is often used in a different\ncontext, Org\u2019s convention to always interpret these as subscripts can\nget in your way.  Configure the variable <code>org-use-sub-superscripts</code> to\nchange this convention.  For example, when setting this variable to\n<code>{}</code>, \u2018<samp>a_b</samp>\u2019 is not interpreted as a subscript, but \u2018<samp>a_{b}</samp>\u2019 is.\n</p>\n<p>You can set <code>org-use-sub-superscripts</code> in a file using the export\noption \u2018<samp>^:</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).  For example, \u2018<samp>#+OPTIONS: ^:{}</samp>\u2019\nsets <code>org-use-sub-superscripts</code> to <code>{}</code> and limits super- and\nsubscripts to the curly bracket notation.\n</p>\n<p>You can also toggle the visual display of super- and subscripts:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x \\</kbd> (<code>org-toggle-pretty-entities</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_005c\"></span>\n<span id=\"index-org_002dtoggle_002dpretty_002dentities\"></span>\n<p>This command formats sub- and superscripts in a WYSIWYM way.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dpretty_002dentities\"></span>\n<span id=\"index-org_002dpretty_002dentities_002dinclude_002dsub_002dsuperscripts\"></span>\n<p>Set both <code>org-pretty-entities</code> and\n<code>org-pretty-entities-include-sub-superscripts</code> to <code>t</code> to start with\nsuper- and subscripts <em>visually</em> interpreted as specified by the\noption <code>org-use-sub-superscripts</code>.\n</p>\n"}, {"id": "124SpecialSymbols", "content": "\n<span id=\"Special-Symbols\"></span>\n<span id=\"Special-Symbols-1\"></span><h3 class=\"section\">12.4 Special Symbols</h3>\n\n<span id=\"index-math-symbols\"></span>\n<span id=\"index-special-symbols\"></span>\n<span id=\"index-entities\"></span>\n\n<p>You can use LaTeX-like syntax to insert special symbols\u2014named\nentities\u2014like \u2018<samp>\\alpha</samp>\u2019 to indicate the Greek letter, or \u2018<samp>\\to</samp>\u2019 to indicate\nan arrow.  Completion for these symbols is available, just type \u2018<samp>\\</samp>\u2019\nand maybe a few letters, and press <kbd>M-<span class=\"key\">TAB</span></kbd> to see possible\ncompletions.  If you need such a symbol inside a word, terminate it\nwith a pair of curly brackets.  For example\n</p>\n<div class=\"example\">\n<pre class=\"example\">Pro tip: Given a circle \\Gamma of diameter d, the length of its\ncircumference is \\pi{}d.\n</pre></div>\n\n<span id=\"index-org_002dentities_002dhelp\"></span>\n<span id=\"index-org_002dentities_002duser\"></span>\n<p>A large number of entities is provided, with names taken from both\nHTML and LaTeX; you can comfortably browse the complete list from\na dedicated buffer using the command <code>org-entities-help</code>.  It is also\npossible to provide your own special symbols in the variable\n<code>org-entities-user</code>.\n</p>\n<p>During export, these symbols are transformed into the native format of\nthe exporter back-end.  Strings like \u2018<samp>\\alpha</samp>\u2019 are exported as \u2018<samp>&amp;alpha;</samp>\u2019 in\nthe HTML output, and as \u2018<samp>\\(\\alpha\\)</samp>\u2019 in the LaTeX output.  Similarly, \u2018<samp>\\nbsp</samp>\u2019\nbecomes \u2018<samp>&amp;nbsp;</samp>\u2019 in HTML and \u2018<samp>~</samp>\u2019 in LaTeX.\n</p>\n<span id=\"index-special-symbols_002c-in_002dbuffer-display\"></span>\n<p>If you would like to see entities displayed as UTF-8 characters, use\nthe following command<a id=\"DOCF108\" href=\"https://orgmode.org/org.html#FOOT108\"><sup>108</sup></a>:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x \\</kbd> (<code>org-toggle-pretty-entities</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-_005c-1\"></span>\n<span id=\"index-org_002dtoggle_002dpretty_002dentities-1\"></span>\n\n<p>Toggle display of entities as UTF-8 characters.  This does not\nchange the buffer content which remains plain ASCII, but it overlays\nthe UTF-8 character for display purposes only.\n</p></dd>\n</dl>\n\n<span id=\"index-shy-hyphen_002c-special-symbol\"></span>\n<span id=\"index-dash_002c-special-symbol\"></span>\n<span id=\"index-ellipsis_002c-special-symbol\"></span>\n<p>In addition to regular entities defined above, Org exports in\na special way<a id=\"DOCF109\" href=\"https://orgmode.org/org.html#FOOT109\"><sup>109</sup></a> the following commonly used character\ncombinations: \u2018<samp>\\-</samp>\u2019 is treated as a shy hyphen, \u2018<samp>--</samp>\u2019 and \u2018<samp>---</samp>\u2019 are\nconverted into dashes, and \u2018<samp>...</samp>\u2019 becomes a compact set of dots.\n</p>\n"}, {"id": "125EmbeddedLaTeX", "content": "\n<span id=\"Embedded-LaTeX\"></span>\n<span id=\"Embedded-LaTeX-1\"></span><h3 class=\"section\">12.5 Embedded LaTeX</h3>\n\n<span id=\"index-TeX-interpretation\"></span>\n<span id=\"index-LaTeX-interpretation\"></span>\n\n<p>Plain ASCII is normally sufficient for almost all note taking.\nExceptions include scientific notes, which often require mathematical\nsymbols and the occasional formula.  LaTeX<a id=\"DOCF110\" href=\"https://orgmode.org/org.html#FOOT110\"><sup>110</sup></a> is widely used to\ntypeset scientific documents.  Org mode supports embedding LaTeX code\ninto its files, because many academics are used to writing and reading\nLaTeX source code, and because it can be readily processed to produce\npretty output for a number of export back-ends.\n</p>\n\n\n"}, {"id": "1251LaTeXfragments", "content": "\n<span id=\"LaTeX-fragments\"></span>\n<span id=\"LaTeX-fragments-1\"></span><h4 class=\"subsection\">12.5.1 LaTeX fragments</h4>\n\n<span id=\"index-LaTeX-fragments\"></span>\n\n<span id=\"index-org_002dformat_002dlatex_002dheader\"></span>\n<p>Org mode can contain LaTeX math fragments, and it supports ways to\nprocess these for several export back-ends.  When exporting to LaTeX,\nthe code is left as it is.  When exporting to HTML, Org can use either\n<a href=\"https://www.mathjax.org/\">MathJax</a> (see <a href=\"https://orgmode.org/org.html#Math-formatting-in-HTML-export\">Math formatting in HTML export</a>) or transcode the math\ninto images (see <a href=\"https://orgmode.org/org.html#Previewing-LaTeX-fragments\">Previewing LaTeX fragments</a>).\n</p>\n<p>LaTeX fragments do not need any special marking at all.  The following\nsnippets are identified as LaTeX source code:\n</p>\n<ul>\n<li> Environments of any kind<a id=\"DOCF111\" href=\"https://orgmode.org/org.html#FOOT111\"><sup>111</sup></a>.  The only requirement is that the\n\u2018<samp>\\begin</samp>\u2019 statement appears on a new line, preceded by only\nwhitespace.\n\n</li><li> Text within the usual LaTeX math delimiters.  To avoid conflicts\nwith currency specifications, single \u2018<samp>$</samp>\u2019 characters are only\nrecognized as math delimiters if the enclosed text contains at most\ntwo line breaks, is directly attached to the \u2018<samp>$</samp>\u2019 characters with no\nwhitespace in between, and if the closing \u2018<samp>$</samp>\u2019 is followed by\nwhitespace, punctuation or a dash.  For the other delimiters, there\nis no such restriction, so when in doubt, use \u2018<samp>\\(...\\)</samp>\u2019 as inline\nmath delimiters.\n</li></ul>\n\n<p>For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">\\begin{equation}                        % arbitrary environments,\nx=\\sqrt{b}                              % even tables, figures\n\\end{equation}                          % etc\n\nIf $a^2=b$ and \\( b=2 \\), then the solution must be\neither $$ a=+\\sqrt{2} $$ or \\[ a=-\\sqrt{2} \\].\n</pre></div>\n\n<span id=\"index-org_002dexport_002dwith_002dlatex\"></span>\n<p>LaTeX processing can be configured with the variable\n<code>org-export-with-latex</code>.  The default setting is <code>t</code> which means\nMathJax for HTML, and no processing for ASCII and LaTeX back-ends.\nYou can also set this variable on a per-file basis using one of these\nlines:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>#+OPTIONS: tex:t</samp>\u2019</td><td>Do the right thing automatically (MathJax)</td></tr>\n<tr><td>\u2018<samp>#+OPTIONS: tex:nil</samp>\u2019</td><td>Do not process LaTeX fragments at all</td></tr>\n<tr><td>\u2018<samp>#+OPTIONS: tex:verbatim</samp>\u2019</td><td>Verbatim export, for jsMath or so</td></tr>\n</tbody></table>\n\n"}, {"id": "1252PreviewingLaTeXfragments", "content": "\n<span id=\"Previewing-LaTeX-fragments\"></span>\n<span id=\"Previewing-LaTeX-fragments-1\"></span><h4 class=\"subsection\">12.5.2 Previewing LaTeX fragments</h4>\n\n<span id=\"index-LaTeX-fragments_002c-preview\"></span>\n\n<span id=\"index-org_002dpreview_002dlatex_002ddefault_002dprocess\"></span>\n<p>If you have a working LaTeX installation and \u2018<samp>dvipng</samp>\u2019, \u2018<samp>dvisvgm</samp>\u2019 or\n\u2018<samp>convert</samp>\u2019 installed<a id=\"DOCF112\" href=\"https://orgmode.org/org.html#FOOT112\"><sup>112</sup></a>, LaTeX fragments can be processed to\nproduce images of the typeset expressions to be used for inclusion\nwhile exporting to HTML (see <a href=\"https://orgmode.org/org.html#LaTeX-fragments\">LaTeX fragments</a>), or for inline\npreviewing within Org mode.\n</p>\n<span id=\"index-org_002dformat_002dlatex_002doptions\"></span>\n<span id=\"index-org_002dformat_002dlatex_002dheader-1\"></span>\n<p>You can customize the variables <code>org-format-latex-options</code> and\n<code>org-format-latex-header</code> to influence some aspects of the preview.\nIn particular, the <code>:scale</code> (and for HTML export, <code>:html-scale</code>)\nproperty of the former can be used to adjust the size of the preview\nimages.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-l</kbd> (<code>org-latex-preview</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dl\"></span>\n<span id=\"index-org_002dlatex_002dpreview\"></span>\n\n<p>Produce a preview image of the LaTeX fragment at point and overlay\nit over the source code.  If there is no fragment at point, process\nall fragments in the current entry\u2014between two headlines.\n</p>\n<p>When called with a single prefix argument, clear all images in the\ncurrent entry.  Two prefix arguments produce a preview image for all\nfragments in the buffer, while three of them clear all the images in\nthat buffer.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dstartup_002dwith_002dlatex_002dpreview\"></span>\n<p>You can turn on the previewing of all LaTeX fragments in a file with\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: latexpreview\n</pre></div>\n\n\n<p>To disable it, simply use\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: nolatexpreview\n</pre></div>\n\n"}, {"id": "1253UsingCDLaTeXtoentermath", "content": "\n<span id=\"CDLaTeX-mode\"></span>\n<span id=\"Using-CDLaTeX-to-enter-math\"></span><h4 class=\"subsection\">12.5.3 Using CDLaTeX to enter math</h4>\n\n<span id=\"index-CDLaTeX\"></span>\n\n<p>CDLaTeX mode is a minor mode that is normally used in combination with\na major LaTeX mode like AUCTeX in order to speed-up insertion of\nenvironments and math templates.  Inside Org mode, you can make use of\nsome of the features of CDLaTeX mode.  You need to install\n\u2018<samp>cdlatex.el</samp>\u2019 and \u2018<samp>texmathp.el</samp>\u2019 (the latter comes also with AUCTeX)\nusing <a href=\"https://melpa.org/\">MELPA</a> with the <a href=\"https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html\">Emacs packaging system</a> or alternatively from\n<a href=\"https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/\">https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/</a>.  Do not use\nCDLaTeX mode itself under Org mode, but use the special version Org\nCDLaTeX minor mode that comes as part of Org.  Turn it on for the\ncurrent buffer with <kbd>M-x org-cdlatex-mode</kbd>, or for all Org\nfiles with\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'org-mode-hook #'turn-on-org-cdlatex)\n</pre></div>\n\n<p>When this mode is enabled, the following features are present (for\nmore details see the documentation of CDLaTeX mode):\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c {</kbd></dt>\n<dd><span id=\"index-C_002dc-_007b-1\"></span>\n\n<p>Insert an environment template.\n</p>\n</dd>\n<dt><kbd><span class=\"key\">TAB</span></kbd></dt>\n<dd><span id=\"index-TAB-7\"></span>\n\n<p>The <kbd><span class=\"key\">TAB</span></kbd> key expands the template if point is inside\na LaTeX fragment<a id=\"DOCF113\" href=\"https://orgmode.org/org.html#FOOT113\"><sup>113</sup></a>.  For example, <kbd><span class=\"key\">TAB</span></kbd> expands \u2018<samp>fr</samp>\u2019\nto \u2018<samp>\\frac{}{}</samp>\u2019 and position point correctly inside the first brace.\nAnother <kbd><span class=\"key\">TAB</span></kbd> gets you into the second brace.\n</p>\n<p>Even outside fragments, <kbd><span class=\"key\">TAB</span></kbd> expands environment\nabbreviations at the beginning of a line.  For example, if you write\n\u2018<samp>equ</samp>\u2019 at the beginning of a line and press <kbd><span class=\"key\">TAB</span></kbd>, this\nabbreviation is expanded to an \u2018<samp>equation</samp>\u2019 environment.  To get\na list of all abbreviations, type <kbd>M-x cdlatex-command-help</kbd>.\n</p>\n</dd>\n<dt><kbd>^</kbd></dt>\n<dt><kbd>_</kbd></dt>\n<dd><span id=\"index-_005f\"></span>\n<span id=\"index-_005e\"></span>\n<span id=\"index-cdlatex_002dsimplify_002dsub_002dsuper_002dscripts\"></span>\n\n<p>Pressing <kbd>_</kbd> and <kbd>^</kbd> inside a LaTeX fragment\ninserts these characters together with a pair of braces.  If you use\n<kbd><span class=\"key\">TAB</span></kbd> to move out of the braces, and if the braces surround\nonly a single character or macro, they are removed again (depending\non the variable <code>cdlatex-simplify-sub-super-scripts</code>).\n</p>\n</dd>\n<dt><kbd>`</kbd></dt>\n<dd><span id=\"index-_0060\"></span>\n\n<p>Pressing the backquote followed by a character inserts math macros,\nalso outside LaTeX fragments.  If you wait more than 1.5 seconds\nafter the backquote, a help window pops up.\n</p>\n</dd>\n<dt><kbd>'</kbd></dt>\n<dd><span id=\"index-_0027\"></span>\n\n<p>Pressing the single-quote followed by another character modifies the\nsymbol before point with an accent or a font.  If you wait more than\n1.5 seconds after the single-quote, a help window pops up.\nCharacter modification works only inside LaTeX fragments; outside\nthe quote is normal.\n</p></dd>\n</dl>\n\n"}, {"id": "126LiteralExamples", "content": "\n<span id=\"Literal-Examples\"></span>\n<span id=\"Literal-Examples-1\"></span><h3 class=\"section\">12.6 Literal Examples</h3>\n\n<span id=\"index-literal-examples_002c-markup-rules\"></span>\n<span id=\"index-code-line-references_002c-markup-rules\"></span>\n\n<p>You can include literal examples that should not be subjected to\nmarkup.  Such examples are typeset in monospace, so this is well\nsuited for source code and similar examples.\n</p>\n<span id=\"index-BEGIN_005fEXAMPLE\"></span>\n<span id=\"index-example-block\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_EXAMPLE\n  Some example from a text file.\n#+END_EXAMPLE\n</pre></div>\n\n<span id=\"index-comma-escape_002c-in-literal-examples\"></span>\n<p>There is one limitation, however.  You must insert a comma right\nbefore lines starting with either \u2018<samp>*</samp>\u2019, \u2018<samp>,*</samp>\u2019, \u2018<samp>#+</samp>\u2019 or \u2018<samp>,#+</samp>\u2019, as those\nmay be interpreted as outlines nodes or some other special syntax.\nOrg transparently strips these additional commas whenever it accesses\nthe contents of the block.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_EXAMPLE\n,* I am no real headline\n#+END_EXAMPLE\n</pre></div>\n\n<p>For simplicity when using small examples, you can also start the\nexample lines with a colon followed by a space.  There may also be\nadditional whitespace before the colon:\n</p>\n<div class=\"example\">\n<pre class=\"example\">Here is an example\n   : Some example from a text file.\n</pre></div>\n\n<span id=\"index-formatting-source-code_002c-markup-rules\"></span>\n<span id=\"index-org_002dlatex_002dlistings\"></span>\n<p>If the example is source code from a programming language, or any\nother text that can be marked up by Font Lock in Emacs, you can ask\nfor the example to look like the fontified Emacs buffer<a id=\"DOCF114\" href=\"https://orgmode.org/org.html#FOOT114\"><sup>114</sup></a>.  This\nis done with the code block, where you also need to specify the name\nof the major mode that should be used to fontify the example<a id=\"DOCF115\" href=\"https://orgmode.org/org.html#FOOT115\"><sup>115</sup></a>,\nsee <a href=\"https://orgmode.org/org.html#Structure-Templates\">Structure Templates</a> for shortcuts to easily insert code blocks.\n</p>\n<span id=\"index-BEGIN_005fSRC\"></span>\n<span id=\"index-source-block\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp\n  (defun org-xor (a b)\n    \"Exclusive or.\"\n    (if a (not b) b))\n #+END_SRC\n</pre></div>\n\n<p>Both in \u2018<samp>example</samp>\u2019 and in \u2018<samp>src</samp>\u2019 snippets, you can add a \u2018<samp>-n</samp>\u2019 switch to\nthe end of the \u2018<samp>#+BEGIN</samp>\u2019 line, to get the lines of the example\nnumbered.  The \u2018<samp>-n</samp>\u2019 takes an optional numeric argument specifying the\nstarting line number of the block.  If you use a \u2018<samp>+n</samp>\u2019 switch, the\nnumbering from the previous numbered snippet is continued in the\ncurrent one.  The \u2018<samp>+n</samp>\u2019 switch can also take a numeric argument.  This\nadds the value of the argument to the last line of the previous block\nto determine the starting line number.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp -n 20\n  ;; This exports with line number 20.\n  (message \"This is line 21\")\n#+END_SRC\n\n#+BEGIN_SRC emacs-lisp +n 10\n  ;; This is listed as line 31.\n  (message \"This is line 32\")\n#+END_SRC\n</pre></div>\n\n<p>In literal examples, Org interprets strings like \u2018<samp>(ref:name)</samp>\u2019 as\nlabels, and use them as targets for special hyperlinks like\n\u2018<samp>[[(name)]]</samp>\u2019\u2014i.e., the reference name enclosed in single parenthesis.\nIn HTML, hovering the mouse over such a link remote-highlights the\ncorresponding code line, which is kind of cool.\n</p>\n<p>You can also add a \u2018<samp>-r</samp>\u2019 switch which <em>removes</em> the labels from the\nsource code<a id=\"DOCF116\" href=\"https://orgmode.org/org.html#FOOT116\"><sup>116</sup></a>.  With the \u2018<samp>-n</samp>\u2019 switch, links to these references\nare labeled by the line numbers from the code listing.  Otherwise\nlinks use the labels with no parentheses.  Here is an example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp -n -r\n  (save-excursion                 (ref:sc)\n     (goto-char (point-min))      (ref:jump)\n#+END_SRC\nIn line [[(sc)]] we remember the current position. [[(jump)][Line (jump)]]\njumps to point-min.\n</pre></div>\n\n<span id=\"index-indentation_002c-in-source-blocks\"></span>\n<p>Source code and examples may be <em>indented</em> in order to align nicely\nwith the surrounding text, and in particular with plain list structure\n(see <a href=\"https://orgmode.org/org.html#Plain-Lists\">Plain Lists</a>).  By default, Org only retains the relative\nindentation between lines, e.g., when exporting the contents of the\nblock.  However, you can use the \u2018<samp>-i</samp>\u2019 switch to also preserve the\nglobal indentation, if it does matter.  See <a href=\"https://orgmode.org/org.html#Editing-Source-Code\">Editing Source Code</a>.\n</p>\n<span id=\"index-org_002dcoderef_002dlabel_002dformat\"></span>\n<p>If the syntax for the label format conflicts with the language syntax,\nuse a \u2018<samp>-l</samp>\u2019 switch to change the format, for example\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC pascal -n -r -l \"((%s))\"\n</pre></div>\n\n\n<p>See also the variable <code>org-coderef-label-format</code>.\n</p>\n<p>HTML export also allows examples to be published as text areas (see\n<a href=\"https://orgmode.org/org.html#Text-areas-in-HTML-export\">Text areas in HTML export</a>).\n</p>\n<p>Because the \u2018<samp>#+BEGIN</samp>\u2019 \u2026 \u2018<samp>#+END</samp>\u2019 patterns need to be added so often,\na shortcut is provided (see <a href=\"https://orgmode.org/org.html#Structure-Templates\">Structure Templates</a>).\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c '</kbd> (<code>org-edit-special</code>)</dt>\n<dd><span id=\"index-C_002dc-_0027-1\"></span>\n<span id=\"index-org_002dedit_002dspecial\"></span>\n<p>Edit the source code example at point in its native mode.  This\nworks by switching to a temporary buffer with the source code.  You\nneed to exit by pressing <kbd>C-c '</kbd> again.  The edited version\nthen replaces the old version in the Org buffer.  Fixed-width\nregions\u2014where each line starts with a colon followed by\na space\u2014are edited using Artist mode<a id=\"DOCF117\" href=\"https://orgmode.org/org.html#FOOT117\"><sup>117</sup></a> to allow creating\nASCII drawings easily.  Using this command in an empty line creates\na new fixed-width region.\n</p></dd>\n</dl>\n\n<span id=\"index-storing-link_002c-in-a-source-code-buffer\"></span>\n<p>Calling <code>org-store-link</code> (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>) while editing a source\ncode example in a temporary buffer created with <kbd>C-c '</kbd>\nprompts for a label.  Make sure that it is unique in the current\nbuffer, and insert it with the proper formatting like \u2018<samp>(ref:label)</samp>\u2019 at\nthe end of the current line.  Then the label is stored as a link\n\u2018<samp>(label)</samp>\u2019, for retrieval with <kbd>C-c C-l</kbd>.\n</p>\n"}, {"id": "127Images", "content": "\n<span id=\"Images\"></span>\n<span id=\"Images-1\"></span><h3 class=\"section\">12.7 Images</h3>\n\n<span id=\"index-inlining-images\"></span>\n<span id=\"index-images_002c-markup-rules\"></span>\n<p>An image is a link to an image file<a id=\"DOCF118\" href=\"https://orgmode.org/org.html#FOOT118\"><sup>118</sup></a> that does not have\na description part, for example\n</p>\n<div class=\"example\">\n<pre class=\"example\">./img/cat.jpg\n</pre></div>\n\n\n<p>If you wish to define a caption for the image (see <a href=\"https://orgmode.org/org.html#Captions\">Captions</a>) and\nmaybe a label for internal cross references (see <a href=\"https://orgmode.org/org.html#Internal-Links\">Internal Links</a>),\nmake sure that the link is on a line by itself and precede it with\n\u2018<samp>CAPTION</samp>\u2019 and \u2018<samp>NAME</samp>\u2019 keywords as follows:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION: This is the caption for the next figure link (or table)\n#+NAME:   fig:SED-HR4049\n[[./img/a.jpg]]\n</pre></div>\n\n<p>Such images can be displayed within the buffer with the following\ncommand:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-v</kbd> (<code>org-toggle-inline-images</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002dv\"></span>\n<span id=\"index-org_002dtoggle_002dinline_002dimages\"></span>\n<span id=\"index-org_002dstartup_002dwith_002dinline_002dimages\"></span>\n<p>Toggle the inline display of linked images.  When called with\na prefix argument, also display images that do have a link\ndescription.  You can ask for inline images to be displayed at\nstartup by configuring the variable\n<code>org-startup-with-inline-images</code><a id=\"DOCF119\" href=\"https://orgmode.org/org.html#FOOT119\"><sup>119</sup></a>.\n</p></dd>\n</dl>\n\n"}, {"id": "128Captions", "content": "\n<span id=\"Captions\"></span>\n<span id=\"Captions-1\"></span><h3 class=\"section\">12.8 Captions</h3>\n\n<span id=\"index-captions_002c-markup-rules\"></span>\n<span id=\"index-CAPTION_002c-keyword\"></span>\n\n<p>You can assign a caption to a specific part of a document by inserting\na \u2018<samp>CAPTION</samp>\u2019 keyword immediately before it:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION: This is the caption for the next table (or link)\n| ... | ... |\n|-----+-----|\n</pre></div>\n\n<p>Optionally, the caption can take the form:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION[Short caption]: Longer caption.\n</pre></div>\n\n\n<p>Even though images and tables are prominent examples of captioned\nstructures, the same caption mechanism can apply to many\nothers\u2014e.g., LaTeX equations, source code blocks.  Depending on the\nexport back-end, those may or may not be handled.\n</p>\n"}, {"id": "129HorizontalRules", "content": "\n<span id=\"Horizontal-Rules\"></span>\n<span id=\"Horizontal-Rules-1\"></span><h3 class=\"section\">12.9 Horizontal Rules</h3>\n\n<span id=\"index-horizontal-rules_002c-markup-rules\"></span>\n<p>A line consisting of only dashes, and at least 5 of them, is exported\nas a horizontal line.\n</p>\n"}, {"id": "1210CreatingFootnotes", "content": "\n<span id=\"Creating-Footnotes\"></span>\n<span id=\"Creating-Footnotes-1\"></span><h3 class=\"section\">12.10 Creating Footnotes</h3>\n\n<span id=\"index-footnotes\"></span>\n\n<p>A footnote is started by a footnote marker in square brackets in\ncolumn 0, no indentation allowed.  It ends at the next footnote\ndefinition, headline, or after two consecutive empty lines.  The\nfootnote reference is simply the marker in square brackets, inside\ntext.  Markers always start with \u2018<samp>fn:</samp>\u2019.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">The Org homepage[fn:1] now looks a lot better than it used to.\n...\n[fn:1] The link is: https://orgmode.org\n</pre></div>\n\n<p>Org mode extends the number-based syntax to <em>named</em> footnotes and\noptional inline definition.  Here are the valid references:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>[fn:NAME]</samp>\u2019</dt>\n<dd><p>A named footnote reference, where <var>NAME</var> is a unique\nlabel word, or, for simplicity of automatic creation, a number.\n</p>\n</dd>\n<dt>\u2018<samp>[fn:: This is the inline definition of this footnote]</samp>\u2019</dt>\n<dd><p>An anonymous footnote where the definition is given directly at the\nreference point.\n</p>\n</dd>\n<dt>\u2018<samp>[fn:NAME: a definition]</samp>\u2019</dt>\n<dd><p>An inline definition of a footnote, which also specifies a name for\nthe note.  Since Org allows multiple references to the same note,\nyou can then use \u2018<samp>[fn:NAME]</samp>\u2019 to create additional references.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dfootnote_002dauto_002dlabel\"></span>\n<p>Footnote labels can be created automatically, or you can create names\nyourself.  This is handled by the variable <code>org-footnote-auto-label</code>\nand its corresponding \u2018<samp>STARTUP</samp>\u2019 keywords.  See the docstring of that\nvariable for details.\n</p>\n<p>The following command handles footnotes:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x f</kbd></dt>\n<dd><p>The footnote action command.\n</p>\n<span id=\"index-C_002dc-C_002dx-f\"></span>\n<p>When point is on a footnote reference, jump to the definition.  When\nit is at a definition, jump to the\u2014first\u2014reference.\n</p>\n<span id=\"index-org_002dfootnote_002ddefine_002dinline\"></span>\n<span id=\"index-org_002dfootnote_002dsection-1\"></span>\n<p>Otherwise, create a new footnote.  Depending on the variable\n<code>org-footnote-define-inline</code><a id=\"DOCF120\" href=\"https://orgmode.org/org.html#FOOT120\"><sup>120</sup></a>, the definition is placed right\ninto the text as part of the reference, or separately into the\nlocation determined by the variable <code>org-footnote-section</code>.\n</p>\n<p>When this command is called with a prefix argument, a menu of\nadditional options is offered:\n</p>\n<table>\n<tbody><tr><td width=\"10%\"><kbd>s</kbd></td><td width=\"90%\">Sort the footnote definitions by reference sequence.</td></tr>\n<tr><td width=\"10%\"><kbd>r</kbd></td><td width=\"90%\">Renumber the simple \u2018<samp>fn:N</samp>\u2019 footnotes.</td></tr>\n<tr><td width=\"10%\"><kbd>S</kbd></td><td width=\"90%\">Short for first <kbd>r</kbd>, then <kbd>s</kbd> action.</td></tr>\n<tr><td width=\"10%\"><kbd>n</kbd></td><td width=\"90%\">Rename all footnotes into a \u2018<samp>fn:1</samp>\u2019 \u2026 \u2018<samp>fn:n</samp>\u2019 sequence.</td></tr>\n<tr><td width=\"10%\"><kbd>d</kbd></td><td width=\"90%\">Delete the footnote at point, including definition and references.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dfootnote_002dauto_002dadjust\"></span>\n<p>Depending on the variable <code>org-footnote-auto-adjust</code><a id=\"DOCF121\" href=\"https://orgmode.org/org.html#FOOT121\"><sup>121</sup></a>,\nrenumbering and sorting footnotes can be automatic after each\ninsertion or deletion.\n</p>\n</dd>\n<dt><kbd>C-c C-c</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002dc-16\"></span>\n<p>If point is on a footnote reference, jump to the definition.  If it\nis at the definition, jump back to the reference.  When called at\na footnote location with a prefix argument, offer the same menu as\n<kbd>C-c C-x f</kbd>.\n</p>\n</dd>\n<dt><kbd>C-c C-o</kbd> or <kbd>mouse-1/2</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002do-3\"></span>\n<span id=\"index-mouse_002d1-2\"></span>\n<span id=\"index-mouse_002d2-2\"></span>\n<p>Footnote labels are also links to the corresponding definition or\nreference, and you can use the usual commands to follow these links.\n</p></dd>\n</dl>\n\n"}, {"id": "13Exporting", "content": "\n<span id=\"Exporting\"></span>\n<span id=\"Exporting-1\"></span><h2 class=\"chapter\">13 Exporting</h2>\n\n<span id=\"index-exporting\"></span>\n\n<p>At some point you might want to print your notes, publish them on the\nweb, or share them with people not using Org.  Org can convert and\nexport documents to a variety of other formats while retaining as much\nstructure (see <a href=\"https://orgmode.org/org.html#Document-Structure\">Document Structure</a>) and markup (see <a href=\"https://orgmode.org/org.html#Markup-for-Rich-Contents\">Markup for Rich Contents</a>) as possible.\n</p>\n<span id=\"index-export-back_002dend\"></span>\n<p>The libraries responsible for translating Org files to other formats\nare called <em>back-ends</em>.  Org ships with support for the following\nback-ends:\n</p>\n<ul>\n<li> <em>ascii</em> (ASCII format)\n</li><li> <em>beamer</em> (LaTeX Beamer format)\n</li><li> <em>html</em> (HTML format)\n</li><li> <em>icalendar</em> (iCalendar format)\n</li><li> <em>latex</em> (LaTeX format)\n</li><li> <em>md</em> (Markdown format)\n</li><li> <em>odt</em> (OpenDocument Text format)\n</li><li> <em>org</em> (Org format)\n</li><li> <em>texinfo</em> (Texinfo format)\n</li><li> <em>man</em> (Man page format)\n</li></ul>\n\n<p>Users can install libraries for additional formats from the Emacs\npackaging system.  For easy discovery, these packages have a common\nnaming scheme: <code>ox-NAME</code>, where <var>NAME</var> is a format.  For\nexample, <code>ox-koma-letter</code> for <em>koma-letter</em> back-end.  More libraries\ncan be found in the \u2018<samp>org-contrib</samp>\u2019 repository (see <a href=\"https://orgmode.org/org.html#Installation\">Installation</a>).\n</p>\n<span id=\"index-org_002dexport_002dbackends\"></span>\n<p>Org only loads back-ends for the following formats by default: ASCII,\nHTML, iCalendar, LaTeX, and ODT.  Additional back-ends can be loaded\nin either of two ways: by configuring the <code>org-export-backends</code>\nvariable, or by requiring libraries in the Emacs init file.  For\nexample, to load the Markdown back-end, add this to your Emacs config:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'ox-md)\n</pre></div>\n\n\n\n"}, {"id": "131TheExportDispatcher", "content": "\n<span id=\"The-Export-Dispatcher\"></span>\n<span id=\"The-Export-Dispatcher-1\"></span><h3 class=\"section\">13.1 The Export Dispatcher</h3>\n\n<span id=\"index-dispatcher_002c-for-export-commands\"></span>\n<span id=\"index-export_002c-dispatcher\"></span>\n\n<p>The export dispatcher is the main interface for Org\u2019s exports.\nA hierarchical menu presents the currently configured export formats.\nOptions are shown as easy toggle switches on the same screen.\n</p>\n<span id=\"index-org_002dexport_002ddispatch_002duse_002dexpert_002dui\"></span>\n<p>Org also has a minimal prompt interface for the export dispatcher.\nWhen the variable <code>org-export-dispatch-use-expert-ui</code> is set to\na non-<code>nil</code> value, Org prompts in the minibuffer.  To switch back to\nthe hierarchical menu, press <kbd>?</kbd>.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e</kbd> (<code>org-export</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de\"></span>\n<span id=\"index-org_002dexport\"></span>\n\n<p>Invokes the export dispatcher interface.  The options show default\nsettings.  The <kbd>C-u</kbd> prefix argument preserves options from\nthe previous export, including any sub-tree selections.\n</p></dd>\n</dl>\n\n<p>Org exports the entire buffer by default.  If the Org buffer has an\nactive region, then Org exports just that region.\n</p>\n<p>Within the dispatcher interface, the following key combinations can\nfurther alter what is exported, and how.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-a</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-C_002da\"></span>\n\n<p>Toggle asynchronous export.  Asynchronous export uses an external\nEmacs process with a specially configured initialization file to\ncomplete the exporting process in the background, without tying-up\nEmacs.  This is particularly useful when exporting long documents.\n</p>\n<p>Output from an asynchronous export is saved on the <em>export stack</em>.\nTo view this stack, call the export dispatcher with a double\n<kbd>C-u</kbd> prefix argument.  If already in the export dispatcher\nmenu, <kbd>&amp;</kbd> displays the stack.\n</p>\n<span id=\"index-org_002dexport_002din_002dbackground\"></span>\n<p>You can make asynchronous export the default by setting\n<code>org-export-in-background</code>.\n</p>\n<span id=\"index-org_002dexport_002dasync_002dinit_002dfile\"></span>\n<p>You can set the initialization file used by the background process\nby setting <code>org-export-async-init-file</code>.\n</p>\n</dd>\n<dt><kbd>C-b</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-C_002db\"></span>\n\n<p>Toggle body-only export.  Useful for excluding headers and footers\nin the export.  Affects only those back-end formats that have\nsections like \u2018<samp>&lt;head&gt;...&lt;/head&gt;</samp>\u2019 in HTML.\n</p>\n</dd>\n<dt><kbd>C-s</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-C_002ds\"></span>\n\n<p>Toggle sub-tree export.  When turned on, Org exports only the\nsub-tree starting from point position at the time the export\ndispatcher was invoked.  Org uses the top heading of this sub-tree\nas the document\u2019s title.  If point is not on a heading, Org uses the\nnearest enclosing header.  If point is in the document preamble, Org\nsignals an error and aborts export.\n</p>\n<span id=\"index-org_002dexport_002dinitial_002dscope\"></span>\n<p>To make sub-tree export the default, customize the variable\n<code>org-export-initial-scope</code>.\n</p>\n</dd>\n<dt><kbd>C-v</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-C_002dv-1\"></span>\n\n<p>Toggle visible-only export.  This is useful for exporting only\ncertain parts of an Org document by adjusting the visibility of\nparticular headings.  See also <a href=\"https://orgmode.org/org.html#Sparse-Trees\">Sparse Trees</a>.\n</p></dd>\n</dl>\n\n"}, {"id": "132ExportSettings", "content": "\n<span id=\"Export-Settings\"></span>\n<span id=\"Export-Settings-1\"></span><h3 class=\"section\">13.2 Export Settings</h3>\n\n<span id=\"index-options_002c-for-export\"></span>\n<span id=\"index-Export_002c-settings\"></span>\n\n<span id=\"index-OPTIONS_002c-keyword\"></span>\n<p>Export options can be set: globally with variables; for an individual\nfile by making variables buffer-local with in-buffer settings (see\n<a href=\"https://orgmode.org/org.html#In_002dbuffer-Settings\">In-buffer Settings</a>); by setting individual keywords or\nspecifying them in compact form with the \u2018<samp>OPTIONS</samp>\u2019 keyword; or for\na tree by setting properties (see <a href=\"https://orgmode.org/org.html#Properties-and-Columns\">Properties and Columns</a>).  Options\nset at a specific level override options set at a more general level.\n</p>\n<span id=\"index-SETUPFILE_002c-keyword\"></span>\n<p>In-buffer settings may appear anywhere in the file, either directly or\nindirectly through a file included using \u2018<samp>#+SETUPFILE: filename or\nURL</samp>\u2019 syntax.  Option keyword sets tailored to a particular back-end\ncan be inserted from the export dispatcher (see <a href=\"https://orgmode.org/org.html#The-Export-Dispatcher\">The Export Dispatcher</a>) using the \u2018<samp>Insert template</samp>\u2019 command by pressing\n<kbd>#</kbd>.  To insert keywords individually, a good way to make\nsure the keyword is correct is to type \u2018<samp>#+</samp>\u2019 and then to use\n<kbd>M-<span class=\"key\">TAB</span></kbd><a id=\"DOCF122\" href=\"https://orgmode.org/org.html#FOOT122\"><sup>122</sup></a> for completion.\n</p>\n<p>The export keywords available for every back-end, and their equivalent\nglobal variables, include:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>AUTHOR</samp>\u2019</dt>\n<dd><span id=\"index-AUTHOR_002c-keyword\"></span>\n<span id=\"index-user_002dfull_002dname\"></span>\n<p>The document author (<code>user-full-name</code>).\n</p>\n</dd>\n<dt>\u2018<samp>CREATOR</samp>\u2019</dt>\n<dd><span id=\"index-CREATOR_002c-keyword\"></span>\n<span id=\"index-org_002dexpot_002dcreator_002dstring\"></span>\n<p>Entity responsible for output generation\n(<code>org-export-creator-string</code>).\n</p>\n</dd>\n<dt>\u2018<samp>DATE</samp>\u2019</dt>\n<dd><span id=\"index-DATE_002c-keyword\"></span>\n<span id=\"index-org_002dexport_002ddate_002dtimestamp_002dformat\"></span>\n<p>A date or a time-stamp<a id=\"DOCF123\" href=\"https://orgmode.org/org.html#FOOT123\"><sup>123</sup></a>.\n</p>\n</dd>\n<dt>\u2018<samp>EMAIL</samp>\u2019</dt>\n<dd><span id=\"index-EMAIL_002c-keyword\"></span>\n<span id=\"index-user_002dmail_002daddress\"></span>\n<p>The email address (<code>user-mail-address</code>).\n</p>\n</dd>\n<dt>\u2018<samp>LANGUAGE</samp>\u2019</dt>\n<dd><span id=\"index-LANGUAGE_002c-keyword\"></span>\n<span id=\"index-org_002dexport_002ddefault_002dlanguage\"></span>\n<p>Language to use for translating certain strings\n(<code>org-export-default-language</code>).  With \u2018<samp>#+LANGUAGE: fr</samp>\u2019, for\nexample, Org translates \u2018<samp>Table of contents</samp>\u2019 to the French \u2018<samp>Table des\n  mati\u00e8res</samp>\u2019<a id=\"DOCF124\" href=\"https://orgmode.org/org.html#FOOT124\"><sup>124</sup></a>.\n</p>\n</dd>\n<dt>\u2018<samp>SELECT_TAGS</samp>\u2019</dt>\n<dd><span id=\"index-SELECT_005fTAGS_002c-keyword\"></span>\n<span id=\"index-org_002dexport_002dselect_002dtags\"></span>\n<p>The default value is \u2018<samp>(\"export\")</samp>\u2019.  When a tree is tagged with\n\u2018<samp>export</samp>\u2019 (<code>org-export-select-tags</code>), Org selects that tree and its\nsub-trees for export.  Org excludes trees with \u2018<samp>noexport</samp>\u2019 tags, see\nbelow.  When selectively exporting files with \u2018<samp>export</samp>\u2019 tags set, Org\ndoes not export any text that appears before the first headline.\n</p>\n</dd>\n<dt>\u2018<samp>EXCLUDE_TAGS</samp>\u2019</dt>\n<dd><span id=\"index-EXCLUDE_005fTAGS_002c-keyword\"></span>\n<span id=\"index-org_002dexport_002dexclude_002dtags\"></span>\n<p>The default value is \u2018<samp>(\"noexport\")</samp>\u2019.  When a tree is tagged with\n\u2018<samp>noexport</samp>\u2019 (<code>org-export-exclude-tags</code>), Org excludes that tree and\nits sub-trees from export.  Entries tagged with \u2018<samp>noexport</samp>\u2019 are\nunconditionally excluded from the export, even if they have an\n\u2018<samp>export</samp>\u2019 tag.  Even if a sub-tree is not exported, Org executes any\ncode blocks contained there.\n</p>\n</dd>\n<dt>\u2018<samp>TITLE</samp>\u2019</dt>\n<dd><span id=\"index-TITLE_002c-keyword\"></span>\n<span id=\"index-document-title\"></span>\n<p>Org displays this title.  For long titles, use multiple \u2018<samp>#+TITLE</samp>\u2019\nlines.\n</p>\n</dd>\n<dt>\u2018<samp>EXPORT_FILE_NAME</samp>\u2019</dt>\n<dd><span id=\"index-EXPORT_005fFILE_005fNAME_002c-keyword\"></span>\n<p>The name of the output file to be generated.  Otherwise, Org\ngenerates the file name based on the buffer name and the extension\nbased on the back-end format.\n</p></dd>\n</dl>\n\n<p>The \u2018<samp>OPTIONS</samp>\u2019 keyword is a compact form.  To configure multiple\noptions, use several \u2018<samp>OPTIONS</samp>\u2019 lines.  \u2018<samp>OPTIONS</samp>\u2019 recognizes the\nfollowing arguments.\n</p>\n<dl compact=\"compact\">\n<dt><code>'</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dsmart_002dquotes\"></span>\n<p>Toggle smart quotes (<code>org-export-with-smart-quotes</code>).  Depending on\nthe language used, when activated, Org treats pairs of double quotes\nas primary quotes, pairs of single quotes as secondary quotes, and\nsingle quote marks as apostrophes.\n</p>\n</dd>\n<dt><code>*</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002demphasize\"></span>\n<p>Toggle emphasized text (<code>org-export-with-emphasize</code>).\n</p>\n</dd>\n<dt><code>-</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dspecial_002dstrings\"></span>\n<p>Toggle conversion of special strings\n(<code>org-export-with-special-strings</code>).\n</p>\n</dd>\n<dt><code>:</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dfixed_002dwidth\"></span>\n<p>Toggle fixed-width sections (<code>org-export-with-fixed-width</code>).\n</p>\n</dd>\n<dt><code>&lt;</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtimestamps\"></span>\n<p>Toggle inclusion of time/date active/inactive stamps\n(<code>org-export-with-timestamps</code>).\n</p>\n</dd>\n<dt><code>\\n</code></dt>\n<dd><span id=\"index-org_002dexport_002dpreserve_002dbreaks\"></span>\n<p>Toggles whether to preserve line breaks\n(<code>org-export-preserve-breaks</code>).\n</p>\n</dd>\n<dt><code>^</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dsub_002dsuperscripts\"></span>\n<p>Toggle TeX-like syntax for sub- and superscripts.  If you write\n\u2018<samp>^:{}</samp>\u2019, \u2018<samp>a_{b}</samp>\u2019 is interpreted, but the simple \u2018<samp>a_b</samp>\u2019 is left as it\nis (<code>org-export-with-sub-superscripts</code>).\n</p>\n</dd>\n<dt><code>arch</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002darchived_002dtrees-1\"></span>\n<p>Configure how archived trees are exported.  When set to <code>headline</code>,\nthe export process skips the contents and processes only the\nheadlines (<code>org-export-with-archived-trees</code>).\n</p>\n</dd>\n<dt><code>author</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dauthor\"></span>\n<p>Toggle inclusion of author name into exported file\n(<code>org-export-with-author</code>).\n</p>\n</dd>\n<dt><code>broken-links</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dbroken_002dlinks\"></span>\n<p>Toggles if Org should continue exporting upon finding a broken\ninternal link.  When set to <code>mark</code>, Org clearly marks the problem\nlink in the output (<code>org-export-with-broken-links</code>).\n</p>\n</dd>\n<dt><code>c</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dclocks\"></span>\n<p>Toggle inclusion of \u2018<samp>CLOCK</samp>\u2019 keywords (<code>org-export-with-clocks</code>).\n</p>\n</dd>\n<dt><code>creator</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dcreator\"></span>\n<p>Toggle inclusion of creator information in the exported file\n(<code>org-export-with-creator</code>).\n</p>\n</dd>\n<dt><code>d</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002ddrawers\"></span>\n<p>Toggles inclusion of drawers, or list of drawers to include, or list\nof drawers to exclude (<code>org-export-with-drawers</code>).\n</p>\n</dd>\n<dt><code>date</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002ddate\"></span>\n<p>Toggle inclusion of a date into exported file\n(<code>org-export-with-date</code>).\n</p>\n</dd>\n<dt><code>e</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dentities\"></span>\n<p>Toggle inclusion of entities (<code>org-export-with-entities</code>).\n</p>\n</dd>\n<dt><code>email</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002demail\"></span>\n<p>Toggle inclusion of the author\u2019s e-mail into exported file\n(<code>org-export-with-email</code>).\n</p>\n</dd>\n<dt><code>f</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dfootnotes\"></span>\n<p>Toggle the inclusion of footnotes (<code>org-export-with-footnotes</code>).\n</p>\n</dd>\n<dt><code>H</code></dt>\n<dd><span id=\"index-org_002dexport_002dheadline_002dlevels\"></span>\n<p>Set the number of headline levels for export\n(<code>org-export-headline-levels</code>).  Below that level, headlines are\ntreated differently.  In most back-ends, they become list items.\n</p>\n</dd>\n<dt><code>inline</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dinlinetasks\"></span>\n<p>Toggle inclusion of inlinetasks (<code>org-export-with-inlinetasks</code>).\n</p>\n</dd>\n<dt><code>num</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dsection_002dnumbers\"></span>\n<span id=\"index-UNNUMBERED_002c-property\"></span>\n<p>Toggle section-numbers (<code>org-export-with-section-numbers</code>).  When\nset to number N, Org numbers only those headlines at level N or\nabove.  Set \u2018<samp>UNNUMBERED</samp>\u2019 property to non-<code>nil</code> to disable numbering\nof heading and subheadings entirely.  Moreover, when the value is\n\u2018<samp>notoc</samp>\u2019 the headline, and all its children, do not appear in the\ntable of contents either (see <a href=\"https://orgmode.org/org.html#Table-of-Contents\">Table of Contents</a>).\n</p>\n</dd>\n<dt><code>p</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dplanning\"></span>\n<p>Toggle export of planning information (<code>org-export-with-planning</code>).\n\u201cPlanning information\u201d comes from lines located right after the\nheadline and contain any combination of these cookies: \u2018<samp>SCHEDULED</samp>\u2019,\n\u2018<samp>DEADLINE</samp>\u2019, or \u2018<samp>CLOSED</samp>\u2019.\n</p>\n</dd>\n<dt><code>pri</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dpriority\"></span>\n<p>Toggle inclusion of priority cookies\n(<code>org-export-with-priority</code>).\n</p>\n</dd>\n<dt><code>prop</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dproperties\"></span>\n<p>Toggle inclusion of property drawers, or list the properties to\ninclude (<code>org-export-with-properties</code>).\n</p>\n</dd>\n<dt><code>stat</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dstatistics_002dcookies\"></span>\n<p>Toggle inclusion of statistics cookies\n(<code>org-export-with-statistics-cookies</code>).\n</p>\n</dd>\n<dt><code>tags</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtags\"></span>\n<p>Toggle inclusion of tags, may also be <code>not-in-toc</code>\n(<code>org-export-with-tags</code>).\n</p>\n</dd>\n<dt><code>tasks</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtasks\"></span>\n<p>Toggle inclusion of tasks (TODO items); or <code>nil</code> to remove all\ntasks; or <code>todo</code> to remove done tasks; or list the keywords to keep\n(<code>org-export-with-tasks</code>).\n</p>\n</dd>\n<dt><code>tex</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dlatex-1\"></span>\n<p><code>nil</code> does not export; <code>t</code> exports; <code>verbatim</code> keeps everything in\nverbatim (<code>org-export-with-latex</code>).\n</p>\n</dd>\n<dt><code>timestamp</code></dt>\n<dd><span id=\"index-org_002dexport_002dtime_002dstamp_002dfile\"></span>\n<p>Toggle inclusion of the creation time in the exported file\n(<code>org-export-time-stamp-file</code>).\n</p>\n</dd>\n<dt><code>title</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtitle\"></span>\n<p>Toggle inclusion of title (<code>org-export-with-title</code>).\n</p>\n</dd>\n<dt><code>toc</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtoc\"></span>\n<p>Toggle inclusion of the table of contents, or set the level limit\n(<code>org-export-with-toc</code>).\n</p>\n</dd>\n<dt><code>todo</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtodo_002dkeywords\"></span>\n<p>Toggle inclusion of TODO keywords into exported text\n(<code>org-export-with-todo-keywords</code>).\n</p>\n</dd>\n<dt><code>|</code></dt>\n<dd><span id=\"index-org_002dexport_002dwith_002dtables\"></span>\n<p>Toggle inclusion of tables (<code>org-export-with-tables</code>).\n</p></dd>\n</dl>\n\n<p>When exporting sub-trees, special node properties can override the\nabove keywords.  These properties have an \u2018<samp>EXPORT_</samp>\u2019 prefix.  For\nexample, \u2018<samp>DATE</samp>\u2019 becomes, \u2018<samp>EXPORT_DATE</samp>\u2019 when used for a specific\nsub-tree.  Except for \u2018<samp>SETUPFILE</samp>\u2019, all other keywords listed above\nhave an \u2018<samp>EXPORT_</samp>\u2019 equivalent.\n</p>\n<span id=\"index-BIND_002c-keyword\"></span>\n<span id=\"index-org_002dexport_002dallow_002dbind_002dkeywords\"></span>\n<p>If <code>org-export-allow-bind-keywords</code> is non-<code>nil</code>, Emacs variables can\nbecome buffer-local during export by using the \u2018<samp>BIND</samp>\u2019 keyword.  Its\nsyntax is \u2018<samp>#+BIND: variable value</samp>\u2019.  This is particularly useful for\nin-buffer settings that cannot be changed using keywords.\n</p>\n"}, {"id": "133TableofContents", "content": "\n<span id=\"Table-of-Contents\"></span>\n<span id=\"Table-of-Contents-1\"></span><h3 class=\"section\">13.3 Table of Contents</h3>\n\n<span id=\"index-table-of-contents\"></span>\n<span id=\"index-list-of-tables\"></span>\n<span id=\"index-list-of-listings\"></span>\n\n<span id=\"index-toc_002c-in-OPTIONS-keyword\"></span>\n<span id=\"index-org_002dexport_002dwith_002dtoc-1\"></span>\n<p>The table of contents includes all headlines in the document.  Its\ndepth is therefore the same as the headline levels in the file.  If\nyou need to use a different depth, or turn it off entirely, set the\n<code>org-export-with-toc</code> variable accordingly.  You can achieve the same\non a per file basis, using the following \u2018<samp>toc</samp>\u2019 item in \u2018<samp>OPTIONS</samp>\u2019\nkeyword:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: toc:2          (only include two levels in TOC)\n#+OPTIONS: toc:nil        (no default TOC at all)\n</pre></div>\n\n<span id=\"index-excluding-entries-from-table-of-contents\"></span>\n<span id=\"index-table-of-contents_002c-exclude-entries\"></span>\n<p>Org includes both numbered and unnumbered headlines in the table of\ncontents<a id=\"DOCF125\" href=\"https://orgmode.org/org.html#FOOT125\"><sup>125</sup></a>.  If you need to exclude an unnumbered headline,\nalong with all its children, set the \u2018<samp>UNNUMBERED</samp>\u2019 property to \u2018<samp>notoc</samp>\u2019\nvalue.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Subtree not numbered, not in table of contents either\n  :PROPERTIES:\n  :UNNUMBERED: notoc\n  :END:\n</pre></div>\n\n<span id=\"index-TOC_002c-keyword\"></span>\n<p>Org normally inserts the table of contents directly before the first\nheadline of the file.  To move the table of contents to a different\nlocation, first turn off the default with <code>org-export-with-toc</code>\nvariable or with \u2018<samp>#+OPTIONS: toc:nil</samp>\u2019.  Then insert \u2018<samp>#+TOC: headlines\nN</samp>\u2019 at the desired location(s).\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: toc:nil\n...\n#+TOC: headlines 2\n</pre></div>\n\n<p>To adjust the table of contents depth for a specific section of the\nOrg document, append an additional \u2018<samp>local</samp>\u2019 parameter.  This parameter\nbecomes a relative depth for the current level.  The following example\ninserts a local table of contents, with direct children only.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Section\n#+TOC: headlines 1 local\n</pre></div>\n\n<p>Note that for this feature to work properly in LaTeX export, the Org\nfile requires the inclusion of the titletoc package.  Because of\ncompatibility issues, titletoc has to be loaded <em>before</em> hyperref.\nCustomize the <code>org-latex-default-packages-alist</code> variable.\n</p>\n<p>The following example inserts a table of contents that links to the\nchildren of the specified target.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Target\n  :PROPERTIES:\n  :CUSTOM_ID: TargetSection\n  :END:\n** Heading A\n** Heading B\n* Another section\n#+TOC: headlines 1 :target #TargetSection\n</pre></div>\n\n<p>The \u2018<samp>:target</samp>\u2019 attribute is supported in HTML, Markdown, ODT, and ASCII export.\n</p>\n<p>Use the \u2018<samp>TOC</samp>\u2019 keyword to generate list of tables\u2014respectively, all\nlistings\u2014with captions.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TOC: listings\n#+TOC: tables\n</pre></div>\n\n<span id=\"index-ALT_005fTITLE_002c-property\"></span>\n<p>Normally Org uses the headline for its entry in the table of contents.\nBut with \u2018<samp>ALT_TITLE</samp>\u2019 property, a different entry can be specified for\nthe table of contents.\n</p>\n"}, {"id": "134IncludeFiles", "content": "\n<span id=\"Include-Files\"></span>\n<span id=\"Include-Files-1\"></span><h3 class=\"section\">13.4 Include Files</h3>\n\n<span id=\"index-include-files_002c-during-export\"></span>\n<span id=\"index-export_002c-include-files\"></span>\n<span id=\"index-INCLUDE_002c-keyword\"></span>\n\n<p>During export, you can include the content of another file.  For\nexample, to include your \u2018<samp>.emacs</samp>\u2019 file, you could use:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+INCLUDE: \"~/.emacs\" src emacs-lisp\n</pre></div>\n\n\n<p>The first parameter is the file name to include.  The optional second\nparameter specifies the block type: \u2018<samp>example</samp>\u2019, \u2018<samp>export</samp>\u2019 or \u2018<samp>src</samp>\u2019.  The\noptional third parameter specifies the source code language to use for\nformatting the contents.  This is relevant to both \u2018<samp>export</samp>\u2019 and \u2018<samp>src</samp>\u2019\nblock types.\n</p>\n<p>If an included file is specified as having a markup language, Org\nneither checks for valid syntax nor changes the contents in any way.\nFor example and source blocks, Org code-escapes the contents before\ninclusion.\n</p>\n<span id=\"index-minlevel_002c-include\"></span>\n<p>If an included file is not specified as having any markup language,\nOrg assumes it be in Org format and proceeds as usual with a few\nexceptions.  Org makes the footnote labels (see <a href=\"https://orgmode.org/org.html#Creating-Footnotes\">Creating Footnotes</a>)\nin the included file local to that file.  The contents of the included\nfile belong to the same structure\u2014headline, item\u2014containing the\n\u2018<samp>INCLUDE</samp>\u2019 keyword.  In particular, headlines within the file become\nchildren of the current section.  That behavior can be changed by\nproviding an additional keyword parameter, \u2018<samp>:minlevel</samp>\u2019.  It shifts the\nheadlines in the included file to become the lowest level.  For\nexample, this syntax makes the included file a sibling of the current\ntop-level headline:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+INCLUDE: \"~/my-book/chapter2.org\" :minlevel 1\n</pre></div>\n\n\n<span id=\"index-lines_002c-include\"></span>\n<p>Inclusion of only portions of files are specified using ranges\nparameter with \u2018<samp>:lines</samp>\u2019 keyword.  The line at the upper end of the\nrange will not be included.  The start and/or the end of the range may\nbe omitted to use the obvious defaults.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>#+INCLUDE: \"~/.emacs\" :lines \"5-10\"</samp>\u2019</td><td>Include lines 5 to 10, 10 excluded</td></tr>\n<tr><td>\u2018<samp>#+INCLUDE: \"~/.emacs\" :lines \"-10\"</samp>\u2019</td><td>Include lines 1 to 10, 10 excluded</td></tr>\n<tr><td>\u2018<samp>#+INCLUDE: \"~/.emacs\" :lines \"10-\"</samp>\u2019</td><td>Include lines from 10 to EOF</td></tr>\n</tbody></table>\n\n<p>Inclusions may specify a file-link to extract an object matched by\n<code>org-link-search</code><a id=\"DOCF126\" href=\"https://orgmode.org/org.html#FOOT126\"><sup>126</sup></a> (see <a href=\"https://orgmode.org/org.html#Search-Options\">Search Options</a>).  The\nranges for \u2018<samp>:lines</samp>\u2019 keyword are relative to the requested element.\nTherefore,\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+INCLUDE: \"./paper.org::*conclusion\" :lines 1-20\n</pre></div>\n\n\n<p>includes the first 20 lines of the headline named \u2018<samp>conclusion</samp>\u2019.\n</p>\n<span id=\"index-only_002dcontents_002c-include\"></span>\n<p>To extract only the contents of the matched object, set\n\u2018<samp>:only-contents</samp>\u2019 property to non-<code>nil</code>.  This omits any planning lines\nor property drawers.  For example, to include the body of the heading\nwith the custom ID \u2018<samp>theory</samp>\u2019, you can use\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+INCLUDE: \"./paper.org::#theory\" :only-contents t\n</pre></div>\n\n\n<p>The following command allows navigating to the included document:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c '</kbd> (<code>org-edit~special</code>)</dt>\n<dd><span id=\"index-C_002dc-_0027-2\"></span>\n<span id=\"index-org_002dedit_002dspecial-1\"></span>\n\n<p>Visit the included file at point.\n</p></dd>\n</dl>\n\n"}, {"id": "135MacroReplacement", "content": "\n<span id=\"Macro-Replacement\"></span>\n<span id=\"Macro-Replacement-1\"></span><h3 class=\"section\">13.5 Macro Replacement</h3>\n\n<span id=\"index-macro-replacement_002c-during-export\"></span>\n<span id=\"index-MACRO_002c-keyword\"></span>\n\n<span id=\"index-org_002dexport_002dglobal_002dmacros\"></span>\n<p>Macros replace text snippets during export.  Macros are defined\nglobally in <code>org-export-global-macros</code>, or document-wise with the\nfollowing syntax:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+MACRO: name   replacement text; $1, $2 are arguments\n</pre></div>\n\n\n<p>which can be referenced using \u2018<samp>{{{name(arg1, arg2)}}}</samp>\u2019<a id=\"DOCF127\" href=\"https://orgmode.org/org.html#FOOT127\"><sup>127</sup></a>.  For\nexample\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+MACRO: poem Rose is $1, violet's $2. Life's ordered: Org assists you.\n{{{poem(red,blue)}}}\n</pre></div>\n\n<p>becomes\n</p>\n<div class=\"example\">\n<pre class=\"example\">Rose is red, violet's blue.  Life's ordered: Org assists you.\n</pre></div>\n\n\n<p>As a special case, Org parses any replacement text starting with\n\u2018<samp>(eval</samp>\u2019 as an Emacs Lisp expression and evaluates it accordingly.\nWithin such templates, arguments become strings.  Thus, the following\nmacro\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+MACRO: gnustamp (eval (concat \"GNU/\" (capitalize $1)))\n</pre></div>\n\n\n<p>turns \u2018<samp>{{{gnustamp(linux)}}}</samp>\u2019 into \u2018<samp>GNU/Linux</samp>\u2019 during export.\n</p>\n<p>Org recognizes macro references in following Org markup areas:\nparagraphs, headlines, verse blocks, tables cells and lists.  Org also\nrecognizes macro references in keywords, such as \u2018<samp>CAPTION</samp>\u2019, \u2018<samp>TITLE</samp>\u2019,\n\u2018<samp>AUTHOR</samp>\u2019, \u2018<samp>DATE</samp>\u2019, and for some back-end specific export options.\n</p>\n<p>Org comes with following pre-defined macros:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>{{{keyword(NAME)}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{title}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{author}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{email}}}</samp>\u2019</dt>\n<dd><span id=\"index-keyword_002c-macro\"></span>\n<span id=\"index-title_002c-macro\"></span>\n<span id=\"index-author_002c-macro\"></span>\n<span id=\"index-email_002c-macro\"></span>\n<p>The \u2018<samp>keyword</samp>\u2019 macro collects all values from <var>NAME</var>\nkeywords throughout the buffer, separated with white space.\n\u2018<samp>title</samp>\u2019, \u2018<samp>author</samp>\u2019 and \u2018<samp>email</samp>\u2019 macros are shortcuts for,\nrespectively, \u2018<samp>{{{keyword(TITLE)}}}</samp>\u2019, \u2018<samp>{{{keyword(AUTHOR)}}}</samp>\u2019 and\n\u2018<samp>{{{keyword(EMAIL)}}}</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>{{{date}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{date(FORMAT)}}}</samp>\u2019</dt>\n<dd><span id=\"index-date_002c-macro\"></span>\n<p>This macro refers to the \u2018<samp>DATE</samp>\u2019 keyword.  <var>FORMAT</var> is an\noptional argument to the \u2018<samp>date</samp>\u2019 macro that is used only if \u2018<samp>DATE</samp>\u2019 is\na single timestamp.  <var>FORMAT</var> should be a format string\nunderstood by <code>format-time-string</code>.\n</p>\n</dd>\n<dt>\u2018<samp>{{{time(FORMAT)}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{modification-time(FORMAT, VC)}}}</samp>\u2019</dt>\n<dd><span id=\"index-time_002c-macro\"></span>\n<span id=\"index-modification_002dtime_002c-macro\"></span>\n<p>These macros refer to the document\u2019s date and time of export and\ndate and time of modification.  <var>FORMAT</var> is a string\nunderstood by <code>format-time-string</code>.  If the second argument to the\n<code>modification-time</code> macro is non-<code>nil</code>, Org uses \u2018<samp>vc.el</samp>\u2019 to retrieve\nthe document\u2019s modification time from the version control system.\nOtherwise Org reads the file attributes.\n</p>\n</dd>\n<dt>\u2018<samp>{{{input-file}}}</samp>\u2019</dt>\n<dd><span id=\"index-input_002dfile_002c-macro\"></span>\n<p>This macro refers to the filename of the exported file.\n</p>\n</dd>\n<dt>\u2018<samp>{{{property(PROPERTY-NAME)}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{property(PROPERTY-NAME, SEARCH OPTION)}}}</samp>\u2019</dt>\n<dd><span id=\"index-property_002c-macro\"></span>\n<p>This macro returns the value of property <var>PROPERTY-NAME</var> in\nthe current entry.  If <var>SEARCH-OPTION</var> (see <a href=\"https://orgmode.org/org.html#Search-Options\">Search Options</a>) refers to a remote entry, use it instead.\n</p>\n</dd>\n<dt>\u2018<samp>{{{n}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{n(NAME)}}}</samp>\u2019</dt>\n<dt>\u2018<samp>{{{n(NAME, ACTION)}}}</samp>\u2019</dt>\n<dd><span id=\"index-n_002c-macro\"></span>\n<span id=\"index-counter_002c-macro\"></span>\n<p>This macro implements custom counters by returning the number of\ntimes the macro has been expanded so far while exporting the buffer.\nYou can create more than one counter using different <var>NAME</var>\nvalues.  If <var>ACTION</var> is \u2018<samp>-</samp>\u2019, previous value of the counter\nis held, i.e., the specified counter is not incremented.  If the\nvalue is a number, the specified counter is set to that value.  If\nit is any other non-empty string, the specified counter is reset\nto 1.  You may leave <var>NAME</var> empty to reset the default\ncounter.\n</p></dd>\n</dl>\n\n<span id=\"index-results_002c-macro\"></span>\n<p>Moreover, inline source blocks (see <a href=\"https://orgmode.org/org.html#Structure-of-Code-Blocks\">Structure of Code Blocks</a>) use the\nspecial \u2018<samp>results</samp>\u2019 macro to mark their output.  As such, you are\nadvised against re-defining it, unless you know what you are doing.\n</p>\n<span id=\"index-org_002dhide_002dmacro_002dmarkers\"></span>\n<p>The surrounding brackets can be made invisible by setting\n<code>org-hide-macro-markers</code> to a non-<code>nil</code> value.\n</p>\n<p>Org expands macros at the very beginning of the export process.\n</p>\n"}, {"id": "136CommentLines", "content": "\n<span id=\"Comment-Lines\"></span>\n<span id=\"Comment-Lines-1\"></span><h3 class=\"section\">13.6 Comment Lines</h3>\n\n<span id=\"index-exporting_002c-not\"></span>\n\n<span id=\"index-comment-lines\"></span>\n<p>Lines starting with zero or more whitespace characters followed by one\n\u2018<samp>#</samp>\u2019 and a whitespace are treated as comments and, as such, are not\nexported.\n</p>\n<span id=\"index-BEGIN_005fCOMMENT\"></span>\n<span id=\"index-comment-block\"></span>\n<p>Likewise, regions surrounded by \u2018<samp>#+BEGIN_COMMENT</samp>\u2019 \u2026 \u2018<samp>#+END_COMMENT</samp>\u2019\nare not exported.\n</p>\n<span id=\"index-comment-trees\"></span>\n<p>Finally, a \u2018<samp>COMMENT</samp>\u2019 keyword at the beginning of an entry, but after\nany other keyword or priority cookie, comments out the entire subtree.\nIn this case, the subtree is not exported and no code block within it\nis executed either<a id=\"DOCF128\" href=\"https://orgmode.org/org.html#FOOT128\"><sup>128</sup></a>.  The command below helps changing the\ncomment status of a headline.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c ;</kbd> (<code>org-toggle-comment</code>)</dt>\n<dd><span id=\"index-C_002dc-_003b\"></span>\n<span id=\"index-org_002dtoggle_002dcomment\"></span>\n\n<p>Toggle the \u2018<samp>COMMENT</samp>\u2019 keyword at the beginning of an entry.\n</p></dd>\n</dl>\n\n"}, {"id": "137ASCIILatin1UTF8export", "content": "\n<span id=\"ASCII_002fLatin_002d1_002fUTF_002d8-export\"></span>\n<span id=\"ASCII_002fLatin_002d1_002fUTF_002d8-export-1\"></span><h3 class=\"section\">13.7 ASCII/Latin-1/UTF-8 export</h3>\n\n<span id=\"index-ASCII-export\"></span>\n<span id=\"index-Latin_002d1-export\"></span>\n<span id=\"index-UTF_002d8-export\"></span>\n\n<p>ASCII export produces an output file containing only plain ASCII\ncharacters.  This is the simplest and most direct text output.  It\ndoes not contain any Org markup.  Latin-1 and UTF-8 export use\nadditional characters and symbols available in these encoding\nstandards.  All three of these export formats offer the most basic of\ntext output for maximum portability.\n</p>\n<span id=\"index-org_002dascii_002dtext_002dwidth\"></span>\n<p>On export, Org fills and justifies text according to the text width\nset in <code>org-ascii-text-width</code>.\n</p>\n<span id=\"index-org_002dascii_002dlinks_002dto_002dnotes\"></span>\n<p>Org exports links using a footnote-like style where the descriptive\npart is in the text and the link is in a note before the next heading.\nSee the variable <code>org-ascii-links-to-notes</code> for details.\n</p>\n<span id=\"ASCII-export-commands\"></span><span id=\"ASCII-export-commands-1\"></span><h4 class=\"subheading\">ASCII export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e t a</kbd> (<code>org-ascii-export-to-ascii</code>)</dt>\n<dt><kbd>C-c C-e t l</kbd></dt>\n<dt><kbd>C-c C-e t u</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-t-a\"></span>\n<span id=\"index-C_002dc-C_002de-t-l\"></span>\n<span id=\"index-C_002dc-C_002de-t-u\"></span>\n<span id=\"index-org_002dascii_002dexport_002dto_002dascii\"></span>\n\n<p>Export as an ASCII file with a \u2018<samp>.txt</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019,\nOrg exports to \u2018<samp>myfile.txt</samp>\u2019, overwriting without warning.  For\n\u2018<samp>myfile.txt</samp>\u2019, Org exports to \u2018<samp>myfile.txt.txt</samp>\u2019 in order to prevent\ndata loss.\n</p>\n</dd>\n<dt><kbd>C-c C-e t A</kbd> (<code>org-ascii-export-to-ascii</code>)</dt>\n<dt><kbd>C-c C-e t L</kbd></dt>\n<dt><kbd>C-c C-e t U</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-t-A\"></span>\n<span id=\"index-C_002dc-C_002de-t-L\"></span>\n<span id=\"index-C_002dc-C_002de-t-U\"></span>\n<span id=\"index-org_002dascii_002dexport_002das_002dascii\"></span>\n\n<p>Export to a temporary buffer.  Does not create a file.\n</p></dd>\n</dl>\n\n<span id=\"ASCII-specific-export-settings\"></span><span id=\"ASCII-specific-export-settings-1\"></span><h4 class=\"subheading\">ASCII specific export settings</h4>\n\n<p>The ASCII export back-end has one extra keyword for customizing ASCII\noutput.  Setting this keyword works similar to the general options\n(see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword\"></span>\n<p>The document subtitle.  For long subtitles, use multiple\n\u2018<samp>#+SUBTITLE</samp>\u2019 lines in the Org file.  Org prints them on one\ncontinuous line, wrapping into multiple lines if necessary.\n</p></dd>\n</dl>\n\n<span id=\"Header-and-sectioning-structure\"></span><span id=\"Header-and-sectioning-structure-1\"></span><h4 class=\"subheading\">Header and sectioning structure</h4>\n\n<p>Org converts the first three outline levels into headlines for ASCII\nexport.  The remaining levels are turned into lists.  To change this\ncut-off point where levels become lists, see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>.\n</p>\n<span id=\"Quoting-ASCII-text\"></span><span id=\"Quoting-ASCII-text-1\"></span><h4 class=\"subheading\">Quoting ASCII text</h4>\n\n<p>To insert text within the Org file by the ASCII back-end, use one the\nfollowing constructs, inline, keyword, or export block:\n</p>\n<span id=\"index-ASCII_002c-keyword\"></span>\n<span id=\"index-BEGIN_005fEXPORT-ascii\"></span>\n<div class=\"example\">\n<pre class=\"example\">Inline text @@ascii:and additional text@@ within a paragraph.\n\n#+ASCII: Some text\n\n#+BEGIN_EXPORT ascii\nOrg exports text in this block only when using ASCII back-end.\n#+END_EXPORT\n</pre></div>\n\n<span id=\"ASCII-specific-attributes\"></span><span id=\"ASCII-specific-attributes-1\"></span><h4 class=\"subheading\">ASCII specific attributes</h4>\n\n<span id=\"index-ATTR_005fASCII_002c-keyword\"></span>\n<span id=\"index-horizontal-rules_002c-in-ASCII-export\"></span>\n\n<p>ASCII back-end recognizes only one attribute, \u2018<samp>:width</samp>\u2019, which\nspecifies the width of a horizontal rule in number of characters.  The\nkeyword and syntax for specifying widths is:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ASCII: :width 10\n-----\n</pre></div>\n\n<span id=\"ASCII-special-blocks\"></span><span id=\"ASCII-special-blocks-1\"></span><h4 class=\"subheading\">ASCII special blocks</h4>\n\n<span id=\"index-special-blocks_002c-in-ASCII-export\"></span>\n<span id=\"index-BEGIN_005fJUSTIFYLEFT\"></span>\n<span id=\"index-BEGIN_005fJUSTIFYRIGHT\"></span>\n\n<p>Besides \u2018<samp>#+BEGIN_CENTER</samp>\u2019 blocks (see <a href=\"https://orgmode.org/org.html#Paragraphs\">Paragraphs</a>), ASCII back-end has\nthese two left and right justification blocks:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_JUSTIFYLEFT\nIt's just a jump to the left...\n#+END_JUSTIFYLEFT\n\n#+BEGIN_JUSTIFYRIGHT\n...and then a step to the right.\n#+END_JUSTIFYRIGHT\n</pre></div>\n\n"}, {"id": "138BeamerExport", "content": "\n<span id=\"Beamer-Export\"></span>\n<span id=\"Beamer-Export-1\"></span><h3 class=\"section\">13.8 Beamer Export</h3>\n\n<span id=\"index-Beamer-export\"></span>\n\n<p>Org uses Beamer export to convert an Org file tree structure into\nhigh-quality interactive slides for presentations.  Beamer is a LaTeX\ndocument class for creating presentations in PDF, HTML, and other\npopular display formats.\n</p>\n\n\n"}, {"id": "1381Beamerexportcommands", "content": "\n<span id=\"Beamer-export-commands\"></span>\n<span id=\"Beamer-export-commands-1\"></span><h4 class=\"subsection\">13.8.1 Beamer export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e l b</kbd> (<code>org-beamer-export-to-latex</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-b\"></span>\n<span id=\"index-org_002dbeamer_002dexport_002dto_002dlatex\"></span>\n\n<p>Export as LaTeX file with a \u2018<samp>.tex</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019, Org\nexports to \u2018<samp>myfile.tex</samp>\u2019, overwriting without warning.\n</p>\n</dd>\n<dt><kbd>C-c C-e l B</kbd> (<code>org-beamer-export-as-latex</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-B\"></span>\n<span id=\"index-org_002dbeamer_002dexport_002das_002dlatex\"></span>\n\n<p>Export to a temporary buffer.  Does not create a file.\n</p>\n</dd>\n<dt><kbd>C-c C-e l P</kbd> (<code>org-beamer-export-to-pdf</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-P\"></span>\n<span id=\"index-org_002dbeamer_002dexport_002dto_002dpdf\"></span>\n\n<p>Export as LaTeX file and then convert it to PDF format.\n</p>\n</dd>\n<dt><kbd>C-c C-e l O</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-l-O\"></span>\n\n<p>Export as LaTeX file, convert it to PDF format, and then open the\nPDF file.\n</p></dd>\n</dl>\n\n"}, {"id": "1382Beamerspecificexportsettings", "content": "\n<span id=\"Beamer-specific-export-settings\"></span>\n<span id=\"Beamer-specific-export-settings-1\"></span><h4 class=\"subsection\">13.8.2 Beamer specific export settings</h4>\n\n<p>Beamer export back-end has several additional keywords for customizing\nBeamer output.  These keywords work similar to the general options\nsettings (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>BEAMER_THEME</samp>\u2019</dt>\n<dd><span id=\"index-BEAMER_005fTHEME_002c-keyword\"></span>\n<span id=\"index-org_002dbeamer_002dtheme\"></span>\n<p>The Beamer layout theme (<code>org-beamer-theme</code>).  Use square brackets\nfor options.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEAMER_THEME: Rochester [height=20pt]\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>BEAMER_FONT_THEME</samp>\u2019</dt>\n<dd><span id=\"index-BEAMER_005fFONT_005fTHEME_002c-keyword\"></span>\n<p>The Beamer font theme.\n</p>\n</dd>\n<dt>\u2018<samp>BEAMER_INNER_THEME</samp>\u2019</dt>\n<dd><span id=\"index-BEAMER_005fINNER_005fTHEME_002c-keyword\"></span>\n<p>The Beamer inner theme.\n</p>\n</dd>\n<dt>\u2018<samp>BEAMER_OUTER_THEME</samp>\u2019</dt>\n<dd><span id=\"index-BEAMER_005fOUTER_005fTHEME_002c-keyword\"></span>\n<p>The Beamer outer theme.\n</p>\n</dd>\n<dt>\u2018<samp>BEAMER_HEADER</samp>\u2019</dt>\n<dd><span id=\"index-BEAMER_005fHEADER_002c-keyword\"></span>\n<p>Arbitrary lines inserted in the preamble, just before the \u2018<samp>hyperref</samp>\u2019\nsettings.\n</p>\n</dd>\n<dt>\u2018<samp>DESCRIPTION</samp>\u2019</dt>\n<dd><span id=\"index-DESCRIPTION_002c-keyword\"></span>\n<p>The document description.  For long descriptions, use multiple\n\u2018<samp>DESCRIPTION</samp>\u2019 keywords.  By default, \u2018<samp>hyperref</samp>\u2019 inserts\n\u2018<samp>DESCRIPTION</samp>\u2019 as metadata.  Use <code>org-latex-hyperref-template</code> to\nconfigure document metadata.  Use <code>org-latex-title-command</code> to\nconfigure typesetting of description as part of front matter.\n</p>\n</dd>\n<dt>\u2018<samp>KEYWORDS</samp>\u2019</dt>\n<dd><span id=\"index-KEYWORDS_002c-keyword\"></span>\n<p>The keywords for defining the contents of the document.  Use\nmultiple \u2018<samp>KEYWORDS</samp>\u2019 lines if necessary.  By default, \u2018<samp>hyperref</samp>\u2019\ninserts \u2018<samp>KEYWORDS</samp>\u2019 as metadata.  Use <code>org-latex-hyperref-template</code>\nto configure document metadata.  Use <code>org-latex-title-command</code> to\nconfigure typesetting of keywords as part of front matter.\n</p>\n</dd>\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword-1\"></span>\n<p>Document\u2019s subtitle.  For typesetting, use\n<code>org-beamer-subtitle-format</code> string.  Use\n<code>org-latex-hyperref-template</code> to configure document metadata.  Use\n<code>org-latex-title-command</code> to configure typesetting of subtitle as\npart of front matter.\n</p></dd>\n</dl>\n\n"}, {"id": "1383FramesandBlocksinBeamer", "content": "\n<span id=\"Frames-and-Blocks-in-Beamer\"></span>\n<span id=\"Frames-and-Blocks-in-Beamer-1\"></span><h4 class=\"subsection\">13.8.3 Frames and Blocks in Beamer</h4>\n\n<p>Org transforms heading levels into Beamer\u2019s sectioning elements,\nframes and blocks.  Any Org tree with a not-too-deep-level nesting\nshould in principle be exportable as a Beamer presentation.\n</p>\n<ul>\n<li> <span id=\"index-org_002dbeamer_002dframe_002dlevel\"></span>\nOrg headlines become Beamer frames when the heading level in Org is\nequal to <code>org-beamer-frame-level</code> or \u2018<samp>H</samp>\u2019 value in a \u2018<samp>OPTIONS</samp>\u2019 line\n(see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n\n<span id=\"index-BEAMER_005fENV_002c-property\"></span>\n<p>Org overrides headlines to frames conversion for the current tree of\nan Org file if it encounters the \u2018<samp>BEAMER_ENV</samp>\u2019 property set to\n\u2018<samp>frame</samp>\u2019 or \u2018<samp>fullframe</samp>\u2019.  Org ignores whatever\n<code>org-beamer-frame-level</code> happens to be for that headline level in\nthe Org tree.  In Beamer terminology, a full frame is a frame\nwithout its title.\n</p>\n</li><li> Org exports a Beamer frame\u2019s objects as block environments.  Org can\nenforce wrapping in special block types when \u2018<samp>BEAMER_ENV</samp>\u2019 property\nis set<a id=\"DOCF129\" href=\"https://orgmode.org/org.html#FOOT129\"><sup>129</sup></a>.  For valid values see\n<code>org-beamer-environments-default</code>.  To add more values, see\n<code>org-beamer-environments-extra</code>.\n<span id=\"index-org_002dbeamer_002denvironments_002ddefault\"></span>\n<span id=\"index-org_002dbeamer_002denvironments_002dextra\"></span>\n\n</li><li> <span id=\"index-BEAMER_005fREF_002c-property\"></span>\nIf \u2018<samp>BEAMER_ENV</samp>\u2019 is set to \u2018<samp>appendix</samp>\u2019, Org exports the entry as an\nappendix.  When set to \u2018<samp>note</samp>\u2019, Org exports the entry as a note\nwithin the frame or between frames, depending on the entry\u2019s heading\nlevel.  When set to \u2018<samp>noteNH</samp>\u2019, Org exports the entry as a note\nwithout its title.  When set to \u2018<samp>againframe</samp>\u2019, Org exports the entry\nwith \u2018<samp>\\againframe</samp>\u2019 command, which makes setting the \u2018<samp>BEAMER_REF</samp>\u2019\nproperty mandatory because \u2018<samp>\\againframe</samp>\u2019 needs frame to resume.\n\n<p>When \u2018<samp>ignoreheading</samp>\u2019 is set, Org export ignores the entry\u2019s headline\nbut not its content.  This is useful for inserting content between\nframes.  It is also useful for properly closing a \u2018<samp>column</samp>\u2019\nenvironment.  @end itemize\n</p>\n<span id=\"index-BEAMER_005fACT_002c-property\"></span>\n<span id=\"index-BEAMER_005fOPT_002c-property\"></span>\n<p>When \u2018<samp>BEAMER_ACT</samp>\u2019 is set for a headline, Org export translates that\nheadline as an overlay or action specification.  When enclosed in\nsquare brackets, Org export makes the overlay specification\na default.  Use \u2018<samp>BEAMER_OPT</samp>\u2019 to set any options applicable to the\ncurrent Beamer frame or block.  The Beamer export back-end wraps\nwith appropriate angular or square brackets.  It also adds the\n\u2018<samp>fragile</samp>\u2019 option for any code that may require a verbatim block.\n</p>\n<span id=\"index-BEAMER_005fCOL_002c-property\"></span>\n<p>To create a column on the Beamer slide, use the \u2018<samp>BEAMER_COL</samp>\u2019\nproperty for its headline in the Org file.  Set the value of\n\u2018<samp>BEAMER_COL</samp>\u2019 to a decimal number representing the fraction of the\ntotal text width.  Beamer export uses this value to set the column\u2019s\nwidth and fills the column with the contents of the Org entry.  If\nthe Org entry has no specific environment defined, Beamer export\nignores the heading.  If the Org entry has a defined environment,\nBeamer export uses the heading as title.  Behind the scenes, Beamer\nexport automatically handles LaTeX column separations for contiguous\nheadlines.  To manually adjust them for any unique configurations\nneeds, use the \u2018<samp>BEAMER_ENV</samp>\u2019 property.\n</p></li></ul>\n\n"}, {"id": "1384Beamerspecificsyntax", "content": "\n<span id=\"Beamer-specific-syntax\"></span>\n<span id=\"Beamer-specific-syntax-1\"></span><h4 class=\"subsection\">13.8.4 Beamer specific syntax</h4>\n\n<p>Since Org\u2019s Beamer export back-end is an extension of the LaTeX\nback-end, it recognizes other LaTeX specific syntax\u2014for example,\n\u2018<samp>#+LATEX:</samp>\u2019 or \u2018<samp>#+ATTR_LATEX:</samp>\u2019.  See <a href=\"https://orgmode.org/org.html#LaTeX-Export\">LaTeX Export</a>, for details.\n</p>\n<p>Beamer export wraps the table of contents generated with \u2018<samp>toc:t</samp>\u2019\n\u2018<samp>OPTION</samp>\u2019 keyword in a \u2018<samp>frame</samp>\u2019 environment.  Beamer export does not\nwrap the table of contents generated with \u2018<samp>TOC</samp>\u2019 keyword (see <a href=\"https://orgmode.org/org.html#Table-of-Contents\">Table of Contents</a>).  Use square brackets for specifying options.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TOC: headlines [currentsection]\n</pre></div>\n\n\n<p>Insert Beamer-specific code using the following constructs:\n</p>\n<span id=\"index-BEAMER_002c-keyword\"></span>\n<span id=\"index-BEGIN_005fEXPORT-beamer\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+BEAMER: \\pause\n\n#+BEGIN_EXPORT beamer\n  Only Beamer export back-end exports this.\n#+END_BEAMER\n\nText @@beamer:some code@@ within a paragraph.\n</pre></div>\n\n<p>Inline constructs, such as the last one above, are useful for adding\noverlay specifications to objects with <code>bold</code>, <code>item</code>, <code>link</code>,\n<code>radio-target</code> and <code>target</code> types.  Enclose the value in angular\nbrackets and place the specification at the beginning of the object as\nshown in this example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">A *@@beamer:&lt;2-&gt;@@useful* feature\n</pre></div>\n\n\n<span id=\"index-ATTR_005fBEAMER_002c-keyword\"></span>\n<p>Beamer export recognizes the \u2018<samp>ATTR_BEAMER</samp>\u2019 keyword with the following\nattributes from Beamer configurations: \u2018<samp>:environment</samp>\u2019 for changing\nlocal Beamer environment, \u2018<samp>:overlay</samp>\u2019 for specifying Beamer overlays in\nangular or square brackets, and \u2018<samp>:options</samp>\u2019 for inserting optional\narguments.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_BEAMER: :environment nonindentlist\n- item 1, not indented\n- item 2, not indented\n- item 3, not indented\n</pre></div>\n\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_BEAMER: :overlay &lt;+-&gt;\n- item 1\n- item 2\n</pre></div>\n\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_BEAMER: :options [Lagrange]\nLet $G$ be a finite group, and let $H$ be\na subgroup of $G$.  Then the order of $H$ divides the order of $G$.\n</pre></div>\n\n"}, {"id": "1385Editingsupport", "content": "\n<span id=\"Editing-support\"></span>\n<span id=\"Editing-support-1\"></span><h4 class=\"subsection\">13.8.5 Editing support</h4>\n\n<p>Org Beamer mode is a special minor mode for faster editing of Beamer\ndocuments.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: beamer\n</pre></div>\n\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-b</kbd> (<code>org-beamer-select-environment</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002db-1\"></span>\n<span id=\"index-org_002dbeamer_002dselect_002denvironment\"></span>\n\n<p>Org Beamer mode provides this key for quicker selections in Beamer\nnormal environments, and for selecting the \u2018<samp>BEAMER_COL</samp>\u2019 property.\n</p></dd>\n</dl>\n\n"}, {"id": "1386ABeamerexample", "content": "\n<span id=\"A-Beamer-example\"></span>\n<span id=\"A-Beamer-example-1\"></span><h4 class=\"subsection\">13.8.6 A Beamer example</h4>\n\n<p>Here is an example of an Org document ready for Beamer export.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TITLE: Example Presentation\n#+AUTHOR: Carsten Dominik\n#+OPTIONS: H:2 toc:t num:t\n#+LATEX_CLASS: beamer\n#+LATEX_CLASS_OPTIONS: [presentation]\n#+BEAMER_THEME: Madrid\n#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)\n\n* This is the first structural section\n\n** Frame 1\n*** Thanks to Eric Fraga                                           :B_block:\n    :PROPERTIES:\n    :BEAMER_COL: 0.48\n    :BEAMER_ENV: block\n    :END:\n    for the first viable Beamer setup in Org\n*** Thanks to everyone else                                        :B_block:\n    :PROPERTIES:\n    :BEAMER_COL: 0.48\n    :BEAMER_ACT: &lt;2-&gt;\n    :BEAMER_ENV: block\n    :END:\n    for contributing to the discussion\n**** This will be formatted as a beamer note                       :B_note:\n     :PROPERTIES:\n     :BEAMER_env: note\n     :END:\n** Frame 2 (where we will not use columns)\n*** Request\n    Please test this stuff!\n</pre></div>\n\n"}, {"id": "139HTMLExport", "content": "\n<span id=\"HTML-Export\"></span>\n<span id=\"HTML-Export-1\"></span><h3 class=\"section\">13.9 HTML Export</h3>\n\n<span id=\"index-HTML-export\"></span>\n\n<p>Org mode contains an HTML exporter with extensive HTML formatting\ncompatible with XHTML 1.0 strict standard.\n</p>\n\n\n"}, {"id": "1391HTMLexportcommands", "content": "\n<span id=\"HTML-export-commands\"></span>\n<span id=\"HTML-export-commands-1\"></span><h4 class=\"subsection\">13.9.1 HTML export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e h h</kbd> (<code>org-html-export-to-html</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-h-h\"></span>\n<span id=\"index-C_002dc-C_002de-h-o\"></span>\n<span id=\"index-org_002dhtml_002dexport_002dto_002dhtml\"></span>\n\n<p>Export as HTML file with a \u2018<samp>.html</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019, Org\nexports to \u2018<samp>myfile.html</samp>\u2019, overwriting without warning.  <kbd>C-c C-e h o</kbd> exports to HTML and opens it in a web browser.\n</p>\n</dd>\n<dt><kbd>C-c C-e h H</kbd> (<code>org-html-export-as-html</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-h-H\"></span>\n<span id=\"index-org_002dhtml_002dexport_002das_002dhtml\"></span>\n\n<p>Exports to a temporary buffer.  Does not create a file.\n</p></dd>\n</dl>\n\n"}, {"id": "1392HTMLspecificexportsettings", "content": "\n<span id=\"HTML-specific-export-settings\"></span>\n<span id=\"HTML-specific-export-settings-1\"></span><h4 class=\"subsection\">13.9.2 HTML specific export settings</h4>\n\n<p>HTML export has a number of keywords, similar to the general options\nsettings described in <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>DESCRIPTION</samp>\u2019</dt>\n<dd><span id=\"index-DESCRIPTION_002c-keyword-1\"></span>\n<p>This is the document\u2019s description, which the HTML exporter inserts\nit as a HTML meta tag in the HTML file.  For long descriptions, use\nmultiple \u2018<samp>DESCRIPTION</samp>\u2019 lines.  The exporter takes care of wrapping\nthe lines properly.\n</p>\n<p>The exporter includes a number of other meta tags, which can be customized\nby modifying <code>org-html-meta-tags</code>.\n</p>\n</dd>\n<dt>\u2018<samp>HTML_DOCTYPE</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fDOCTYPE_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002ddoctype\"></span>\n<p>Specify the document type, for example: HTML5 (<code>org-html-doctype</code>).\n</p>\n</dd>\n<dt>\u2018<samp>HTML_CONTAINER</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fCONTAINER_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dcontainer_002delement\"></span>\n<p>Specify the HTML container, such as \u2018<samp>div</samp>\u2019, for wrapping sections and\nelements (<code>org-html-container-element</code>).\n</p>\n</dd>\n<dt>\u2018<samp>HTML_LINK_HOME</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fLINK_005fHOME_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dlink_002dhome\"></span>\n<p>The URL for home link (<code>org-html-link-home</code>).\n</p>\n</dd>\n<dt>\u2018<samp>HTML_LINK_UP</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fLINK_005fUP_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dlink_002dup\"></span>\n<p>The URL for the up link of exported HTML pages (<code>org-html-link-up</code>).\n</p>\n</dd>\n<dt>\u2018<samp>HTML_MATHJAX</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fMATHJAX_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dmathjax_002doptions\"></span>\n<p>Options for MathJax (<code>org-html-mathjax-options</code>).  MathJax is used\nto typeset LaTeX math in HTML documents.  See <a href=\"https://orgmode.org/org.html#Math-formatting-in-HTML-export\">Math formatting in HTML export</a>, for an example.\n</p>\n</dd>\n<dt>\u2018<samp>HTML_HEAD</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fHEAD_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dhead\"></span>\n<p>Arbitrary lines for appending to the HTML document\u2019s head\n(<code>org-html-head</code>).\n</p>\n</dd>\n<dt>\u2018<samp>HTML_HEAD_EXTRA</samp>\u2019</dt>\n<dd><span id=\"index-HTML_005fHEAD_005fEXTRA_002c-keyword\"></span>\n<span id=\"index-org_002dhtml_002dhead_002dextra\"></span>\n<p>More arbitrary lines for appending to the HTML document\u2019s head\n(<code>org-html-head-extra</code>).\n</p>\n</dd>\n<dt>\u2018<samp>KEYWORDS</samp>\u2019</dt>\n<dd><span id=\"index-KEYWORDS_002c-keyword-1\"></span>\n<p>Keywords to describe the document\u2019s content.  HTML exporter inserts\nthese keywords as HTML meta tags.  For long keywords, use multiple\n\u2018<samp>KEYWORDS</samp>\u2019 lines.\n</p>\n</dd>\n<dt>\u2018<samp>LATEX_HEADER</samp>\u2019</dt>\n<dd><span id=\"index-LATEX_005fHEADER_002c-keyword\"></span>\n<p>Arbitrary lines for appending to the preamble; HTML exporter appends\nwhen transcoding LaTeX fragments to images (see <a href=\"https://orgmode.org/org.html#Math-formatting-in-HTML-export\">Math formatting in HTML export</a>).\n</p>\n</dd>\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword-2\"></span>\n<p>The document\u2019s subtitle.  HTML exporter formats subtitle if document\ntype is \u2018<samp>HTML5</samp>\u2019 and the CSS has a \u2018<samp>subtitle</samp>\u2019 class.\n</p></dd>\n</dl>\n\n<p>Some of these keywords are explained in more detail in the following\nsections of the manual.\n</p>\n"}, {"id": "1393HTMLdoctypes", "content": "\n<span id=\"HTML-doctypes\"></span>\n<span id=\"HTML-doctypes-1\"></span><h4 class=\"subsection\">13.9.3 HTML doctypes</h4>\n\n<p>Org can export to various (X)HTML flavors.\n</p>\n<span id=\"index-org_002dhtml_002ddoctype-1\"></span>\n<span id=\"index-org_002dhtml_002ddoctype_002dalist\"></span>\n<p>Set the <code>org-html-doctype</code> variable for different (X)HTML variants.\nDepending on the variant, the HTML exporter adjusts the syntax of HTML\nconversion accordingly.  Org includes the following ready-made\nvariants:\n</p>\n<ul>\n<li> <code>\"html4-strict\"</code>\n</li><li> <code>\"html4-transitional\"</code>\n</li><li> <code>\"html4-frameset\"</code>\n</li><li> <code>\"xhtml-strict\"</code>\n</li><li> <code>\"xhtml-transitional\"</code>\n</li><li> <code>\"xhtml-frameset\"</code>\n</li><li> <code>\"xhtml-11\"</code>\n</li><li> <code>\"html5\"</code>\n</li><li> <code>\"xhtml5\"</code>\n</li></ul>\n\n<p>See the variable <code>org-html-doctype-alist</code> for details.  The default is\n<code>\"xhtml-strict\"</code>.\n</p>\n<span id=\"index-org_002dhtml_002dhtml5_002dfancy\"></span>\n<span id=\"index-HTML5_002c-export-new-elements\"></span>\n<p>Org\u2019s HTML exporter does not by default enable new block elements\nintroduced with the HTML5 standard.  To enable them, set\n<code>org-html-html5-fancy</code> to non-<code>nil</code>.  Or use an \u2018<samp>OPTIONS</samp>\u2019 line in the\nfile to set \u2018<samp>html5-fancy</samp>\u2019.\n</p>\n<p>HTML5 documents can now have arbitrary \u2018<samp>#+BEGIN</samp>\u2019 \u2026 \u2018<samp>#+END</samp>\u2019 blocks.\nFor example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_aside\n  Lorem ipsum\n#+END_aside\n</pre></div>\n\n<p>exports to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;aside&gt;\n  &lt;p&gt;Lorem ipsum&lt;/p&gt;\n&lt;/aside&gt;\n</pre></div>\n\n<p>while this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_HTML: :controls controls :width 350\n#+BEGIN_video\n#+HTML: &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt;\n#+HTML: &lt;source src=\"movie.ogg\" type=\"video/ogg\"&gt;\nYour browser does not support the video tag.\n#+END_video\n</pre></div>\n\n<p>exports to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;video controls=\"controls\" width=\"350\"&gt;\n  &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt;\n  &lt;source src=\"movie.ogg\" type=\"video/ogg\"&gt;\n  &lt;p&gt;Your browser does not support the video tag.&lt;/p&gt;\n&lt;/video&gt;\n</pre></div>\n\n<span id=\"index-org_002dhtml_002dhtml5_002delements\"></span>\n<p>When special blocks do not have a corresponding HTML5 element, the\nHTML exporter reverts to standard translation (see\n<code>org-html-html5-elements</code>).  For example, \u2018<samp>#+BEGIN_lederhosen</samp>\u2019 exports\nto <code>&lt;div class=\"lederhosen\"&gt;</code>.\n</p>\n<p>Special blocks cannot have headlines.  For the HTML exporter to wrap\nthe headline and its contents in <code>&lt;section&gt;</code> or <code>&lt;article&gt;</code> tags, set\nthe \u2018<samp>HTML_CONTAINER</samp>\u2019 property for the headline.\n</p>\n"}, {"id": "1394HTMLpreambleandpostamble", "content": "\n<span id=\"HTML-preamble-and-postamble\"></span>\n<span id=\"HTML-preamble-and-postamble-1\"></span><h4 class=\"subsection\">13.9.4 HTML preamble and postamble</h4>\n\n<span id=\"index-org_002dhtml_002dpreamble\"></span>\n<span id=\"index-org_002dhtml_002dpostamble\"></span>\n<span id=\"index-org_002dhtml_002dpreamble_002dformat\"></span>\n<span id=\"index-org_002dhtml_002dpostamble_002dformat\"></span>\n<span id=\"index-org_002dhtml_002dvalidation_002dlink\"></span>\n<span id=\"index-org_002dexport_002dcreator_002dstring\"></span>\n<span id=\"index-org_002dexport_002dtime_002dstamp_002dfile-1\"></span>\n\n<p>The HTML exporter has delineations for preamble and postamble.  The\ndefault value for <code>org-html-preamble</code> is <code>t</code>, which makes the HTML\nexporter insert the preamble.  See the variable\n<code>org-html-preamble-format</code> for the format string.\n</p>\n<p>Set <code>org-html-preamble</code> to a string to override the default format\nstring.  If the string is a function, the HTML exporter expects the\nfunction to return a string upon execution.  The HTML exporter inserts\nthis string in the preamble.  The HTML exporter does not insert\na preamble if <code>org-html-preamble</code> is set <code>nil</code>.\n</p>\n<p>The default value for <code>org-html-postamble</code> is <code>auto</code>, which makes the\nHTML exporter build a postamble from looking up author\u2019s name, email\naddress, creator\u2019s name, and date.  Set <code>org-html-postamble</code> to <code>t</code> to\ninsert the postamble in the format specified in the\n<code>org-html-postamble-format</code> variable.  The HTML exporter does not\ninsert a postamble if <code>org-html-postamble</code> is set to <code>nil</code>.\n</p>\n"}, {"id": "1395QuotingHTMLtags", "content": "\n<span id=\"Quoting-HTML-tags\"></span>\n<span id=\"Quoting-HTML-tags-1\"></span><h4 class=\"subsection\">13.9.5 Quoting HTML tags</h4>\n\n<p>The HTML export back-end transforms \u2018<samp>&lt;</samp>\u2019 and \u2018<samp>&gt;</samp>\u2019 to \u2018<samp>&amp;lt;</samp>\u2019 and \u2018<samp>&amp;gt;</samp>\u2019.\nTo include raw HTML code in the Org file so the HTML export back-end\ncan insert that HTML code in the output, use this inline syntax:\n\u2018<samp>@@html:...@@</samp>\u2019.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">@@html:&lt;b&gt;@@bold text@@html:&lt;/b&gt;@@\n</pre></div>\n\n\n<span id=\"index-HTML_002c-keyword\"></span>\n<span id=\"index-BEGIN_005fEXPORT-html\"></span>\n<p>For larger raw HTML code blocks, use these HTML export code blocks:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+HTML: Literal HTML code for export\n\n#+BEGIN_EXPORT html\n  All lines between these markers are exported literally\n#+END_EXPORT\n</pre></div>\n\n"}, {"id": "1396HeadlinesinHTMLexport", "content": "\n<span id=\"Headlines-in-HTML-export\"></span>\n<span id=\"Headlines-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.6 Headlines in HTML export</h4>\n\n<span id=\"index-headlines_002c-in-HTML-export\"></span>\n\n<p>Headlines are exported to \u2018<samp>&lt;h1&gt;</samp>\u2019, \u2018<samp>&lt;h2&gt;</samp>\u2019, etc.  Each headline gets the\n\u2018<samp>id</samp>\u2019 attribute from \u2018<samp>CUSTOM_ID</samp>\u2019 property, or a unique generated value,\nsee <a href=\"https://orgmode.org/org.html#Internal-Links\">Internal Links</a>.\n</p>\n<span id=\"index-org_002dhtml_002dself_002dlink_002dheadlines\"></span>\n<p>When <code>org-html-self-link-headlines</code> is set to a non-<code>nil</code> value, the\ntext of the headlines is also wrapped in \u2018<samp>&lt;a&gt;</samp>\u2019 tags.  These tags have\na \u2018<samp>href</samp>\u2019 attribute making the headlines link to themselves.\n</p>\n"}, {"id": "1397LinksinHTMLexport", "content": "\n<span id=\"Links-in-HTML-export\"></span>\n<span id=\"Links-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.7 Links in HTML export</h4>\n\n<span id=\"index-links_002c-in-HTML-export\"></span>\n<span id=\"index-internal-links_002c-in-HTML-export\"></span>\n<span id=\"index-external-links_002c-in-HTML-export\"></span>\n\n<p>The HTML export back-end transforms Org\u2019s internal links (see\n<a href=\"https://orgmode.org/org.html#Internal-Links\">Internal Links</a>) to equivalent HTML links in the output.  The back-end\nsimilarly handles Org\u2019s automatic links created by radio targets (see\n<a href=\"https://orgmode.org/org.html#Radio-Targets\">Radio Targets</a>) similarly.  For Org links to external files, the\nback-end transforms the links to <em>relative</em> paths.\n</p>\n<span id=\"index-org_002dhtml_002dlink_002dorg_002dfiles_002das_002dhtml\"></span>\n<p>For Org links to other \u2018<samp>.org</samp>\u2019 files, the back-end automatically\nchanges the file extension to \u2018<samp>.html</samp>\u2019 and makes file paths relative.\nIf the \u2018<samp>.org</samp>\u2019 files have an equivalent \u2018<samp>.html</samp>\u2019 version at the same\nlocation, then the converted links should work without any further\nmanual intervention.  However, to disable this automatic path\ntranslation, set <code>org-html-link-org-files-as-html</code> to <code>nil</code>.  When\ndisabled, the HTML export back-end substitutes the ID-based links in\nthe HTML output.  For more about linking files when publishing to\na directory, see <a href=\"https://orgmode.org/org.html#Publishing-links\">Publishing links</a>.\n</p>\n<p>Org files can also have special directives to the HTML export\nback-end.  For example, by using \u2018<samp>#+ATTR_HTML</samp>\u2019 lines to specify new\nformat attributes to <code>&lt;a&gt;</code> or <code>&lt;img&gt;</code> tags.  This example shows\nchanging the link\u2019s title and style:\n</p>\n<span id=\"index-ATTR_005fHTML_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_HTML: :title The Org mode homepage :style color:red;\n[[https://orgmode.org]]\n</pre></div>\n\n"}, {"id": "1398TablesinHTMLexport", "content": "\n<span id=\"Tables-in-HTML-export\"></span>\n<span id=\"Tables-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.8 Tables in HTML export</h4>\n\n<span id=\"index-tables_002c-in-HTML\"></span>\n<span id=\"index-org_002dexport_002dhtml_002dtable_002dtag\"></span>\n\n<p>The HTML export back-end uses <code>org-html-table-default-attributes</code> when\nexporting Org tables to HTML.  By default, the exporter does not draw\nframes and cell borders.  To change for this for a table, use the\nfollowing lines before the table in the Org file:\n</p>\n<span id=\"index-CAPTION_002c-keyword-1\"></span>\n<span id=\"index-ATTR_005fHTML_002c-keyword-1\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION: This is a table with lines around and between cells\n#+ATTR_HTML: :border 2 :rules all :frame border\n</pre></div>\n\n<p>The HTML export back-end preserves column groupings in Org tables (see\n<a href=\"https://orgmode.org/org.html#Column-Groups\">Column Groups</a>) when exporting to HTML.\n</p>\n<p>Additional options for customizing tables for HTML export.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-html-table-align-individual-fields</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002dalign_002dindividual_002dfields\"></span>\n<p>Non-<code>nil</code> attaches style attributes for alignment to each table\nfield.\n</p>\n</dd>\n<dt><code>org-html-table-caption-above</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002dcaption_002dabove\"></span>\n<p>Non-<code>nil</code> places caption string at the beginning of the table.\n</p>\n</dd>\n<dt><code>org-html-table-data-tags</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002ddata_002dtags\"></span>\n<p>Opening and ending tags for table data fields.\n</p>\n</dd>\n<dt><code>org-html-table-default-attributes</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002ddefault_002dattributes\"></span>\n<p>Default attributes and values for table tags.\n</p>\n</dd>\n<dt><code>org-html-table-header-tags</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002dheader_002dtags\"></span>\n<p>Opening and ending tags for table\u2019s header fields.\n</p>\n</dd>\n<dt><code>org-html-table-row-tags</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002drow_002dtags\"></span>\n<p>Opening and ending tags for table rows.\n</p>\n</dd>\n<dt><code>org-html-table-use-header-tags-for-first-column</code></dt>\n<dd><span id=\"index-org_002dhtml_002dtable_002duse_002dheader_002dtags_002dfor_002dfirst_002dcolumn\"></span>\n<p>Non-<code>nil</code> formats column one in tables with header tags.\n</p></dd>\n</dl>\n\n"}, {"id": "1399ImagesinHTMLexport", "content": "\n<span id=\"Images-in-HTML-export\"></span>\n<span id=\"Images-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.9 Images in HTML export</h4>\n\n<span id=\"index-images_002c-inline-in-HTML\"></span>\n<span id=\"index-inlining-images-in-HTML\"></span>\n\n<p>The HTML export back-end has features to convert Org image links to\nHTML inline images and HTML clickable image links.\n</p>\n<span id=\"index-org_002dhtml_002dinline_002dimages\"></span>\n<p>When the link in the Org file has no description, the HTML export\nback-end by default in-lines that image.  For example:\n\u2018<samp>[[file:myimg.jpg]]</samp>\u2019 is in-lined, while \u2018<samp>[[file:myimg.jpg][the image]]</samp>\u2019 links to the text,\n\u2018<samp>the image</samp>\u2019.  For more details, see the variable\n<code>org-html-inline-images</code>.\n</p>\n<p>On the other hand, if the description part of the Org link is itself\nanother link, such as \u2018<samp>file:</samp>\u2019 or \u2018<samp>http:</samp>\u2019 URL pointing to an image, the\nHTML export back-end in-lines this image and links to the main image.\nThis Org syntax enables the back-end to link low-resolution thumbnail\nto the high-resolution version of the image, as shown in this example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[file:highres.jpg][file:thumb.jpg]]\n</pre></div>\n\n\n<p>To change attributes of in-lined images, use \u2018<samp>#+ATTR_HTML</samp>\u2019 lines in\nthe Org file.  This example shows realignment to right, and adds <code>alt</code>\nand <code>title</code> attributes in support of text viewers and modern web\naccessibility standards.\n</p>\n<span id=\"index-CAPTION_002c-keyword-2\"></span>\n<span id=\"index-ATTR_005fHTML_002c-keyword-2\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION: A black cat stalking a spider\n#+ATTR_HTML: :alt cat/spider image :title Action! :align right\n[[./img/a.jpg]]\n</pre></div>\n\n<p>The HTML export back-end copies the \u2018<samp>http</samp>\u2019 links from the Org file\nas-is.\n</p>\n"}, {"id": "13910MathformattinginHTMLexport", "content": "\n<span id=\"Math-formatting-in-HTML-export\"></span>\n<span id=\"Math-formatting-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.10 Math formatting in HTML export</h4>\n\n<span id=\"index-MathJax\"></span>\n<span id=\"index-dvipng\"></span>\n<span id=\"index-dvisvgm\"></span>\n<span id=\"index-ImageMagick\"></span>\n\n<span id=\"index-org_002dhtml_002dmathjax_002doptions_007e\"></span>\n<p>LaTeX math snippets (see <a href=\"https://orgmode.org/org.html#LaTeX-fragments\">LaTeX fragments</a>) can be displayed in two\ndifferent ways on HTML pages.  The default is to use the <a href=\"https://www.mathjax.org/\">MathJax</a>,\nwhich should work out of the box with Org<a id=\"DOCF130\" href=\"https://orgmode.org/org.html#FOOT130\"><sup>130</sup></a><a id=\"DOCF131\" href=\"https://orgmode.org/org.html#FOOT131\"><sup>131</sup></a>.  Some MathJax\ndisplay options can be configured via <code>org-html-mathjax-options</code>, or\nin the buffer.  For example, with the following settings,\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler\n#+HTML_MATHJAX: cancel.js noErrors.js\n</pre></div>\n\n<p>equation labels are displayed on the left margin and equations are\nfive em from the left margin.  In addition, it loads the two MathJax\nextensions \u2018<samp>cancel.js</samp>\u2019 and \u2018<samp>noErrors.js</samp>\u2019<a id=\"DOCF132\" href=\"https://orgmode.org/org.html#FOOT132\"><sup>132</sup></a>.\n</p>\n<span id=\"index-org_002dhtml_002dmathjax_002dtemplate\"></span>\n<p>See the docstring of <code>org-html-mathjax-options</code> for all supported\nvariables.  The MathJax template can be configure via\n<code>org-html-mathjax-template</code>.\n</p>\n<p>If you prefer, you can also request that LaTeX fragments are processed\ninto small images that will be inserted into the browser page.  Before\nthe availability of MathJax, this was the default method for Org\nfiles.  This method requires that the dvipng program, dvisvgm or\nImageMagick suite is available on your system.  You can still get this\nprocessing with\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:dvipng\n</pre></div>\n\n\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:dvisvgm\n</pre></div>\n\n\n<p>or\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:imagemagick\n</pre></div>\n\n"}, {"id": "13911TextareasinHTMLexport", "content": "\n<span id=\"Text-areas-in-HTML-export\"></span>\n<span id=\"Text-areas-in-HTML-export-1\"></span><h4 class=\"subsection\">13.9.11 Text areas in HTML export</h4>\n\n<span id=\"index-text-areas_002c-in-HTML\"></span>\n<p>Before Org mode\u2019s Babel, one popular approach to publishing code in\nHTML was by using \u2018<samp>:textarea</samp>\u2019.  The advantage of this approach was\nthat copying and pasting was built into browsers with simple\nJavaScript commands.  Even editing before pasting was made simple.\n</p>\n<p>The HTML export back-end can create such text areas.  It requires an\n\u2018<samp>#+ATTR_HTML</samp>\u2019 line as shown in the example below with the \u2018<samp>:textarea</samp>\u2019\noption.  This must be followed by either an example or a source code\nblock.  Other Org block types do not honor the \u2018<samp>:textarea</samp>\u2019 option.\n</p>\n<p>By default, the HTML export back-end creates a text area 80 characters\nwide and height just enough to fit the content.  Override these\ndefaults with \u2018<samp>:width</samp>\u2019 and \u2018<samp>:height</samp>\u2019 options on the \u2018<samp>#+ATTR_HTML</samp>\u2019\nline.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_HTML: :textarea t :width 40\n#+BEGIN_EXAMPLE\n  (defun org-xor (a b)\n     \"Exclusive or.\"\n     (if a (not b) b))\n#+END_EXAMPLE\n</pre></div>\n\n"}, {"id": "13912CSSsupport", "content": "\n<span id=\"CSS-support\"></span>\n<span id=\"CSS-support-1\"></span><h4 class=\"subsection\">13.9.12 CSS support</h4>\n\n<span id=\"index-CSS_002c-for-HTML-export\"></span>\n<span id=\"index-HTML-export_002c-CSS\"></span>\n\n<span id=\"index-org_002dexport_002dhtml_002dtodo_002dkwd_002dclass_002dprefix\"></span>\n<span id=\"index-org_002dexport_002dhtml_002dtag_002dclass_002dprefix\"></span>\n<p>You can modify the CSS style definitions for the exported file.  The\nHTML exporter assigns the following special CSS classes<a id=\"DOCF133\" href=\"https://orgmode.org/org.html#FOOT133\"><sup>133</sup></a> to\nappropriate parts of the document\u2014your style specifications may\nchange these, in addition to any of the standard classes like for\nheadlines, tables, etc.\n</p>\n<table>\n<tbody><tr><td><code>p.author</code></td><td>author information, including email</td></tr>\n<tr><td><code>p.date</code></td><td>publishing date</td></tr>\n<tr><td><code>p.creator</code></td><td>creator info, about org mode version</td></tr>\n<tr><td><code>.title</code></td><td>document title</td></tr>\n<tr><td><code>.subtitle</code></td><td>document subtitle</td></tr>\n<tr><td><code>.todo</code></td><td>TODO keywords, all not-done states</td></tr>\n<tr><td><code>.done</code></td><td>the DONE keywords, all states that count as done</td></tr>\n<tr><td><code>.WAITING</code></td><td>each TODO keyword also uses a class named after itself</td></tr>\n<tr><td><code>.timestamp</code></td><td>timestamp</td></tr>\n<tr><td><code>.timestamp-kwd</code></td><td>keyword associated with a timestamp, like \u2018<samp>SCHEDULED</samp>\u2019</td></tr>\n<tr><td><code>.timestamp-wrapper</code></td><td>span around keyword plus timestamp</td></tr>\n<tr><td><code>.tag</code></td><td>tag in a headline</td></tr>\n<tr><td><code>._HOME</code></td><td>each tag uses itself as a class, \u201c@\u201d replaced by \u201c_\u201d</td></tr>\n<tr><td><code>.target</code></td><td>target for links</td></tr>\n<tr><td><code>.linenr</code></td><td>the line number in a code example</td></tr>\n<tr><td><code>.code-highlighted</code></td><td>for highlighting referenced code lines</td></tr>\n<tr><td><code>div.outline-N</code></td><td>div for outline level N (headline plus text)</td></tr>\n<tr><td><code>div.outline-text-N</code></td><td>extra div for text at outline level N</td></tr>\n<tr><td><code>.section-number-N</code></td><td>section number in headlines, different for each level</td></tr>\n<tr><td><code>.figure-number</code></td><td>label like \u201cFigure 1:\u201d</td></tr>\n<tr><td><code>.table-number</code></td><td>label like \u201cTable 1:\u201d</td></tr>\n<tr><td><code>.listing-number</code></td><td>label like \u201cListing 1:\u201d</td></tr>\n<tr><td><code>div.figure</code></td><td>how to format an in-lined image</td></tr>\n<tr><td><code>pre.src</code></td><td>formatted source code</td></tr>\n<tr><td><code>pre.example</code></td><td>normal example</td></tr>\n<tr><td><code>p.verse</code></td><td>verse paragraph</td></tr>\n<tr><td><code>div.footnotes</code></td><td>footnote section headline</td></tr>\n<tr><td><code>p.footnote</code></td><td>footnote definition paragraph, containing a footnote</td></tr>\n<tr><td><code>.footref</code></td><td>a footnote reference number (always a &lt;sup&gt;)</td></tr>\n<tr><td><code>.footnum</code></td><td>footnote number in footnote definition (always &lt;sup&gt;)</td></tr>\n<tr><td><code>.org-svg</code></td><td>default class for a linked \u2018<samp>.svg</samp>\u2019 image</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dhtml_002dstyle_002ddefault\"></span>\n<span id=\"index-org_002dhtml_002dhead-1\"></span>\n<span id=\"index-org_002dhtml_002dhead_002dextra-1\"></span>\n<span id=\"index-HTML_005fINCLUDE_005fSTYLE_002c-keyword\"></span>\n<p>The HTML export back-end includes a compact default style in each\nexported HTML file.  To override the default style with another style,\nuse these keywords in the Org file.  They will replace the global\ndefaults the HTML exporter uses.\n</p>\n<span id=\"index-HTML_005fHEAD_002c-keyword-1\"></span>\n<span id=\"index-HTML_005fHEAD_005fEXTRA_002c-keyword-1\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+HTML_HEAD: &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style1.css\" /&gt;\n#+HTML_HEAD_EXTRA: &lt;link rel=\"alternate stylesheet\" type=\"text/css\" href=\"style2.css\" /&gt;\n</pre></div>\n\n<span id=\"index-org_002dhtml_002dhead_002dinclude_002ddefault_002dstyle\"></span>\n<p>To just turn off the default style, customize\n<code>org-html-head-include-default-style</code> variable, or use this option\nline in the Org file.\n</p>\n<span id=\"index-html_002dstyle_002c-OPTIONS-item\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: html-style:nil\n</pre></div>\n\n\n<p>For longer style definitions, either use several \u2018<samp>HTML_HEAD</samp>\u2019 and\n\u2018<samp>HTML_HEAD_EXTRA</samp>\u2019 keywords, or use <code>&lt;style&gt; ... &lt;/style&gt;</code> blocks\naround them.  Both of these approaches can avoid referring to an\nexternal file.\n</p>\n<span id=\"index-HTML_005fCONTAINER_005fCLASS_002c-property\"></span>\n<span id=\"index-HTML_005fHEADLINE_005fCLASS_002c-property\"></span>\n<p>In order to add styles to a sub-tree, use the \u2018<samp>HTML_CONTAINER_CLASS</samp>\u2019\nproperty to assign a class to the tree.  In order to specify CSS\nstyles for a particular headline, you can use the ID specified in\na \u2018<samp>CUSTOM_ID</samp>\u2019 property.  You can also assign a specific class to\na headline with the \u2018<samp>HTML_HEADLINE_CLASS</samp>\u2019 property.\n</p>\n<p>Never change the <code>org-html-style-default</code> constant.  Instead use other\nsimpler ways of customizing as described above.\n</p>\n"}, {"id": "13913JavaScriptsupporteddisplayofwebpages", "content": "\n<span id=\"JavaScript-support\"></span>\n<span id=\"JavaScript-supported-display-of-web-pages\"></span><h4 class=\"subsection\">13.9.13 JavaScript supported display of web pages</h4>\n\n<p>Sebastian Rose has written a JavaScript program especially designed to\nallow two different ways of viewing HTML files created with Org.  One\nis an <em>Info</em>-like mode where each section is displayed separately and\nnavigation can be done with the <kbd>n</kbd> and <kbd>p</kbd> keys, and some other\nkeys as well, press <kbd>?</kbd> for an overview of the available keys.  The\nsecond one has a <em>folding</em> view, much like Org provides inside Emacs.\nThe script is available at <a href=\"https://orgmode.org/org-info.js\">https://orgmode.org/org-info.js</a> and the\ndocumentation at <a href=\"https://orgmode.org/worg/code/org-info-js/\">https://orgmode.org/worg/code/org-info-js/</a>.  The\nscript is hosted on <a href=\"https://orgmode.org/\">https://orgmode.org</a>, but for reliability, prefer\ninstalling it on your own web server.\n</p>\n<p>To use this program, just add this line to the Org file:\n</p>\n<span id=\"index-INFOJS_005fOPT_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+INFOJS_OPT: view:info toc:nil\n</pre></div>\n\n\n<p>The HTML header now has the code needed to automatically invoke the\nscript.  For setting options, use the syntax from the above line for\noptions described below:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>path:</samp>\u2019</dt>\n<dd><p>The path to the script.  The default is to grab the script from\n<a href=\"https://orgmode.org/org-info.js\">https://orgmode.org/org-info.js</a>, but you might want to have a local\ncopy and use a path like \u2018<samp>../scripts/org-info.js</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>view:</samp>\u2019</dt>\n<dd><p>Initial view when the website is first shown.  Possible values are:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>info</samp>\u2019</td><td>Info-like interface with one section per page</td></tr>\n<tr><td>\u2018<samp>overview</samp>\u2019</td><td>Folding interface, initially showing only top-level</td></tr>\n<tr><td>\u2018<samp>content</samp>\u2019</td><td>Folding interface, starting with all headlines visible</td></tr>\n<tr><td>\u2018<samp>showall</samp>\u2019</td><td>Folding interface, all headlines and text visible</td></tr>\n</tbody></table>\n\n</dd>\n<dt>\u2018<samp>sdepth:</samp>\u2019</dt>\n<dd><p>Maximum headline level still considered as an independent section\nfor info and folding modes.  The default is taken from\n<code>org-export-headline-levels</code>, i.e., the \u2018<samp>H</samp>\u2019 switch in \u2018<samp>OPTIONS</samp>\u2019.  If\nthis is smaller than in <code>org-export-headline-levels</code>, each\ninfo/folding section can still contain child headlines.\n</p>\n</dd>\n<dt>\u2018<samp>toc:</samp>\u2019</dt>\n<dd><p>Should the table of contents <em>initially</em> be visible?  Even when\n\u2018<samp>nil</samp>\u2019, you can always get to the \u201ctoc\u201d with <kbd>i</kbd>.\n</p>\n</dd>\n<dt>\u2018<samp>tdepth:</samp>\u2019</dt>\n<dd><p>The depth of the table of contents.  The defaults are taken from the\nvariables <code>org-export-headline-levels</code> and <code>org-export-with-toc</code>.\n</p>\n</dd>\n<dt>\u2018<samp>ftoc:</samp>\u2019</dt>\n<dd><p>Does the CSS of the page specify a fixed position for the \u201ctoc\u201d?  If\nyes, the toc is displayed as a section.\n</p>\n</dd>\n<dt>\u2018<samp>ltoc:</samp>\u2019</dt>\n<dd><p>Should there be short contents (children) in each section?  Make\nthis \u2018<samp>above</samp>\u2019 if the section should be above initial text.\n</p>\n</dd>\n<dt>\u2018<samp>mouse:</samp>\u2019</dt>\n<dd><p>Headings are highlighted when the mouse is over them.  Should be\n\u2018<samp>underline</samp>\u2019 (default) or a background color like \u2018<samp>#cccccc</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>buttons:</samp>\u2019</dt>\n<dd><p>Should view-toggle buttons be everywhere?  When \u2018<samp>nil</samp>\u2019 (the default),\nonly one such button is present.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dinfojs_002doptions\"></span>\n<span id=\"index-org_002dexport_002dhtml_002duse_002dinfojs\"></span>\n<p>You can choose default values for these options by customizing the\nvariable <code>org-infojs-options</code>.  If you always want to apply the script\nto your pages, configure the variable <code>org-export-html-use-infojs</code>.\n</p>\n"}, {"id": "1310LaTeXExport", "content": "\n<span id=\"LaTeX-Export\"></span>\n<span id=\"LaTeX-Export-1\"></span><h3 class=\"section\">13.10 LaTeX Export</h3>\n\n<span id=\"index-LaTeX-export\"></span>\n<span id=\"index-PDF-export\"></span>\n\n<p>The LaTeX export back-end can handle complex documents, incorporate\nstandard or custom LaTeX document classes, generate documents using\nalternate LaTeX engines, and produce fully linked PDF files with\nindexes, bibliographies, and tables of contents, destined for\ninteractive online viewing or high-quality print publication.\n</p>\n<p>While the details are covered in-depth in this section, here are some\nquick references to variables for the impatient: for engines, see\n<code>org-latex-compiler</code>; for build sequences, see\n<code>org-latex-pdf-process</code>; for packages, see\n<code>org-latex-default-packages-alist</code> and <code>org-latex-packages-alist</code>.\n</p>\n<p>An important note about the LaTeX export back-end: it is sensitive to\nblank lines in the Org document.  That\u2019s because LaTeX itself depends\non blank lines to tell apart syntactical elements, such as paragraphs.\n</p>\n\n\n"}, {"id": "13101LaTeXPDFexportcommands", "content": "\n<span id=\"LaTeX_002fPDF-export-commands\"></span>\n<span id=\"LaTeX_002fPDF-export-commands-1\"></span><h4 class=\"subsection\">13.10.1 LaTeX/PDF export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e l l</kbd> (<code>org-latex-export-to-latex</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-l\"></span>\n<span id=\"index-org_002dlatex_002dexport_002dto_002dlatex_007e\"></span>\n<p>Export to a LaTeX file with a \u2018<samp>.tex</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019,\nOrg exports to \u2018<samp>myfile.tex</samp>\u2019, overwriting without warning.\n</p>\n</dd>\n<dt><kbd>C-c C-e l L</kbd> (<code>org-latex-export-as-latex</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-L\"></span>\n<span id=\"index-org_002dlatex_002dexport_002das_002dlatex\"></span>\n<p>Export to a temporary buffer.  Do not create a file.\n</p>\n</dd>\n<dt><kbd>C-c C-e l p</kbd> (<code>org-latex-export-to-pdf</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-l-p\"></span>\n<span id=\"index-org_002dlatex_002dexport_002dto_002dpdf\"></span>\n<p>Export as LaTeX file and convert it to PDF file.\n</p>\n</dd>\n<dt><kbd>C-c C-e l o</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-l-o\"></span>\n<p>Export as LaTeX file and convert it to PDF, then open the PDF using\nthe default viewer.\n</p>\n</dd>\n<dt><kbd>M-x org-export-region-as-latex</kbd></dt>\n<dd><p>Convert the region to LaTeX under the assumption that it was in Org\nmode syntax before.  This is a global command that can be invoked in\nany buffer.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dlatex_002dcompiler\"></span>\n<span id=\"index-org_002dlatex_002dbibtex_002dcompiler\"></span>\n<span id=\"index-org_002dlatex_002ddefault_002dpackages_002dalist\"></span>\n<span id=\"index-pdflatex\"></span>\n<span id=\"index-xelatex\"></span>\n<span id=\"index-lualatex\"></span>\n<span id=\"index-LATEX_005fCOMPILER_002c-keyword\"></span>\n<p>The LaTeX export back-end can use any of these LaTeX engines:\n\u2018<samp>pdflatex</samp>\u2019, \u2018<samp>xelatex</samp>\u2019, and \u2018<samp>lualatex</samp>\u2019.  These engines compile LaTeX\nfiles with different compilers, packages, and output options.  The\nLaTeX export back-end finds the compiler version to use from\n<code>org-latex-compiler</code> variable or the \u2018<samp>#+LATEX_COMPILER</samp>\u2019 keyword in the\nOrg file.  See the docstring for the\n<code>org-latex-default-packages-alist</code> for loading packages with certain\ncompilers.  Also see <code>org-latex-bibtex-compiler</code> to set the\nbibliography compiler<a id=\"DOCF134\" href=\"https://orgmode.org/org.html#FOOT134\"><sup>134</sup></a>.\n</p>\n"}, {"id": "13102LaTeXspecificexportsettings", "content": "\n<span id=\"LaTeX-specific-export-settings\"></span>\n<span id=\"LaTeX-specific-export-settings-1\"></span><h4 class=\"subsection\">13.10.2 LaTeX specific export settings</h4>\n\n<p>The LaTeX export back-end has several additional keywords for\ncustomizing LaTeX output.  Setting these keywords works similar to the\ngeneral options (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>DESCRIPTION</samp>\u2019</dt>\n<dd><span id=\"index-DESCRIPTION_002c-keyword-2\"></span>\n<span id=\"index-org_002dlatex_002dhyperref_002dtemplate\"></span>\n<span id=\"index-org_002dlatex_002dtitle_002dcommand\"></span>\n<p>The document\u2019s description.  The description along with author name,\nkeywords, and related file metadata are inserted in the output file\nby the hyperref package.  See <code>org-latex-hyperref-template</code> for\ncustomizing metadata items.  See <code>org-latex-title-command</code> for\ntypesetting description into the document\u2019s front matter.  Use\nmultiple \u2018<samp>DESCRIPTION</samp>\u2019 keywords for long descriptions.\n</p>\n</dd>\n<dt>\u2018<samp>LANGUAGE</samp>\u2019</dt>\n<dd><span id=\"index-LANGUAGE_002c-keyword-1\"></span>\n<span id=\"index-org_002dlatex_002dpackages_002dalist\"></span>\n<p>In order to be effective, the \u2018<samp>babel</samp>\u2019 or \u2018<samp>polyglossia</samp>\u2019\npackages\u2014according to the LaTeX compiler used\u2014must be loaded\nwith the appropriate language as argument.  This can be accomplished\nby modifying the <code>org-latex-packages-alist</code> variable, e.g., with the\nfollowing snippet:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-to-list 'org-latex-packages-alist\n             '(\"AUTO\" \"babel\" t (\"pdflatex\")))\n(add-to-list 'org-latex-packages-alist\n             '(\"AUTO\" \"polyglossia\" t (\"xelatex\" \"lualatex\")))\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>LATEX_CLASS</samp>\u2019</dt>\n<dd><span id=\"index-LATEX_005fCLASS_002c-keyword\"></span>\n<span id=\"index-org_002dlatex_002ddefault_002dclass\"></span>\n<span id=\"index-org_002dlatex_002dclasses\"></span>\n<p>This is LaTeX document class, such as <em>article</em>, <em>report</em>, <em>book</em>,\nand so on, which contain predefined preamble and headline level\nmapping that the LaTeX export back-end needs.  The back-end reads\nthe default class name from the <code>org-latex-default-class</code> variable.\nOrg has <em>article</em> as the default class.  A valid default class must\nbe an element of <code>org-latex-classes</code>.\n</p>\n</dd>\n<dt>\u2018<samp>LATEX_CLASS_OPTIONS</samp>\u2019</dt>\n<dd><span id=\"index-LATEX_005fCLASS_005fOPTIONS_002c-keyword\"></span>\n<p>Options the LaTeX export back-end uses when calling the LaTeX\ndocument class.\n</p>\n</dd>\n<dt>\u2018<samp>LATEX_COMPILER</samp>\u2019</dt>\n<dd><span id=\"index-LATEX_005fCOMPILER_002c-keyword-1\"></span>\n<span id=\"index-org_002dlatex_002dcompiler-1\"></span>\n<p>The compiler, such as \u2018<samp>pdflatex</samp>\u2019, \u2018<samp>xelatex</samp>\u2019, \u2018<samp>lualatex</samp>\u2019, for\nproducing the PDF.  See <code>org-latex-compiler</code>.\n</p>\n</dd>\n<dt>\u2018<samp>LATEX_HEADER</samp>\u2019</dt>\n<dt>\u2018<samp>LATEX_HEADER_EXTRA</samp>\u2019</dt>\n<dd><span id=\"index-LATEX_005fHEADER_002c-keyword-1\"></span>\n<span id=\"index-LATEX_005fHEADER_005fEXTRA_002c-keyword\"></span>\n<span id=\"index-org_002dlatex_002dclasses-1\"></span>\n<p>Arbitrary lines to add to the document\u2019s preamble, before the\nhyperref settings.  See <code>org-latex-classes</code> for adjusting the\nstructure and order of the LaTeX headers.\n</p>\n</dd>\n<dt>\u2018<samp>KEYWORDS</samp>\u2019</dt>\n<dd><span id=\"index-KEYWORDS_002c-keyword-2\"></span>\n<span id=\"index-org_002dlatex_002dhyperref_002dtemplate-1\"></span>\n<span id=\"index-org_002dlatex_002dtitle_002dcommand-1\"></span>\n<p>The keywords for the document.  The description along with author\nname, keywords, and related file metadata are inserted in the output\nfile by the hyperref package.  See <code>org-latex-hyperref-template</code> for\ncustomizing metadata items.  See <code>org-latex-title-command</code> for\ntypesetting description into the document\u2019s front matter.  Use\nmultiple \u2018<samp>KEYWORDS</samp>\u2019 lines if necessary.\n</p>\n</dd>\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword-3\"></span>\n<span id=\"index-org_002dlatex_002dsubtitle_002dseparate\"></span>\n<span id=\"index-org_002dlatex_002dsubtitle_002dformat\"></span>\n<p>The document\u2019s subtitle.  It is typeset as per\n<code>org-latex-subtitle-format</code>.  If <code>org-latex-subtitle-separate</code> is\nnon-<code>nil</code>, it is typed outside of the <code>\\title</code> macro.  See\n<code>org-latex-hyperref-template</code> for customizing metadata items.  See\n<code>org-latex-title-command</code> for typesetting description into the\ndocument\u2019s front matter.\n</p></dd>\n</dl>\n\n<p>The following sections have further details.\n</p>\n"}, {"id": "13103LaTeXheaderandsectioningstructure", "content": "\n<span id=\"LaTeX-header-and-sectioning\"></span>\n<span id=\"LaTeX-header-and-sectioning-structure\"></span><h4 class=\"subsection\">13.10.3 LaTeX header and sectioning structure</h4>\n\n<span id=\"index-LaTeX-class\"></span>\n<span id=\"index-LaTeX-sectioning-structure\"></span>\n<span id=\"index-LaTeX-header\"></span>\n<span id=\"index-header_002c-for-LaTeX-files\"></span>\n<span id=\"index-sectioning-structure_002c-for-LaTeX-export\"></span>\n\n<p>The LaTeX export back-end converts the first three of Org\u2019s outline\nlevels into LaTeX headlines.  The remaining Org levels are exported as\nlists.  To change this globally for the cut-off point between levels\nand lists, (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<p>By default, the LaTeX export back-end uses the <em>article</em> class.\n</p>\n<span id=\"index-org_002dlatex_002ddefault_002dclass-1\"></span>\n<span id=\"index-org_002dlatex_002dclasses-2\"></span>\n<span id=\"index-org_002dlatex_002ddefault_002dpackages_002dalist-1\"></span>\n<span id=\"index-org_002dlatex_002dpackages_002dalist-1\"></span>\n<p>To change the default class globally, edit <code>org-latex-default-class</code>.\nTo change the default class locally in an Org file, add option lines\n\u2018<samp>#+LATEX_CLASS: myclass</samp>\u2019.  To change the default class for just a part\nof the Org file, set a sub-tree property, \u2018<samp>EXPORT_LATEX_CLASS</samp>\u2019.  The\nclass name entered here must be valid member of <code>org-latex-classes</code>.\nThis variable defines a header template for each class into which the\nexporter splices the values of <code>org-latex-default-packages-alist</code> and\n<code>org-latex-packages-alist</code>.  Use the same three variables to define\ncustom sectioning or custom classes.\n</p>\n<span id=\"index-LATEX_005fCLASS_002c-keyword-1\"></span>\n<span id=\"index-LATEX_005fCLASS_005fOPTIONS_002c-keyword-1\"></span>\n<span id=\"index-EXPORT_005fLATEX_005fCLASS_002c-property\"></span>\n<span id=\"index-EXPORT_005fLATEX_005fCLASS_005fOPTIONS_002c-property\"></span>\n<p>The LaTeX export back-end sends the \u2018<samp>LATEX_CLASS_OPTIONS</samp>\u2019 keyword and\n\u2018<samp>EXPORT_LATEX_CLASS_OPTIONS</samp>\u2019 property as options to the LaTeX\n<code>\\documentclass</code> macro.  The options and the syntax for specifying\nthem, including enclosing them in square brackets, follow LaTeX\nconventions.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX_CLASS_OPTIONS: [a4paper,11pt,twoside,twocolumn]\n</pre></div>\n\n\n<span id=\"index-LATEX_005fHEADER_002c-keyword-2\"></span>\n<span id=\"index-LATEX_005fHEADER_005fEXTRA_002c-keyword-1\"></span>\n<p>The LaTeX export back-end appends values from \u2018<samp>LATEX_HEADER</samp>\u2019 and\n\u2018<samp>LATEX_HEADER_EXTRA</samp>\u2019 keywords to the LaTeX header.  The docstring for\n<code>org-latex-classes</code> explains in more detail.  Also note that LaTeX\nexport back-end does not append \u2018<samp>LATEX_HEADER_EXTRA</samp>\u2019 to the header\nwhen previewing LaTeX snippets (see <a href=\"https://orgmode.org/org.html#Previewing-LaTeX-fragments\">Previewing LaTeX fragments</a>).\n</p>\n<p>A sample Org file with the above headers:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX_CLASS: article\n#+LATEX_CLASS_OPTIONS: [a4paper]\n#+LATEX_HEADER: \\usepackage{xyz}\n\n* Headline 1\n  some text\n* Headline 2\n  some more text\n</pre></div>\n\n"}, {"id": "13104QuotingLaTeXcode", "content": "\n<span id=\"Quoting-LaTeX-code\"></span>\n<span id=\"Quoting-LaTeX-code-1\"></span><h4 class=\"subsection\">13.10.4 Quoting LaTeX code</h4>\n\n<p>The LaTeX export back-end can insert any arbitrary LaTeX code, see\n<a href=\"https://orgmode.org/org.html#Embedded-LaTeX\">Embedded LaTeX</a>.  There are three ways to embed such code in the Org\nfile and they all use different quoting syntax.\n</p>\n<span id=\"index-inline_002c-in-LaTeX-export\"></span>\n<p>Inserting in-line quoted with @ symbols:\n</p>\n<div class=\"example\">\n<pre class=\"example\">Code embedded in-line @@latex:any arbitrary LaTeX code@@ in a paragraph.\n</pre></div>\n\n\n<span id=\"index-LATEX_002c-keyword\"></span>\n<p>Inserting as one or more keyword lines in the Org file:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX: any arbitrary LaTeX code\n</pre></div>\n\n\n<span id=\"index-BEGIN_005fEXPORT-latex\"></span>\n<p>Inserting as an export block in the Org file, where the back-end\nexports any code between begin and end markers:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_EXPORT latex\n  any arbitrary LaTeX code\n#+END_EXPORT\n</pre></div>\n\n"}, {"id": "13105TablesinLaTeXexport", "content": "\n<span id=\"Tables-in-LaTeX-export\"></span>\n<span id=\"Tables-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.5 Tables in LaTeX export</h4>\n\n<span id=\"index-tables_002c-in-LaTeX-export\"></span>\n\n<p>The LaTeX export back-end can pass several LaTeX attributes for table\ncontents and layout.  Besides specifying a label (see <a href=\"https://orgmode.org/org.html#Internal-Links\">Internal Links</a>)\nand a caption (see <a href=\"https://orgmode.org/org.html#Captions\">Captions</a>), the other valid LaTeX attributes\ninclude:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:mode</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlatex_002ddefault_002dtable_002dmode\"></span>\n<p>The LaTeX export back-end wraps the table differently depending on\nthe mode for accurate rendering of math symbols.  Mode is either\n\u2018<samp>table</samp>\u2019, \u2018<samp>math</samp>\u2019, \u2018<samp>inline-math</samp>\u2019 or \u2018<samp>verbatim</samp>\u2019.\n</p>\n<p>For \u2018<samp>math</samp>\u2019 or \u2018<samp>inline-math</samp>\u2019 mode, LaTeX export back-end wraps the\ntable in a math environment, but every cell in it is exported as-is.\nThe LaTeX export back-end determines the default mode from\n<code>org-latex-default-table-mode</code>.  The LaTeX export back-end merges\ncontiguous tables in the same mode into a single environment.\n</p>\n</dd>\n<dt>\u2018<samp>:environment</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlatex_002ddefault_002dtable_002denvironment\"></span>\n<p>Set the default LaTeX table environment for the LaTeX export\nback-end to use when exporting Org tables.  Common LaTeX table\nenvironments are provided by these packages: tabularx, longtable,\narray, tabu, and bmatrix.  For packages, such as tabularx and tabu,\nor any newer replacements, include them in the\n<code>org-latex-packages-alist</code> variable so the LaTeX export back-end can\ninsert the appropriate load package headers in the converted LaTeX\nfile.  Look in the docstring for the <code>org-latex-packages-alist</code>\nvariable for configuring these packages for LaTeX snippet previews,\nif any.\n</p>\n</dd>\n<dt>\u2018<samp>:caption</samp>\u2019</dt>\n<dd><p>Use \u2018<samp>CAPTION</samp>\u2019 keyword to set a simple caption for a table (see\n<a href=\"https://orgmode.org/org.html#Captions\">Captions</a>).  For custom captions, use \u2018<samp>:caption</samp>\u2019 attribute, which\naccepts raw LaTeX code.  \u2018<samp>:caption</samp>\u2019 value overrides \u2018<samp>CAPTION</samp>\u2019 value.\n</p>\n</dd>\n<dt>\u2018<samp>:float</samp>\u2019</dt>\n<dt>\u2018<samp>:placement</samp>\u2019</dt>\n<dd><p>The table environments by default are not floats in LaTeX.  To make\nthem floating objects use \u2018<samp>:float</samp>\u2019 with one of the following\noptions: \u2018<samp>sideways</samp>\u2019, \u2018<samp>multicolumn</samp>\u2019, \u2018<samp>t</samp>\u2019, and \u2018<samp>nil</samp>\u2019.\n</p>\n<p>LaTeX floats can also have additional layout \u2018<samp>:placement</samp>\u2019\nattributes.  These are the usual \u2018<samp>[h t b p ! H]</samp>\u2019 permissions\nspecified in square brackets.  Note that for \u2018<samp>:float sideways</samp>\u2019\ntables, the LaTeX export back-end ignores \u2018<samp>:placement</samp>\u2019 attributes.\n</p>\n</dd>\n<dt>\u2018<samp>:align</samp>\u2019</dt>\n<dt>\u2018<samp>:font</samp>\u2019</dt>\n<dt>\u2018<samp>:width</samp>\u2019</dt>\n<dd><p>The LaTeX export back-end uses these attributes for regular tables\nto set their alignments, fonts, and widths.\n</p>\n</dd>\n<dt>\u2018<samp>:spread</samp>\u2019</dt>\n<dd><p>When \u2018<samp>:spread</samp>\u2019 is non-<code>nil</code>, the LaTeX export back-end spreads or\nshrinks the table by the \u2018<samp>:width</samp>\u2019 for tabu and longtabu\nenvironments.  \u2018<samp>:spread</samp>\u2019 has no effect if \u2018<samp>:width</samp>\u2019 is not set.\n</p>\n</dd>\n<dt>\u2018<samp>:booktabs</samp>\u2019</dt>\n<dt>\u2018<samp>:center</samp>\u2019</dt>\n<dt>\u2018<samp>:rmlines</samp>\u2019</dt>\n<dd><span id=\"index-org_002dlatex_002dtables_002dbooktabs\"></span>\n<span id=\"index-org_002dlatex_002dtables_002dcentered\"></span>\n<p>All three commands are toggles.  \u2018<samp>:booktabs</samp>\u2019 brings in modern\ntypesetting enhancements to regular tables.  The booktabs package\nhas to be loaded through <code>org-latex-packages-alist</code>.  \u2018<samp>:center</samp>\u2019 is\nfor centering the table.  \u2018<samp>:rmlines</samp>\u2019 removes all but the very first\nhorizontal line made of ASCII characters from \u201ctable.el\u201d tables\nonly.\n</p>\n</dd>\n<dt>\u2018<samp>:math-prefix</samp>\u2019</dt>\n<dt>\u2018<samp>:math-suffix</samp>\u2019</dt>\n<dt>\u2018<samp>:math-arguments</samp>\u2019</dt>\n<dd><p>The LaTeX export back-end inserts \u2018<samp>:math-prefix</samp>\u2019 string value in\na math environment before the table.  The LaTeX export back-end\ninserts \u2018<samp>:math-suffix</samp>\u2019 string value in a math environment after the\ntable.  The LaTeX export back-end inserts \u2018<samp>:math-arguments</samp>\u2019 string\nvalue between the macro name and the table\u2019s contents.\n\u2018<samp>:math-arguments</samp>\u2019 comes in use for matrix macros that require more\nthan one argument, such as \u2018<samp>qbordermatrix</samp>\u2019.\n</p></dd>\n</dl>\n\n<p>LaTeX table attributes help formatting tables for a wide range of\nsituations, such as matrix product or spanning multiple pages:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :environment longtable :align l|lp{3cm}r|l\n| ... | ... |\n| ... | ... |\n\n#+ATTR_LATEX: :mode math :environment bmatrix :math-suffix \\times\n| a | b |\n| c | d |\n#+ATTR_LATEX: :mode math :environment bmatrix\n| 1 | 2 |\n| 3 | 4 |\n</pre></div>\n\n<p>Set the caption with the LaTeX command\n\u2018<samp>\\bicaption{HeadingA}{HeadingB}</samp>\u2019:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :caption \\bicaption{HeadingA}{HeadingB}\n| ... | ... |\n| ... | ... |\n</pre></div>\n\n"}, {"id": "13106ImagesinLaTeXexport", "content": "\n<span id=\"Images-in-LaTeX-export\"></span>\n<span id=\"Images-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.6 Images in LaTeX export</h4>\n\n<span id=\"index-images_002c-inline-in-LaTeX\"></span>\n<span id=\"index-inlining-images-in-LaTeX\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword\"></span>\n\n<p>The LaTeX export back-end processes image links in Org files that do\nnot have descriptions, such as these links \u2018<samp>[[file:img.jpg]]</samp>\u2019 or\n\u2018<samp>[[./img.jpg]]</samp>\u2019, as direct image insertions in the final PDF output.  In\nthe PDF, they are no longer links but actual images embedded on the\npage.  The LaTeX export back-end uses \u2018<samp>\\includegraphics</samp>\u2019 macro to\ninsert the image.  But for TikZ (<a href=\"http://sourceforge.net/projects/pgf/\">http://sourceforge.net/projects/pgf/</a>)\nimages, the back-end uses an <code>\\input</code> macro wrapped within\na <code>tikzpicture</code> environment.\n</p>\n<p>For specifying image \u2018<samp>:width</samp>\u2019, \u2018<samp>:height</samp>\u2019, \u2018<samp>:scale</samp>\u2019 and other \u2018<samp>:options</samp>\u2019,\nuse this syntax:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :width 5cm :options angle=90\n[[./img/sed-hr4049.pdf]]\n</pre></div>\n\n<p>A \u2018<samp>:scale</samp>\u2019 attribute overrides both \u2018<samp>:width</samp>\u2019 and \u2018<samp>:height</samp>\u2019 attributes.\n</p>\n<p>For custom commands for captions, use the \u2018<samp>:caption</samp>\u2019 attribute.  It\noverrides the default \u2018<samp>#+CAPTION</samp>\u2019 value:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :caption \\bicaption{HeadingA}{HeadingB}\n[[./img/sed-hr4049.pdf]]\n</pre></div>\n\n<p>When captions follow the method as described in <a href=\"https://orgmode.org/org.html#Captions\">Captions</a>, the LaTeX\nexport back-end wraps the picture in a floating \u2018<samp>figure</samp>\u2019 environment.\nTo float an image without specifying a caption, set the \u2018<samp>:float</samp>\u2019\nattribute to one of the following:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>t</samp>\u2019</dt>\n<dd><p>For a standard \u2018<samp>figure</samp>\u2019 environment; used by default whenever an\nimage has a caption.\n</p>\n</dd>\n<dt>\u2018<samp>multicolumn</samp>\u2019</dt>\n<dd><p>To span the image across multiple columns of a page; the back-end\nwraps the image in a \u2018<samp>figure*</samp>\u2019 environment.\n</p>\n</dd>\n<dt>\u2018<samp>wrap</samp>\u2019</dt>\n<dd><p>For text to flow around the image on the right; the figure occupies\nthe left half of the page.\n</p>\n</dd>\n<dt>\u2018<samp>sideways</samp>\u2019</dt>\n<dd><p>For a new page with the image sideways, rotated ninety degrees, in\na \u2018<samp>sidewaysfigure</samp>\u2019 environment; overrides \u2018<samp>:placement</samp>\u2019 setting.\n</p>\n</dd>\n<dt>\u2018<samp>nil</samp>\u2019</dt>\n<dd><p>To avoid a \u2018<samp>:float</samp>\u2019 even if using a caption.\n</p></dd>\n</dl>\n\n<p>Use the \u2018<samp>placement</samp>\u2019 attribute to modify a floating environment\u2019s\nplacement.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :float wrap :width 0.38\\textwidth :placement {r}{0.4\\textwidth}\n[[./img/hst.png]]\n</pre></div>\n\n<span id=\"index-org_002dlatex_002dimages_002dcentered\"></span>\n<span id=\"index-center-image-in-LaTeX-export\"></span>\n<span id=\"index-image_002c-centering-in-LaTeX-export\"></span>\n<p>The LaTeX export back-end centers all images by default.  Setting\n\u2018<samp>:center</samp>\u2019 to \u2018<samp>nil</samp>\u2019 disables centering.  To disable centering globally,\nset <code>org-latex-images-centered</code> to \u2018<samp>nil</samp>\u2019.\n</p>\n<p>Set the \u2018<samp>:comment-include</samp>\u2019 attribute to non-<code>nil</code> value for the LaTeX\nexport back-end to comment out the \u2018<samp>\\includegraphics</samp>\u2019 macro.\n</p>\n"}, {"id": "13107PlainlistsinLaTeXexport", "content": "\n<span id=\"Plain-lists-in-LaTeX-export\"></span>\n<span id=\"Plain-lists-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.7 Plain lists in LaTeX export</h4>\n\n<span id=\"index-plain-lists_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-1\"></span>\n<p>The LaTeX export back-end accepts the \u2018<samp>environment</samp>\u2019 and \u2018<samp>options</samp>\u2019\nattributes for plain lists.  Both attributes work together for\ncustomizing lists, as shown in the examples:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX_HEADER: \\usepackage[inline]{enumitem}\nSome ways to say \"Hello\":\n#+ATTR_LATEX: :environment itemize*\n#+ATTR_LATEX: :options [label={}, itemjoin={,}, itemjoin*={, and}]\n- Hola\n- Bonjour\n- Guten Tag.\n</pre></div>\n\n<p>Since LaTeX supports only four levels of nesting for lists, use an\nexternal package, such as \u2018<samp>enumitem</samp>\u2019 in LaTeX, for levels deeper than\nfour:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX_HEADER: \\usepackage{enumitem}\n#+LATEX_HEADER: \\renewlist{itemize}{itemize}{9}\n#+LATEX_HEADER: \\setlist[itemize]{label=$\\circ$}\n- One\n  - Two\n    - Three\n      - Four\n        - Five\n</pre></div>\n\n"}, {"id": "13108SourceblocksinLaTeXexport", "content": "\n<span id=\"Source-blocks-in-LaTeX-export\"></span>\n<span id=\"Source-blocks-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.8 Source blocks in LaTeX export</h4>\n\n<span id=\"index-source-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-2\"></span>\n\n<p>The LaTeX export back-end can make source code blocks into floating\nobjects through the attributes \u2018<samp>:float</samp>\u2019 and \u2018<samp>:options</samp>\u2019.  For \u2018<samp>:float</samp>\u2019:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>t</samp>\u2019</dt>\n<dd><p>Makes a source block float; by default floats any source block with\na caption.\n</p>\n</dd>\n<dt>\u2018<samp>multicolumn</samp>\u2019</dt>\n<dd><p>Spans the source block across multiple columns of a page.\n</p>\n</dd>\n<dt>\u2018<samp>nil</samp>\u2019</dt>\n<dd><p>Avoids a \u2018<samp>:float</samp>\u2019 even if using a caption; useful for source code\nblocks that may not fit on a page.\n</p></dd>\n</dl>\n\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :float nil\n#+BEGIN_SRC emacs-lisp\n  Lisp code that may not fit in a single page.\n#+END_SRC\n</pre></div>\n\n<span id=\"index-org_002dlatex_002dlistings_002doptions\"></span>\n<span id=\"index-org_002dlatex_002dminted_002doptions\"></span>\n<p>The LaTeX export back-end passes string values in \u2018<samp>:options</samp>\u2019 to LaTeX\npackages for customization of that specific source block.  In the\nexample below, the \u2018<samp>:options</samp>\u2019 are set for Minted.  Minted is a source\ncode highlighting LaTeX package with many configurable options<a id=\"DOCF135\" href=\"https://orgmode.org/org.html#FOOT135\"><sup>135</sup></a>.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :options commentstyle=\\bfseries\n#+BEGIN_SRC emacs-lisp\n  (defun Fib (n)\n    (if (&lt; n 2) n (+ (Fib (- n 1)) (Fib (- n 2)))))\n#+END_SRC\n</pre></div>\n\n<p>To apply similar configuration options for all source blocks in\na file, use the <code>org-latex-listings-options</code> and\n<code>org-latex-minted-options</code> variables.\n</p>\n"}, {"id": "13109ExampleblocksinLaTeXexport", "content": "\n<span id=\"Example-blocks-in-LaTeX-export\"></span>\n<span id=\"Example-blocks-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.9 Example blocks in LaTeX export</h4>\n\n<span id=\"index-example-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-verbatim-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-3\"></span>\n\n<p>The LaTeX export back-end wraps the contents of example blocks in\na \u2018<samp>verbatim</samp>\u2019 environment.  To change this behavior to use another\nenvironment globally, specify an appropriate export filter (see\n<a href=\"https://orgmode.org/org.html#Advanced-Export-Configuration\">Advanced Export Configuration</a>).  To change this behavior to use\nanother environment for each block, use the \u2018<samp>:environment</samp>\u2019 parameter\nto specify a custom environment.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :environment myverbatim\n#+BEGIN_EXAMPLE\n  This sentence is false.\n#+END_EXAMPLE\n</pre></div>\n\n"}, {"id": "131010SpecialblocksinLaTeXexport", "content": "\n<span id=\"Special-blocks-in-LaTeX-export\"></span>\n<span id=\"Special-blocks-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.10 Special blocks in LaTeX export</h4>\n\n<span id=\"index-special-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-abstract_002c-in-LaTeX-export\"></span>\n<span id=\"index-proof_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-4\"></span>\n\n<p>For other special blocks in the Org file, the LaTeX export back-end\nmakes a special environment of the same name.  The back-end also takes\n\u2018<samp>:options</samp>\u2019, if any, and appends as-is to that environment\u2019s opening\nstring.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_abstract\n  We demonstrate how to solve the Syracuse problem.\n#+END_abstract\n\n#+ATTR_LATEX: :options [Proof of important theorem]\n#+BEGIN_proof\n  ...\n  Therefore, any even number greater than 2 is the sum of two primes.\n#+END_proof\n</pre></div>\n\n<p>exports to\n</p>\n<div class=\"example\">\n<pre class=\"example\">\\begin{abstract}\n  We demonstrate how to solve the Syracuse problem.\n\\end{abstract}\n\n\\begin{proof}[Proof of important theorem]\n  ...\n  Therefore, any even number greater than 2 is the sum of two primes.\n\\end{proof}\n</pre></div>\n\n<p>If you need to insert a specific caption command, use \u2018<samp>:caption</samp>\u2019\nattribute.  It overrides standard \u2018<samp>CAPTION</samp>\u2019 value, if any.  For\nexample:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :caption \\MyCaption{HeadingA}\n#+BEGIN_proof\n  ...\n#+END_proof\n</pre></div>\n\n"}, {"id": "131011HorizontalrulesinLaTeXexport", "content": "\n<span id=\"Horizontal-rules-in-LaTeX-export\"></span>\n<span id=\"Horizontal-rules-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.11 Horizontal rules in LaTeX export</h4>\n\n<span id=\"index-horizontal-rules_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-5\"></span>\n\n<p>The LaTeX export back-end converts horizontal rules by the specified\n\u2018<samp>:width</samp>\u2019 and \u2018<samp>:thickness</samp>\u2019 attributes.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :width .6\\textwidth :thickness 0.8pt\n-----\n</pre></div>\n\n"}, {"id": "131012VerseblocksinLaTeXexport", "content": "\n<span id=\"Verse-blocks-in-LaTeX-export\"></span>\n<span id=\"Verse-blocks-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.12 Verse blocks in LaTeX export</h4>\n\n<span id=\"index-verse-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-6\"></span>\n\n<p>The LaTeX export back-end accepts four attributes for verse blocks:\n\u2018<samp>:lines</samp>\u2019, \u2018<samp>:center</samp>\u2019, \u2018<samp>:versewidth</samp>\u2019 and \u2018<samp>:latexcode</samp>\u2019.  The three first\nrequire the external LaTeX package \u2018<samp>verse.sty</samp>\u2019, which is an extension\nof the standard LaTeX environment.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:lines</samp>\u2019</dt>\n<dd><p>To add marginal verse numbering.  Its value is an\ninteger, the sequence in which the verses should be numbered.\n</p></dd>\n<dt>\u2018<samp>:center</samp>\u2019</dt>\n<dd><p>With value \u2018<samp>t</samp>\u2019 all the verses on the page are optically\ncentered (a typographic convention for poetry), taking as a\nreference the longest verse, which must be indicated by the\nattribute \u2018<samp>:versewidth</samp>\u2019.\n</p></dd>\n<dt>\u2018<samp>:versewidth</samp>\u2019</dt>\n<dd><p>Its value is a literal text string with the longest\nverse.\n</p></dd>\n<dt>\u2018<samp>:latexcode</samp>\u2019</dt>\n<dd><p>It accepts any arbitrary LaTeX code that can be\nincluded within a LaTeX \u2018<samp>verse</samp>\u2019 environment.\n</p></dd>\n</dl>\n\n<p>A complete example with Shakespeare\u2019s first sonnet:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :center t :latexcode \\color{red} :lines 5\n#+ATTR_LATEX: :versewidth Feed\u2019st thy light\u2019s flame with self-substantial fuel,\n#+BEGIN_VERSE\nFrom fairest creatures we desire increase,\nThat thereby beauty\u2019s rose might never die,\nBut as the riper should by time decease\nHis tender heir might bear his memory\nBut thou, contracted to thine own bright eyes,\nFeed\u2019st thy light\u2019s flame with self-substantial fuel,\nMaking a famine where abundance lies,\nThyself thy foe, to thy sweet self too cruel.\nThou that art now the world\u2019s fresh ornament,\nAnd only herald to the gaudy spring,\nWithin thine own bud buriest thy content,\nAnd, tender churl, mak\u2019st waste in niggardly.\nPity the world, or else this glutton be,\nTo eat the world\u2019s due, by the grave and thee.\n#+END_VERSE\n</pre></div>\n\n"}, {"id": "131013QuoteblocksinLaTeXexport", "content": "\n<span id=\"Quote-blocks-in-LaTeX-export\"></span>\n<span id=\"Quote-blocks-in-LaTeX-export-1\"></span><h4 class=\"subsection\">13.10.13 Quote blocks in LaTeX export</h4>\n\n<span id=\"index-quote-blocks_002c-in-LaTeX-export\"></span>\n<span id=\"index-ATTR_005fLATEX_002c-keyword-7\"></span>\n<span id=\"index-org_002dlatex_002ddefault_002dquote_002denvironment\"></span>\n\n<p>The LaTeX export back-end accepts two attributes for quote blocks:\n\u2018<samp>:environment</samp>\u2019, for an arbitrary quoting environment (the default\nvalue is that of <code>org-latex-default-quote-environment</code>: <code>\"quote\"</code>) and\n\u2018<samp>:options</samp>\u2019.  For example, to choose the environment \u2018<samp>quotation</samp>\u2019,\nincluded as an alternative to \u2018<samp>quote</samp>\u2019 in standard LaTeX classes:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_LATEX: :environment quotation\n#+BEGIN_QUOTE\nsome text...\n#+END_QUOTE\n</pre></div>\n\n<p>To choose the \u2018<samp>foreigndisplayquote</samp>\u2019 environment, included in the LaTeX\npackage \u2018<samp>csquotes</samp>\u2019, with the \u2018<samp>german</samp>\u2019 option, use this syntax:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+LATEX_HEADER:\\usepackage[autostyle=true]{csquotes}\n#+ATTR_LATEX: :environment foreigndisplayquote :options {german}\n#+BEGIN_QUOTE\nsome text in German...\n#+END_QUOTE\n</pre></div>\n\n<p>which is exported to LaTeX as\n</p>\n<div class=\"example\">\n<pre class=\"example\">\\begin{foreigndisplayquote}{german}\nsome text in German...\n\\end{foreigndisplayquote}\n</pre></div>\n\n"}, {"id": "1311MarkdownExport", "content": "\n<span id=\"Markdown-Export\"></span>\n<span id=\"Markdown-Export-1\"></span><h3 class=\"section\">13.11 Markdown Export</h3>\n\n<span id=\"index-Markdown-export\"></span>\n\n<p>The Markdown export back-end, \u201cmd\u201d, converts an Org file to Markdown\nformat, as defined at <a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a>.\n</p>\n<p>Since it is built on top of the HTML back-end (see <a href=\"https://orgmode.org/org.html#HTML-Export\">HTML Export</a>), it\nconverts every Org construct not defined in Markdown syntax, such as\ntables, to HTML.\n</p>\n<span id=\"Markdown-export-commands\"></span><span id=\"Markdown-export-commands-1\"></span><h4 class=\"subheading\">Markdown export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e m m</kbd> (<code>org-md-export-to-markdown</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-m-m\"></span>\n<span id=\"index-org_002dmd_002dexport_002dto_002dmarkdown\"></span>\n<p>Export to a text file with Markdown syntax.  For \u2018<samp>myfile.org</samp>\u2019, Org\nexports to \u2018<samp>myfile.md</samp>\u2019, overwritten without warning.\n</p>\n</dd>\n<dt><kbd>C-c C-e m M</kbd> (<code>org-md-export-as-markdown</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dc-m-M\"></span>\n<span id=\"index-org_002dmd_002dexport_002das_002dmarkdown\"></span>\n<p>Export to a temporary buffer.  Does not create a file.\n</p>\n</dd>\n<dt><kbd>C-c C-e m o</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-m-o\"></span>\n<p>Export as a text file with Markdown syntax, then open it.\n</p></dd>\n</dl>\n\n<span id=\"Header-and-sectioning-structure-_00281_0029\"></span><span id=\"Header-and-sectioning-structure-2\"></span><h4 class=\"subheading\">Header and sectioning structure</h4>\n\n<span id=\"index-org_002dmd_002dheadline_002dstyle\"></span>\n<p>Based on <code>org-md-headline-style</code>, Markdown export can generate\nheadlines of both <em>atx</em> and <em>setext</em> types.  <em>atx</em> limits headline\nlevels to two whereas <em>setext</em> limits headline levels to six.  Beyond\nthese limits, the export back-end converts headlines to lists.  To set\na limit to a level before the absolute limit (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n"}, {"id": "1312OpenDocumentTextExport", "content": "\n<span id=\"OpenDocument-Text-Export\"></span>\n<span id=\"OpenDocument-Text-Export-1\"></span><h3 class=\"section\">13.12 OpenDocument Text Export</h3>\n\n<span id=\"index-ODT\"></span>\n<span id=\"index-OpenDocument\"></span>\n<span id=\"index-export_002c-OpenDocument\"></span>\n<span id=\"index-LibreOffice\"></span>\n\n<p>The ODT export back-end handles creating of OpenDocument Text (ODT)\nformat.  Documents created by this exporter use the\n<cite>OpenDocument-v1.2 specification</cite><a id=\"DOCF136\" href=\"https://orgmode.org/org.html#FOOT136\"><sup>136</sup></a> and are compatible\nwith LibreOffice 3.4.\n</p>\n\n\n"}, {"id": "13121PrerequisitesforODTexport", "content": "\n<span id=\"Pre_002drequisites-for-ODT-export\"></span>\n<span id=\"Pre_002drequisites-for-ODT-export-1\"></span><h4 class=\"subsection\">13.12.1 Pre-requisites for ODT export</h4>\n\n<span id=\"index-zip\"></span>\n\n<p>The ODT export back-end relies on the zip program to create the final\ncompressed ODT output.  Check if \u2018<samp>zip</samp>\u2019 is locally available and\nexecutable.  Without it, export cannot finish.\n</p>\n"}, {"id": "13122ODTexportcommands", "content": "\n<span id=\"ODT-export-commands\"></span>\n<span id=\"ODT-export-commands-1\"></span><h4 class=\"subsection\">13.12.2 ODT export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e o o</kbd> (<code>org-export-to-odt</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-o-o\"></span>\n<span id=\"index-org_002dexport_002dto_002dodt\"></span>\n<p>Export as OpenDocument Text file.\n</p>\n<span id=\"index-EXPORT_005fFILE_005fNAME_002c-property\"></span>\n<span id=\"index-org_002dodt_002dpreferred_002doutput_002dformat\"></span>\n\n<p>If <code>org-odt-preferred-output-format</code> is specified, the ODT export\nback-end automatically converts the exported file to that format.\n</p>\n<p>For \u2018<samp>myfile.org</samp>\u2019, Org exports to \u2018<samp>myfile.odt</samp>\u2019, overwriting without\nwarning.  The ODT export back-end exports a region only if a region\nwas active.\n</p>\n<p>If the selected region is a single tree, the ODT export back-end\nmakes the tree head the document title.  Incidentally, <kbd>C-c @</kbd> selects the current sub-tree.  If the tree head entry has, or\ninherits, an \u2018<samp>EXPORT_FILE_NAME</samp>\u2019 property, the ODT export back-end\nuses that for file name.\n</p>\n</dd>\n<dt><kbd>C-c C-e o O</kbd></dt>\n<dd><span id=\"index-C_002dc-C_002de-o-O\"></span>\n<p>Export as an OpenDocument Text file and open the resulting file.\n</p>\n<span id=\"index-org_002dexport_002dodt_002dpreferred_002doutput_002dformat\"></span>\n<p>If <code>org-export-odt-preferred-output-format</code> is specified, open the\nconverted file instead.  See <a href=\"https://orgmode.org/org.html#Automatically-exporting-to-other-formats\">Automatically exporting to other formats</a>.\n</p></dd>\n</dl>\n\n"}, {"id": "13123ODTspecificexportsettings", "content": "\n<span id=\"ODT-specific-export-settings\"></span>\n<span id=\"ODT-specific-export-settings-1\"></span><h4 class=\"subsection\">13.12.3 ODT specific export settings</h4>\n\n<p>The ODT export back-end has several additional keywords for\ncustomizing ODT output.  Setting these keywords works similar to the\ngeneral options (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>DESCRIPTION</samp>\u2019</dt>\n<dd><span id=\"index-DESCRIPTION_002c-keyword-3\"></span>\n<p>This is the document\u2019s description, which the ODT export back-end\ninserts as document metadata.  For long descriptions, use multiple\nlines, prefixed with \u2018<samp>DESCRIPTION</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>KEYWORDS</samp>\u2019</dt>\n<dd><span id=\"index-KEYWORDS_002c-keyword-3\"></span>\n<p>The keywords for the document.  The ODT export back-end inserts the\ndescription along with author name, keywords, and related file\nmetadata as metadata in the output file.  Use multiple \u2018<samp>KEYWORDS</samp>\u2019 if\nnecessary.\n</p>\n</dd>\n<dt>\u2018<samp>ODT_STYLES_FILE</samp>\u2019</dt>\n<dd><span id=\"index-ODT_005fSTYLES_005fFILE_002c-keyword\"></span>\n<span id=\"index-org_002dodt_002dstyles_002dfile\"></span>\n<p>The ODT export back-end uses the <code>org-odt-styles-file</code> by default.\nSee <a href=\"https://orgmode.org/org.html#Applying-custom-styles\">Applying custom styles</a> for details.\n</p>\n</dd>\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword-4\"></span>\n<p>The document subtitle.\n</p></dd>\n</dl>\n\n"}, {"id": "13124ExtendingODTexport", "content": "\n<span id=\"Extending-ODT-export\"></span>\n<span id=\"Extending-ODT-export-1\"></span><h4 class=\"subsection\">13.12.4 Extending ODT export</h4>\n\n<p>The ODT export back-end can produce documents in other formats besides\nODT using a specialized ODT converter process.  Its common interface\nworks with popular converters to produce formats such as \u2018<samp>doc</samp>\u2019, or\nconvert a document from one format, say \u2018<samp>csv</samp>\u2019, to another format, say\n\u2018<samp>xls</samp>\u2019.\n</p>\n<span id=\"index-unoconv\"></span>\n<span id=\"index-org_002dodt_002dconvert_002dprocess\"></span>\n<p>Customize <code>org-odt-convert-process</code> variable to point to \u2018<samp>unoconv</samp>\u2019,\nwhich is the ODT\u2019s preferred converter.  Working installations of\nLibreOffice would already have \u2018<samp>unoconv</samp>\u2019 installed.  Alternatively,\nother converters may be substituted here.  See <a href=\"https://orgmode.org/org.html#Configuring-a-document-converter\">Configuring a document converter</a>.\n</p>\n<span id=\"Automatically-exporting-to-other-formats\"></span><span id=\"Automatically-exporting-to-other-formats-1\"></span><h4 class=\"subsubheading\">Automatically exporting to other formats</h4>\n\n<span id=\"index-org_002dodt_002dpreferred_002doutput_002dformat-1\"></span>\n<p>If ODT format is just an intermediate step to get to other formats,\nsuch as \u2018<samp>doc</samp>\u2019, \u2018<samp>docx</samp>\u2019, \u2018<samp>rtf</samp>\u2019, or \u2018<samp>pdf</samp>\u2019, etc., then extend the ODT\nexport back-end to directly produce that format.  Specify the final\nformat in the <code>org-odt-preferred-output-format</code> variable.  This is one\nway to extend (see <a href=\"https://orgmode.org/org.html#ODT-export-commands\">ODT export commands</a>).\n</p>\n<span id=\"Converting-between-document-formats\"></span><span id=\"Converting-between-document-formats-1\"></span><h4 class=\"subsubheading\">Converting between document formats</h4>\n\n<p>The Org export back-end is made to be inter-operable with a wide range\nof text document format converters.  Newer generation converters, such\nas LibreOffice and Pandoc, can handle hundreds of formats at once.\nOrg provides a consistent interaction with whatever converter is\ninstalled.  Here are some generic commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-odt-convert</kbd></dt>\n<dd><span id=\"index-org_002dodt_002dconvert\"></span>\n<p>Convert an existing document from one format to another.  With\na prefix argument, opens the newly produced file.\n</p></dd>\n</dl>\n\n"}, {"id": "13125Applyingcustomstyles", "content": "\n<span id=\"Applying-custom-styles\"></span>\n<span id=\"Applying-custom-styles-1\"></span><h4 class=\"subsection\">13.12.5 Applying custom styles</h4>\n\n<span id=\"index-styles_002c-custom\"></span>\n<span id=\"index-template_002c-custom\"></span>\n\n<p>The ODT export back-end comes with many OpenDocument styles (see\n<a href=\"https://orgmode.org/org.html#Working-with-OpenDocument-style-files\">Working with OpenDocument style files</a>).  To expand or further\ncustomize these built-in style sheets, either edit the style sheets\ndirectly or generate them using an application such as LibreOffice.\nThe example here shows creating a style using LibreOffice.\n</p>\n<span id=\"Applying-custom-styles-the-easy-way\"></span><span id=\"Applying-custom-styles_003a-the-easy-way\"></span><h4 class=\"subsubheading\">Applying custom styles: the easy way</h4>\n\n<ol>\n<li> Create a sample \u2018<samp>example.org</samp>\u2019 file with settings as shown below,\nand export it to ODT format.\n\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: H:10 num:t\n</pre></div>\n\n</li><li> Open the above \u2018<samp>example.odt</samp>\u2019 using LibreOffice.  Use the <em>Stylist</em>\nto locate the target styles, which typically have the \u201cOrg\u201d prefix.\nOpen one, modify, and save as either OpenDocument Text (ODT) or\nOpenDocument Template (OTT) file.\n\n</li><li> <span id=\"index-org_002dodt_002dstyles_002dfile-1\"></span>\nCustomize the variable <code>org-odt-styles-file</code> and point it to the\nnewly created file.  For additional configuration options, see\n<a href=\"https://orgmode.org/org.html#x_002doverriding_002dfactory_002dstyles\">Overriding factory styles</a>.\n\n<span id=\"index-ODT_005fSTYLES_005fFILE_002c-keyword-1\"></span>\n<p>To apply an ODT style to a particular file, use the\n\u2018<samp>ODT_STYLES_FILE</samp>\u2019 keyword as shown in the example below:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ODT_STYLES_FILE: \"/path/to/example.ott\"\n</pre></div>\n\n\n<p>or\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ODT_STYLES_FILE: (\"/path/to/file.ott\" (\"styles.xml\" \"image/hdr.png\"))\n</pre></div>\n</li></ol>\n\n<span id=\"Using-third_002dparty-styles-and-templates\"></span><span id=\"Using-third_002dparty-styles-and-templates-1\"></span><h4 class=\"subsubheading\">Using third-party styles and templates</h4>\n\n<p>The ODT export back-end relies on many templates and style names.\nUsing third-party styles and templates can lead to mismatches.\nTemplates derived from built in ODT templates and styles seem to have\nfewer problems.\n</p>\n"}, {"id": "13126LinksinODTexport", "content": "\n<span id=\"Links-in-ODT-export\"></span>\n<span id=\"Links-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.6 Links in ODT export</h4>\n\n<span id=\"index-links_002c-in-ODT-export\"></span>\n\n<p>ODT exporter creates native cross-references for internal links.  It\ncreates Internet-style links for all other links.\n</p>\n<p>A link with no description and pointing to a regular, un-itemized,\noutline heading is replaced with a cross-reference and section number\nof the heading.\n</p>\n<p>A \u2018<samp>\\ref{label}</samp>\u2019-style reference to an image, table etc., is replaced\nwith a cross-reference and sequence number of the labeled entity.  See\n<a href=\"https://orgmode.org/org.html#Labels-and-captions-in-ODT-export\">Labels and captions in ODT export</a>.\n</p>\n"}, {"id": "13127TablesinODTexport", "content": "\n<span id=\"Tables-in-ODT-export\"></span>\n<span id=\"Tables-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.7 Tables in ODT export</h4>\n\n<span id=\"index-tables_002c-in-ODT-export\"></span>\n\n<p>The ODT export back-end handles native Org mode tables (see <a href=\"https://orgmode.org/org.html#Tables\">Tables</a>)\nand simple \u2018<samp>table.el</samp>\u2019 tables.  Complex \u2018<samp>table.el</samp>\u2019 tables having column\nor row spans are not supported.  Such tables are stripped from the\nexported document.\n</p>\n<p>By default, the ODT export back-end exports a table with top and\nbottom frames and with ruled lines separating row and column groups\n(see <a href=\"https://orgmode.org/org.html#Column-Groups\">Column Groups</a>).  All tables are typeset to occupy the same\nwidth.  The ODT export back-end honors any table alignments and\nrelative widths for columns (see <a href=\"https://orgmode.org/org.html#Column-Width-and-Alignment\">Column Width and Alignment</a>).\n</p>\n<p>Note that the ODT export back-end interprets column widths as weighted\nratios, the default weight being 1.\n</p>\n<span id=\"index-ATTR_005fODT_002c-keyword\"></span>\n<p>Specifying \u2018<samp>:rel-width</samp>\u2019 property on an \u2018<samp>ATTR_ODT</samp>\u2019 line controls the\nwidth of the table.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :rel-width 50\n| Area/Month    |   Jan |   Feb |   Mar |   Sum |\n|---------------+-------+-------+-------+-------|\n| /             |     &lt; |       |       |     &lt; |\n| &lt;l13&gt;         |  &lt;r5&gt; |  &lt;r5&gt; |  &lt;r5&gt; |  &lt;r6&gt; |\n| North America |     1 |    21 |   926 |   948 |\n| Middle East   |     6 |    75 |   844 |   925 |\n| Asia Pacific  |     9 |    27 |   790 |   826 |\n|---------------+-------+-------+-------+-------|\n| Sum           |    16 |   123 |  2560 |  2699 |\n</pre></div>\n\n<p>On export, the above table takes 50% of text width area.  The exporter\nsizes the columns in the ratio: 13:5:5:5:6.  The first column is\nleft-aligned and rest of the columns, right-aligned.  Vertical rules\nseparate the header and the last column.  Horizontal rules separate\nthe header and the last row.\n</p>\n<p>For even more customization, create custom table styles and associate\nthem with a table using the \u2018<samp>ATTR_ODT</samp>\u2019 keyword.  See <a href=\"https://orgmode.org/org.html#Customizing-tables-in-ODT-export\">Customizing tables in ODT export</a>.\n</p>\n"}, {"id": "13128ImagesinODTexport", "content": "\n<span id=\"Images-in-ODT-export\"></span>\n<span id=\"Images-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.8 Images in ODT export</h4>\n\n<span id=\"index-images_002c-embedding-in-ODT\"></span>\n<span id=\"index-embedding-images-in-ODT\"></span>\n\n<span id=\"Embedding-images\"></span><span id=\"Embedding-images-1\"></span><h4 class=\"subsubheading\">Embedding images</h4>\n\n<p>The ODT export back-end processes image links in Org files that do not\nhave descriptions, such as these links \u2018<samp>[[file:img.jpg]]</samp>\u2019 or \u2018<samp>[[./img.jpg]]</samp>\u2019,\nas direct image insertions in the final output.  Either of these\nexamples works:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[file:img.png]]\n</pre></div>\n\n\n<div class=\"example\">\n<pre class=\"example\">[[./img.png]]\n</pre></div>\n\n<span id=\"Embedding-clickable-images\"></span><span id=\"Embedding-clickable-images-1\"></span><h4 class=\"subsubheading\">Embedding clickable images</h4>\n\n<p>For clickable images, provide a link whose description is another link\nto an image file.  For example, to embed an image\n\u2018<samp>org-mode-unicorn.png</samp>\u2019 which when clicked jumps to <a href=\"https://orgmode.org/\">https://orgmode.org</a>\nwebsite, do the following\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[https://orgmode.org][./org-mode-unicorn.png]]\n</pre></div>\n\n<span id=\"Sizing-and-scaling-of-embedded-images\"></span><span id=\"Sizing-and-scaling-of-embedded-images-1\"></span><h4 class=\"subsubheading\">Sizing and scaling of embedded images</h4>\n\n<span id=\"index-ATTR_005fODT_002c-keyword-1\"></span>\n\n<p>Control the size and scale of the embedded images with the \u2018<samp>ATTR_ODT</samp>\u2019\nattribute.\n</p>\n<span id=\"index-identify_002c-ImageMagick\"></span>\n<span id=\"index-org_002dodt_002dpixels_002dper_002dinch\"></span>\n<p>The ODT export back-end starts with establishing the size of the image\nin the final document.  The dimensions of this size are measured in\ncentimeters.  The back-end then queries the image file for its\ndimensions measured in pixels.  For this measurement, the back-end\nrelies on ImageMagick\u2019s identify program or Emacs <code>create-image</code> and\n<code>image-size</code> API.  ImageMagick is the preferred choice for large file\nsizes or frequent batch operations.  The back-end then converts the\npixel dimensions using <code>org-odt-pixels-per-inch</code> into the familiar 72\ndpi or 96 dpi.  The default value for this is in\n<code>display-pixels-per-inch</code>, which can be tweaked for better results\nbased on the capabilities of the output device.  Here are some common\nimage scaling operations:\n</p>\n<dl compact=\"compact\">\n<dt>Explicitly size the image</dt>\n<dd><p>To embed \u2018<samp>img.png</samp>\u2019 as a 10 cm x 10 cm image, do the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :width 10 :height 10\n[[./img.png]]\n</pre></div>\n\n</dd>\n<dt>Scale the image</dt>\n<dd><p>To embed \u2018<samp>img.png</samp>\u2019 at half its size, do the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :scale 0.5\n[[./img.png]]\n</pre></div>\n\n</dd>\n<dt>Scale the image to a specific width</dt>\n<dd><p>To embed \u2018<samp>img.png</samp>\u2019 with a width of 10 cm while retaining the\noriginal height:width ratio, do the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :width 10\n[[./img.png]]\n</pre></div>\n\n</dd>\n<dt>Scale the image to a specific height</dt>\n<dd><p>To embed \u2018<samp>img.png</samp>\u2019 with a height of 10 cm while retaining the\noriginal height:width ratio, do the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :height 10\n[[./img.png]]\n</pre></div>\n</dd>\n</dl>\n\n<span id=\"Anchoring-of-images\"></span><span id=\"Anchoring-of-images-1\"></span><h4 class=\"subsubheading\">Anchoring of images</h4>\n\n<span id=\"index-ATTR_005fODT_002c-keyword-2\"></span>\n<p>The ODT export back-end can anchor images to \u2018<samp>as-char</samp>\u2019, \u2018<samp>paragraph</samp>\u2019,\nor \u2018<samp>page</samp>\u2019.  Set the preferred anchor using the \u2018<samp>:anchor</samp>\u2019 property of\nthe \u2018<samp>ATTR_ODT</samp>\u2019 line.\n</p>\n<p>To create an image that is anchored to a page:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :anchor page\n[[./img.png]]\n</pre></div>\n\n"}, {"id": "13129MathformattinginODTexport", "content": "\n<span id=\"Math-formatting-in-ODT-export\"></span>\n<span id=\"Math-formatting-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.9 Math formatting in ODT export</h4>\n\n<p>The ODT exporter has special support for handling math.\n</p>\n\n\n"}, {"id": "131291LaTeXmathsnippets", "content": "\n<span id=\"LaTeX-math-snippets\"></span>\n<span id=\"LaTeX-math-snippets-1\"></span><h4 class=\"subsubsection\">13.12.9.1 LaTeX math snippets</h4>\n\n<p>LaTeX math snippets (see <a href=\"https://orgmode.org/org.html#LaTeX-fragments\">LaTeX fragments</a>) can be embedded in the ODT\ndocument in one of the following ways:\n</p>\n<dl compact=\"compact\">\n<dt>MathML</dt>\n<dd><span id=\"index-MathML\"></span>\n<p>Add this line to the Org file.  This option is activated on\na per-file basis.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:t\n</pre></div>\n\n\n<p>With this option, LaTeX fragments are first converted into MathML\nfragments using an external LaTeX-to-MathML converter program.  The\nresulting MathML fragments are then embedded as an OpenDocument\nFormula in the exported document.\n</p>\n<span id=\"index-org_002dlatex_002dto_002dmathml_002dconvert_002dcommand\"></span>\n<span id=\"index-org_002dlatex_002dto_002dmathml_002djar_002dfile\"></span>\n<p>You can specify the LaTeX-to-MathML converter by customizing the\nvariables <code>org-latex-to-mathml-convert-command</code> and\n<code>org-latex-to-mathml-jar-file</code>.\n</p>\n<p>If you prefer to use MathToWeb<a id=\"DOCF137\" href=\"https://orgmode.org/org.html#FOOT137\"><sup>137</sup></a> as your converter, you can\nconfigure the above variables as shown below.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-latex-to-mathml-convert-command\n      \"java -jar %j -unicode -force -df %o %I\"\n      org-latex-to-mathml-jar-file\n      \"/path/to/mathtoweb.jar\")\n</pre></div>\n\n<p>or, to use LaTeX\u200bML<a id=\"DOCF138\" href=\"https://orgmode.org/org.html#FOOT138\"><sup>138</sup></a> instead,\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-latex-to-mathml-convert-command\n      \"latexmlmath \\\"%i\\\" --presentationmathml=%o\")\n</pre></div>\n\n<p>To quickly verify the reliability of the LaTeX-to-MathML\nconverter, use the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-x org-export-as-odf</kbd></dt>\n<dd><p>Convert a LaTeX math snippet to an OpenDocument formula (\u2018<samp>.odf</samp>\u2019)\nfile.\n</p>\n</dd>\n<dt><kbd>M-x org-export-as-odf-and-open</kbd></dt>\n<dd><p>Convert a LaTeX math snippet to an OpenDocument formula (\u2018<samp>.odf</samp>\u2019)\nfile and open the formula file with the system-registered\napplication.\n</p></dd>\n</dl>\n\n</dd>\n<dt>PNG images</dt>\n<dd><span id=\"index-dvipng-1\"></span>\n<span id=\"index-dvisvgm-1\"></span>\n<span id=\"index-ImageMagick-1\"></span>\n<p>Add this line to the Org file.  This option is activated on\na per-file basis.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:dvipng\n</pre></div>\n\n\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:dvisvgm\n</pre></div>\n\n\n<p>or\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+OPTIONS: tex:imagemagick\n</pre></div>\n\n\n<p>Under this option, LaTeX fragments are processed into PNG or SVG\nimages and the resulting images are embedded in the exported\ndocument.  This method requires dvipng program, dvisvgm or\nImageMagick programs.\n</p></dd>\n</dl>\n\n"}, {"id": "131292MathMLandOpenDocumentformulafiles", "content": "\n<span id=\"MathML-and-OpenDocument-formula-files\"></span>\n<span id=\"MathML-and-OpenDocument-formula-files-1\"></span><h4 class=\"subsubsection\">13.12.9.2 MathML and OpenDocument formula files</h4>\n\n<p>When embedding LaTeX math snippets in ODT documents is not reliable,\nthere is one more option to try.  Embed an equation by linking to its\nMathML (\u2018<samp>.mml</samp>\u2019) source or its OpenDocument formula (\u2018<samp>.odf</samp>\u2019) file as\nshown below:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[./equation.mml]]\n</pre></div>\n\n\n<p>or\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[./equation.odf]]\n</pre></div>\n\n"}, {"id": "131210LabelsandcaptionsinODTexport", "content": "\n<span id=\"Labels-and-captions-in-ODT-export\"></span>\n<span id=\"Labels-and-captions-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.10 Labels and captions in ODT export</h4>\n\n<p>ODT format handles labeling and captioning of objects based on their\ntypes.  Inline images, tables, LaTeX fragments, and Math formulas are\nnumbered and captioned separately.  Each object also gets a unique\nsequence number based on its order of first appearance in the Org\nfile.  Each category has its own sequence.  A caption is just a label\napplied to these objects.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CAPTION: Bell curve\n#+NAME:   fig:SED-HR4049\n[[./img/a.png]]\n</pre></div>\n\n<p>When rendered, it may show as follows in the exported document:\n</p>\n<div class=\"example\">\n<pre class=\"example\">Figure 2: Bell curve\n</pre></div>\n\n\n<span id=\"index-org_002dodt_002dcategory_002dmap_002dalist\"></span>\n<p>To modify the category component of the caption, customize the option\n<code>org-odt-category-map-alist</code>.  For example, to tag embedded images\nwith the string \u201cIllustration\u201d instead of the default string \u201cFigure\u201d,\nuse the following setting:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-odt-category-map-alist\n      '((\"__Figure__\" \"Illustration\" \"value\" \"Figure\" org-odt--enumerable-image-p)))\n</pre></div>\n\n<p>With the above modification, the previous example changes to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">Illustration 2: Bell curve\n</pre></div>\n\n"}, {"id": "131211LiteralexamplesinODTexport", "content": "\n<span id=\"Literal-examples-in-ODT-export\"></span>\n<span id=\"Literal-examples-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.11 Literal examples in ODT export</h4>\n\n<p>The ODT export back-end supports literal examples (see <a href=\"https://orgmode.org/org.html#Literal-Examples\">Literal Examples</a>) with full fontification.  Internally, the ODT export\nback-end relies on \u2018<samp>htmlfontify.el</samp>\u2019 to generate the style definitions\nneeded for fancy listings.  The auto-generated styles get \u2018<samp>OrgSrc</samp>\u2019\nprefix and inherit colors from the faces used by Emacs Font Lock\nlibrary for that source language.\n</p>\n<span id=\"index-org_002dodt_002dfontify_002dsrcblocks\"></span>\n<p>For custom fontification styles, customize the\n<code>org-odt-create-custom-styles-for-srcblocks</code> option.\n</p>\n<span id=\"index-org_002dodt_002dcreate_002dcustom_002dstyles_002dfor_002dsrcblocks\"></span>\n<p>To turn off fontification of literal examples, customize the\n<code>org-odt-fontify-srcblocks</code> option.\n</p>\n"}, {"id": "131212AdvancedtopicsinODTexport", "content": "\n<span id=\"Advanced-topics-in-ODT-export\"></span>\n<span id=\"Advanced-topics-in-ODT-export-1\"></span><h4 class=\"subsection\">13.12.12 Advanced topics in ODT export</h4>\n\n<p>The ODT export back-end has extensive features useful for power users\nand frequent uses of ODT formats.\n</p>\n<span id=\"Configuring-a-document-converter\"></span><span id=\"Configuring-a-document-converter-1\"></span><h4 class=\"subsubheading\">Configuring a document converter</h4>\n\n<span id=\"index-convert\"></span>\n<span id=\"index-doc_002c-docx_002c-rtf\"></span>\n<span id=\"index-converter\"></span>\n\n<p>The ODT export back-end works with popular converters with little or\nno extra configuration.  See <a href=\"https://orgmode.org/org.html#Extending-ODT-export\">Extending ODT export</a>.  The following is\nfor unsupported converters or tweaking existing defaults.\n</p>\n<dl compact=\"compact\">\n<dt>Register the converter</dt>\n<dd><span id=\"index-org_002dexport_002dodt_002dconvert_002dprocesses\"></span>\n<p>Add the name of the converter to the <code>org-odt-convert-processes</code>\nvariable.  Note that it also requires how the converter is invoked\non the command line.  See the variable\u2019s docstring for details.\n</p>\n</dd>\n<dt>Configure its capabilities</dt>\n<dd><span id=\"index-org_002dexport_002dodt_002dconvert_002dcapabilities\"></span>\n<p>Specify which formats the converter can handle by customizing the\nvariable <code>org-odt-convert-capabilities</code>.  Use the entry for the\ndefault values in this variable for configuring the new converter.\nAlso see its docstring for details.\n</p>\n</dd>\n<dt>Choose the converter</dt>\n<dd><span id=\"index-org_002dexport_002dodt_002dconvert_002dprocess\"></span>\n<p>Select the newly added converter as the preferred one by customizing\nthe option <code>org-odt-convert-process</code>.\n</p></dd>\n</dl>\n\n<span id=\"Working-with-OpenDocument-style-files\"></span><span id=\"Working-with-OpenDocument-style-files-1\"></span><h4 class=\"subsubheading\">Working with OpenDocument style files</h4>\n\n<span id=\"index-styles_002c-custom-1\"></span>\n<span id=\"index-template_002c-custom-1\"></span>\n\n<p>This section explores the internals of the ODT exporter; the means by which\nit produces styled documents; the use of automatic and custom OpenDocument\nstyles.\n</p>\n<p>The ODT exporter relies on two files for generating its output.  These\nfiles are bundled with the distribution under the directory pointed to\nby the variable <code>org-odt-styles-dir</code>.  The two files are:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>OrgOdtStyles.xml</samp>\u2019 <span id=\"x_002dorgodtstyles_002dxml\"></span></dt>\n<dd><p>This file contributes to the \u2018<samp>styles.xml</samp>\u2019 file of the final ODT\ndocument.  This file gets modified for the following purposes:\n</p>\n<ol>\n<li> To control outline numbering based on user settings;\n\n</li><li> To add styles generated by \u2018<samp>htmlfontify.el</samp>\u2019 for fontification of\ncode blocks.\n</li></ol>\n\n</dd>\n<dt>\u2018<samp>OrgOdtContentTemplate.xml</samp>\u2019 <span id=\"x_002dorgodtcontenttemplate_002dxml\"></span></dt>\n<dd><p>This file contributes to the \u2018<samp>content.xml</samp>\u2019 file of the final ODT\ndocument.  The contents of the Org outline are inserted between the\n\u2018<samp>&lt;office:text&gt;</samp>\u2019 \u2026 \u2018<samp>&lt;/office:text&gt;</samp>\u2019 elements of this file.\n</p>\n<p>Apart from serving as a template file for the final \u2018<samp>content.xml</samp>\u2019,\nthe file serves the following purposes:\n</p>\n<ol>\n<li> It contains automatic styles for formatting of tables which are\nreferenced by the exporter;\n\n</li><li> It contains \u2018<samp>&lt;text:sequence-decl&gt;</samp>\u2019 \u2026 \u2018<samp>&lt;/text:sequence-decl&gt;</samp>\u2019\nelements that control numbering of tables, images, equations, and\nsimilar entities.\n</li></ol>\n</dd>\n</dl>\n\n<span id=\"x_002doverriding_002dfactory_002dstyles\"></span><p>The following two variables control\nthe location from where the ODT exporter picks up the custom styles\nand content template files.  Customize these variables to override the\nfactory styles used by the exporter.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-odt-styles-file</code></dt>\n<dd><p>The ODT export back-end uses the file pointed to by this variable,\nsuch as \u2018<samp>styles.xml</samp>\u2019, for the final output.  It can take one of the\nfollowing values:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>FILE.xml</samp>\u2019</dt>\n<dd><p>Use this file instead of the default \u2018<samp>styles.xml</samp>\u2019\n</p>\n</dd>\n<dt>\u2018<samp>FILE.odt</samp>\u2019 or \u2018<samp>FILE.ott</samp>\u2019</dt>\n<dd><p>Use the \u2018<samp>styles.xml</samp>\u2019 contained in the specified OpenDocument\nText or Template file\n</p>\n</dd>\n<dt>\u2018<samp>FILE.odt</samp>\u2019 or \u2018<samp>FILE.ott</samp>\u2019 and a subset of included files</dt>\n<dd><p>Use the \u2018<samp>styles.xml</samp>\u2019 contained in the specified OpenDocument Text\nor Template file.  Additionally extract the specified member files\nand embed those within the final ODT document.\n</p>\n<p>Use this option if the \u2018<samp>styles.xml</samp>\u2019 file references additional\nfiles like header and footer images.\n</p>\n</dd>\n<dt><code>nil</code></dt>\n<dd><p>Use the default \u2018<samp>styles.xml</samp>\u2019.\n</p></dd>\n</dl>\n\n</dd>\n<dt><code>org-odt-content-template-file</code></dt>\n<dd><p>Use this variable to specify the blank \u2018<samp>content.xml</samp>\u2019 used in the\nfinal output.\n</p></dd>\n</dl>\n\n<span id=\"Creating-one_002doff-styles\"></span><span id=\"Creating-one_002doff-styles-1\"></span><h4 class=\"subsubheading\">Creating one-off styles</h4>\n\n<p>The ODT export back-end can read embedded raw OpenDocument XML from\nthe Org file.  Such direct formatting is useful for one-off instances.\n</p>\n<dl compact=\"compact\">\n<dt>Embedding ODT tags as part of regular text</dt>\n<dd><p>Enclose OpenDocument syntax in \u2018<samp>@@odt:...@@</samp>\u2019 for inline markup.  For\nexample, to highlight a region of text do the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">@@odt:&lt;text:span text:style-name=\"Highlight\"&gt;This is highlighted\ntext&lt;/text:span&gt;@@.  But this is regular text.\n</pre></div>\n\n<p><strong>Hint:</strong> To see the above example in action, edit the \u2018<samp>styles.xml</samp>\u2019\n(see <a href=\"https://orgmode.org/org.html#x_002dorgodtstyles_002dxml\">Factory styles</a>) and add a custom <em>Highlight</em> style as shown\nbelow:\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;style:style style:name=\"Highlight\" style:family=\"text\"&gt;\n  &lt;style:text-properties fo:background-color=\"#ff0000\"/&gt;\n&lt;/style:style&gt;\n</pre></div>\n\n</dd>\n<dt>Embedding a one-line OpenDocument XML</dt>\n<dd><span id=\"index-ODT_002c-keyword\"></span>\n<p>The ODT export back-end can read one-liner options with \u2018<samp>#+ODT:</samp>\u2019 in\nthe Org file.  For example, to force a page break:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ODT: &lt;text:p text:style-name=\"PageBreak\"/&gt;\n</pre></div>\n\n<p><strong>Hint:</strong> To see the above example in action, edit your\n\u2018<samp>styles.xml</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#x_002dorgodtstyles_002dxml\">Factory styles</a>) and add a custom \u2018<samp>PageBreak</samp>\u2019\nstyle as shown below.\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;style:style style:name=\"PageBreak\" style:family=\"paragraph\"\n             style:parent-style-name=\"Text_20_body\"&gt;\n  &lt;style:paragraph-properties fo:break-before=\"page\"/&gt;\n&lt;/style:style&gt;\n</pre></div>\n\n</dd>\n<dt>Embedding a block of OpenDocument XML</dt>\n<dd><p>The ODT export back-end can also read ODT export blocks for\nOpenDocument XML.  Such blocks use the \u2018<samp>#+BEGIN_EXPORT odt</samp>\u2019\n\u2026 \u2018<samp>#+END_EXPORT</samp>\u2019 constructs.\n</p>\n<p>For example, to create a one-off paragraph that uses bold text, do\nthe following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_EXPORT odt\n  &lt;text:p text:style-name=\"Text_20_body_20_bold\"&gt;\n  This paragraph is specially formatted and uses bold text.\n  &lt;/text:p&gt;\n#+END_EXPORT\n</pre></div>\n</dd>\n</dl>\n\n<span id=\"Customizing-tables-in-ODT-export\"></span><span id=\"Customizing-tables-in-ODT-export-1\"></span><h4 class=\"subsubheading\">Customizing tables in ODT export</h4>\n\n<span id=\"index-tables_002c-in-ODT-export-1\"></span>\n<span id=\"index-ATTR_005fODT_002c-keyword-3\"></span>\n\n<p>Override the default table format by specifying a custom table style\nwith the \u2018<samp>#+ATTR_ODT</samp>\u2019 line.  For a discussion on default formatting of\ntables, see <a href=\"https://orgmode.org/org.html#Tables-in-ODT-export\">Tables in ODT export</a>.\n</p>\n<p>This feature closely mimics the way table templates are defined in the\nOpenDocument-v1.2 specification<a id=\"DOCF139\" href=\"https://orgmode.org/org.html#FOOT139\"><sup>139</sup></a>.\n</p>\n<span id=\"index-org_002dodt_002dtable_002dstyles\"></span>\n<p>For quick preview of this feature, install the settings below and export the\ntable that follows:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-export-odt-table-styles\n      (append org-export-odt-table-styles\n              '((\"TableWithHeaderRowAndColumn\" \"Custom\"\n                 ((use-first-row-styles . t)\n                  (use-first-column-styles . t)))\n                (\"TableWithFirstRowandLastRow\" \"Custom\"\n                 ((use-first-row-styles . t)\n                  (use-last-row-styles . t))))))\n</pre></div>\n\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :style TableWithHeaderRowAndColumn\n| Name  | Phone | Age |\n| Peter |  1234 |  17 |\n| Anna  |  4321 |  25 |\n</pre></div>\n\n<p>The example above used \u2018<samp>Custom</samp>\u2019 template and installed two table\nstyles \u2018<samp>TableWithHeaderRowAndColumn</samp>\u2019 and\n\u2018<samp>TableWithFirstRowandLastRow</samp>\u2019.  <strong>Important:</strong> The OpenDocument styles\nneeded for producing the above template were pre-defined.  They are\navailable in the section marked \u2018<samp>Custom Table Template</samp>\u2019 in\n\u2018<samp>OrgOdtContentTemplate.xml</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#x_002dorgodtcontenttemplate_002dxml\">Factory styles</a>).  For adding new\ntemplates, define new styles there.\n</p>\n<p>To use this feature proceed as follows:\n</p>\n<ol>\n<li> Create a table template<a id=\"DOCF140\" href=\"https://orgmode.org/org.html#FOOT140\"><sup>140</sup></a>.\n\n<p>A table template is set of \u2018<samp>table-cell</samp>\u2019 and \u2018<samp>paragraph</samp>\u2019 styles for\neach of the following table cell categories:\n</p>\n<ul>\n<li> Body\n</li><li> First column\n</li><li> Last column\n</li><li> First row\n</li><li> Last row\n</li><li> Even row\n</li><li> Odd row\n</li><li> Even column\n</li><li> Odd Column\n</li></ul>\n\n<p>The names for the above styles must be chosen based on the name of\nthe table template using a well-defined convention.\n</p>\n<p>The naming convention is better illustrated with an example.  For\na table template with the name \u2018<samp>Custom</samp>\u2019, the needed style names are\nlisted in the following table.\n</p>\n<table>\n<thead><tr><th>Cell type</th><th>Cell style</th><th>Paragraph style</th></tr></thead>\n<tbody><tr><td>Body</td><td>\u2018<samp>CustomTableCell</samp>\u2019</td><td>\u2018<samp>CustomTableParagraph</samp>\u2019</td></tr>\n<tr><td>First column</td><td>\u2018<samp>CustomFirstColumnTableCell</samp>\u2019</td><td>\u2018<samp>CustomFirstColumnTableParagraph</samp>\u2019</td></tr>\n<tr><td>Last column</td><td>\u2018<samp>CustomLastColumnTableCell</samp>\u2019</td><td>\u2018<samp>CustomLastColumnTableParagraph</samp>\u2019</td></tr>\n<tr><td>First row</td><td>\u2018<samp>CustomFirstRowTableCell</samp>\u2019</td><td>\u2018<samp>CustomFirstRowTableParagraph</samp>\u2019</td></tr>\n<tr><td>Last row</td><td>\u2018<samp>CustomLastRowTableCell</samp>\u2019</td><td>\u2018<samp>CustomLastRowTableParagraph</samp>\u2019</td></tr>\n<tr><td>Even row</td><td>\u2018<samp>CustomEvenRowTableCell</samp>\u2019</td><td>\u2018<samp>CustomEvenRowTableParagraph</samp>\u2019</td></tr>\n<tr><td>Odd row</td><td>\u2018<samp>CustomOddRowTableCell</samp>\u2019</td><td>\u2018<samp>CustomOddRowTableParagraph</samp>\u2019</td></tr>\n<tr><td>Even column</td><td>\u2018<samp>CustomEvenColumnTableCell</samp>\u2019</td><td>\u2018<samp>CustomEvenColumnTableParagraph</samp>\u2019</td></tr>\n<tr><td>Odd column</td><td>\u2018<samp>CustomOddColumnTableCell</samp>\u2019</td><td>\u2018<samp>CustomOddColumnTableParagraph</samp>\u2019</td></tr>\n</tbody></table>\n\n<p>To create a table template with the name \u2018<samp>Custom</samp>\u2019, define the above\nstyles in the \u2018<samp>&lt;office:automatic-styles&gt;</samp>\u2019 \u2026\n\u2018<samp>&lt;/office:automatic-styles&gt;</samp>\u2019 element of the content template file\n(see <a href=\"https://orgmode.org/org.html#x_002dorgodtcontenttemplate_002dxml\">Factory styles</a>).\n</p>\n</li><li> Define a table style<a id=\"DOCF141\" href=\"https://orgmode.org/org.html#FOOT141\"><sup>141</sup></a>.\n\n<span id=\"index-org_002dodt_002dtable_002dstyles-1\"></span>\n<p>To define a table style, create an entry for the style in the\nvariable <code>org-odt-table-styles</code> and specify the following:\n</p>\n<ul>\n<li> the name of the table template created in step (1),\n</li><li> the set of cell styles in that template that are to be activated.\n</li></ul>\n\n<p>For example, the entry below defines two different table styles\n\u2018<samp>TableWithHeaderRowAndColumn</samp>\u2019 and \u2018<samp>TableWithFirstRowandLastRow</samp>\u2019\nbased on the same template \u2018<samp>Custom</samp>\u2019.  The styles achieve their\nintended effect by selectively activating the individual cell\nstyles in that template.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-export-odt-table-styles\n      (append org-export-odt-table-styles\n              '((\"TableWithHeaderRowAndColumn\" \"Custom\"\n                 ((use-first-row-styles . t)\n                  (use-first-column-styles . t)))\n                (\"TableWithFirstRowandLastRow\" \"Custom\"\n                 ((use-first-row-styles . t)\n                  (use-last-row-styles . t))))))\n</pre></div>\n\n</li><li> Associate a table with the table style.\n\n<p>To do this, specify the table style created in step (2) as part of\nthe \u2018<samp>ATTR_ODT</samp>\u2019 line as shown below.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ODT: :style TableWithHeaderRowAndColumn\n| Name  | Phone | Age |\n| Peter |  1234 |  17 |\n| Anna  |  4321 |  25 |\n</pre></div>\n</li></ol>\n\n<span id=\"Validating-OpenDocument-XML\"></span><span id=\"Validating-OpenDocument-XML-1\"></span><h4 class=\"subsubheading\">Validating OpenDocument XML</h4>\n\n<p>Sometimes ODT format files may not open due to \u2018<samp>.odt</samp>\u2019 file corruption.\nTo verify if such a file is corrupt, validate it against the\nOpenDocument Relax NG Compact (RNC) syntax schema.  But first the\n\u2018<samp>.odt</samp>\u2019 files have to be decompressed using \u2018<samp>zip</samp>\u2019.  Note that \u2018<samp>.odt</samp>\u2019\nfiles are ZIP archives: <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#File-Archives\">(emacs)File Archives</a>.  The contents of\nODT files are in XML.  For general help with validation\u2014and\nschema-sensitive editing\u2014of XML files: <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/nxml-mode.html#Introduction\">(nxml-mode)Introduction</a>.\n</p>\n<span id=\"index-org_002dexport_002dodt_002dschema_002ddir\"></span>\n<p>Customize <code>org-odt-schema-dir</code> to point to a directory with\nOpenDocument RNC files and the needed schema-locating rules.  The ODT\nexport back-end takes care of updating the\n<code>rng-schema-locating-files</code>.\n</p>\n"}, {"id": "1313OrgExport", "content": "\n<span id=\"Org-Export\"></span>\n<span id=\"Org-Export-1\"></span><h3 class=\"section\">13.13 Org Export</h3>\n\n<span id=\"index-Org-export\"></span>\n<p><em>org</em> export back-end creates a normalized version of the Org document\nin current buffer.  The exporter evaluates Babel code (see <a href=\"https://orgmode.org/org.html#Evaluating-Code-Blocks\">Evaluating Code Blocks</a>) and removes content specific to other back-ends.\n</p>\n<span id=\"Org-export-commands\"></span><span id=\"Org-export-commands-1\"></span><h4 class=\"subheading\">Org export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e O o</kbd> (<code>org-org-export-to-org</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-O-o\"></span>\n<span id=\"index-org_002dorg_002dexport_002dto_002dorg\"></span>\n<p>Export as an Org file with a \u2018<samp>.org</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019,\nOrg exports to \u2018<samp>myfile.org.org</samp>\u2019, overwriting without warning.\n</p>\n</dd>\n<dt><kbd>C-c C-e O v</kbd> (~~)</dt>\n<dd><span id=\"index-C_002dc-C_002de-O-v\"></span>\n<p>Export to an Org file, then open it.\n</p></dd>\n</dl>\n\n"}, {"id": "1314TexinfoExport", "content": "\n<span id=\"Texinfo-Export\"></span>\n<span id=\"Texinfo-Export-1\"></span><h3 class=\"section\">13.14 Texinfo Export</h3>\n\n\n\n"}, {"id": "13141Texinfoexportcommands", "content": "\n<span id=\"Texinfo-export-commands\"></span>\n<span id=\"Texinfo-export-commands-1\"></span><h4 class=\"subsection\">13.14.1 Texinfo export commands</h4>\n\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e i t</kbd> (<code>org-texinfo-export-to-texinfo</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-i-t\"></span>\n<span id=\"index-org_002dtexinfo_002dexport_002dto_002dtexinfo\"></span>\n<p>Export as a Texinfo file with \u2018<samp>.texi</samp>\u2019 extension.  For \u2018<samp>myfile.org</samp>\u2019,\nOrg exports to \u2018<samp>myfile.texi</samp>\u2019, overwriting without warning.\n</p>\n</dd>\n<dt><kbd>C-c C-e i i</kbd> (<code>org-texinfo-export-to-info</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-i-i\"></span>\n<span id=\"index-org_002dtexinfo_002dexport_002dto_002dinfo\"></span>\n<span id=\"index-org_002dtexinfo_002dinfo_002dprocess\"></span>\n<p>Export to Texinfo format first and then process it to make an Info\nfile.  To generate other formats, such as DocBook, customize the\n<code>org-texinfo-info-process</code> variable.\n</p></dd>\n</dl>\n\n"}, {"id": "13142Texinfospecificexportsettings", "content": "\n<span id=\"Texinfo-specific-export-settings\"></span>\n<span id=\"Texinfo-specific-export-settings-1\"></span><h4 class=\"subsection\">13.14.2 Texinfo specific export settings</h4>\n\n<p>The Texinfo export back-end has several additional keywords for\ncustomizing Texinfo output.  Setting these keywords works similar to\nthe general options (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>SUBTITLE</samp>\u2019</dt>\n<dd><span id=\"index-SUBTITLE_002c-keyword-5\"></span>\n<p>The document subtitle.\n</p>\n</dd>\n<dt>\u2018<samp>SUBAUTHOR</samp>\u2019</dt>\n<dd><span id=\"index-SUBAUTHOR_002c-keyword\"></span>\n<p>Additional authors for the document.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_FILENAME</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fFILENAME_002c-keyword\"></span>\n<p>The Texinfo filename.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_CLASS</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fCLASS_002c-keyword\"></span>\n<span id=\"index-org_002dtexinfo_002ddefault_002dclass\"></span>\n<p>The default document class (<code>org-texinfo-default-class</code>), which must\nbe a member of <code>org-texinfo-classes</code>.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_HEADER</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fHEADER_002c-keyword\"></span>\n<p>Arbitrary lines inserted at the end of the header.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_POST_HEADER</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fPOST_005fHEADER_002c-keyword\"></span>\n<p>Arbitrary lines inserted after the end of the header.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_DIR_CATEGORY</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fDIR_005fCATEGORY_002c-keyword\"></span>\n<p>The directory category of the document.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_DIR_TITLE</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fDIR_005fTITLE_002c-keyword\"></span>\n<p>The directory title of the document.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_DIR_DESC</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fDIR_005fDESC_002c-keyword\"></span>\n<p>The directory description of the document.\n</p>\n</dd>\n<dt>\u2018<samp>TEXINFO_PRINTED_TITLE</samp>\u2019</dt>\n<dd><span id=\"index-TEXINFO_005fPRINTED_005fTITLE_002c-keyword\"></span>\n<p>The printed title of the document.\n</p></dd>\n</dl>\n\n"}, {"id": "13143Texinfofileheader", "content": "\n<span id=\"Texinfo-file-header\"></span>\n<span id=\"Texinfo-file-header-1\"></span><h4 class=\"subsection\">13.14.3 Texinfo file header</h4>\n\n<span id=\"index-TEXINFO_005fFILENAME_002c-keyword-1\"></span>\n<p>After creating the header for a Texinfo file, the Texinfo back-end\nautomatically generates a name and destination path for the Info file.\nTo override this default with a more sensible path and name, specify\nthe \u2018<samp>TEXINFO_FILENAME</samp>\u2019 keyword.\n</p>\n<span id=\"index-org_002dtexinfo_002dcoding_002dsystem\"></span>\n<span id=\"index-TEXINFO_005fHEADER_002c-keyword-1\"></span>\n<p>Along with the output\u2019s file name, the Texinfo header also contains\nlanguage details (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>) and encoding system as set in\nthe <code>org-texinfo-coding-system</code> variable.  Insert \u2018<samp>TEXINFO_HEADER</samp>\u2019\nkeywords for each additional command in the header, for example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TEXINFO_HEADER: @synindex\n</pre></div>\n\n\n<span id=\"index-TEXINFO_005fCLASS_002c-keyword-1\"></span>\n<span id=\"index-org_002dtexinfo_002dclasses\"></span>\n<p>Instead of repeatedly installing the same set of commands, define\na class in <code>org-texinfo-classes</code> once, and then activate it in the\ndocument by setting the \u2018<samp>TEXINFO_CLASS</samp>\u2019 keyword to that class.\n</p>\n"}, {"id": "13144Texinfotitleandcopyrightpage", "content": "\n<span id=\"Texinfo-title-and-copyright-page\"></span>\n<span id=\"Texinfo-title-and-copyright-page-1\"></span><h4 class=\"subsection\">13.14.4 Texinfo title and copyright page</h4>\n\n<span id=\"index-TEXINFO_005fPRINTED_005fTITLE_002c-keyword-1\"></span>\n<p>The default template for hard copy output has a title page with\n\u2018<samp>TITLE</samp>\u2019 and \u2018<samp>AUTHOR</samp>\u2019 keywords (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).  To replace the\nregular title with something different for the printed version, use\nthe \u2018<samp>TEXINFO_PRINTED_TITLE</samp>\u2019 and \u2018<samp>SUBTITLE</samp>\u2019 keywords.  Both expect raw\nTexinfo code for setting their values.\n</p>\n<span id=\"index-SUBAUTHOR_002c-keyword-1\"></span>\n<p>If one \u2018<samp>AUTHOR</samp>\u2019 line is not sufficient, add multiple \u2018<samp>SUBAUTHOR</samp>\u2019\nkeywords.  They have to be set in raw Texinfo code.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+AUTHOR: Jane Smith\n#+SUBAUTHOR: John Doe\n#+TEXINFO_PRINTED_TITLE: This Long Title@@inlinefmt{tex,@*} Is Broken in @TeX{}\n</pre></div>\n\n<span id=\"index-COPYING_002c-property\"></span>\n<p>Copying material is defined in a dedicated headline with a non-<code>nil</code>\n\u2018<samp>COPYING</samp>\u2019 property.  The back-end inserts the contents within\na \u2018<samp>@copying</samp>\u2019 command at the beginning of the document.  The heading\nitself does not appear in the structure of the document.\n</p>\n<p>Copyright information is printed on the back of the title page.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Legalese\n  :PROPERTIES:\n  :COPYING: t\n  :END:\n\n  This is a short example of a complete Texinfo file, version 1.0.\n\n  Copyright \\copy 2016 Free Software Foundation, Inc.\n</pre></div>\n\n"}, {"id": "13145Infodirectoryfile", "content": "\n<span id=\"Info-directory-file\"></span>\n<span id=\"Info-directory-file-1\"></span><h4 class=\"subsection\">13.14.5 Info directory file</h4>\n\n<span id=\"index-dir-file_002c-in-Texinfo-export\"></span>\n<span id=\"index-Info-directory-file_002c-in-Texinfo-export\"></span>\n<span id=\"index-install_002dinfo_002c-in-Texinfo-export\"></span>\n\n<span id=\"index-TEXINFO_005fDIR_005fCATEGORY_002c-keyword-1\"></span>\n<span id=\"index-TEXINFO_005fDIR_005fTITLE_002c-keyword-1\"></span>\n<span id=\"index-TEXINFO_005fDIR_005fDESC_002c-keyword-1\"></span>\n<p>The end result of the Texinfo export process is the creation of an\nInfo file.  This Info file\u2019s metadata has variables for category,\ntitle, and description: \u2018<samp>TEXINFO_DIR_CATEGORY</samp>\u2019, \u2018<samp>TEXINFO_DIR_TITLE</samp>\u2019,\nand \u2018<samp>TEXINFO_DIR_DESC</samp>\u2019 keywords that establish where in the Info\nhierarchy the file fits.\n</p>\n<p>Here is an example that writes to the Info directory file:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TEXINFO_DIR_CATEGORY: Emacs\n#+TEXINFO_DIR_TITLE: Org Mode: (org)\n#+TEXINFO_DIR_DESC: Outline-based notes management and organizer\n</pre></div>\n\n"}, {"id": "13146Headingsandsectioningstructure", "content": "\n<span id=\"Headings-and-sectioning-structure\"></span>\n<span id=\"Headings-and-sectioning-structure-1\"></span><h4 class=\"subsection\">13.14.6 Headings and sectioning structure</h4>\n\n<span id=\"index-org_002dtexinfo_002dclasses-1\"></span>\n<span id=\"index-org_002dtexinfo_002ddefault_002dclass-1\"></span>\n<span id=\"index-TEXINFO_005fCLASS_002c-keyword-2\"></span>\n<p>The Texinfo export back-end uses a pre-defined scheme to convert Org\nheadlines to equivalent Texinfo structuring commands.  A scheme like\nthis maps top-level headlines to numbered chapters tagged as\n<code>@chapter</code> and lower-level headlines to unnumbered chapters tagged as\n<code>@unnumbered</code>.  To override such mappings to introduce <code>@part</code> or\nother Texinfo structuring commands, define a new class in\n<code>org-texinfo-classes</code>.  Activate the new class with the\n\u2018<samp>TEXINFO_CLASS</samp>\u2019 keyword.  When no new class is defined and activated,\nthe Texinfo export back-end defaults to the\n<code>org-texinfo-default-class</code>.\n</p>\n<p>If an Org headline\u2019s level has no associated Texinfo structuring\ncommand, or is below a certain threshold (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>), then\nthe Texinfo export back-end makes it into a list item.\n</p>\n<span id=\"index-APPENDIX_002c-property\"></span>\n<p>The Texinfo export back-end makes any headline with a non-<code>nil</code>\n\u2018<samp>APPENDIX</samp>\u2019 property into an appendix.  This happens independent of the\nOrg headline level or the \u2018<samp>TEXINFO_CLASS</samp>\u2019 keyword.\n</p>\n<span id=\"index-ALT_005fTITLE_002c-property-1\"></span>\n<span id=\"index-DESCRIPTION_002c-property\"></span>\n<p>The Texinfo export back-end creates a menu entry after the Org\nheadline for each regular sectioning structure.  To override this with\na shorter menu entry, use the \u2018<samp>ALT_TITLE</samp>\u2019 property (see <a href=\"https://orgmode.org/org.html#Table-of-Contents\">Table of Contents</a>).  Texinfo menu entries also have an option for a longer\n\u2018<samp>DESCRIPTION</samp>\u2019 property.  Here\u2019s an example that uses both to override\nthe default menu entry:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Controlling Screen Display\n  :PROPERTIES:\n  :ALT_TITLE: Display\n  :DESCRIPTION: Controlling Screen Display\n  :END:\n</pre></div>\n\n<span id=\"index-Top-node_002c-in-Texinfo-export\"></span>\n<p>The text before the first headline belongs to the <em>Top</em> node, i.e.,\nthe node in which a reader enters an Info manual.  As such, it is\nexpected not to appear in printed output generated from the \u2018<samp>.texi</samp>\u2019\nfile.  See <a href=\"https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#The-Top-Node\">(texinfo)The Top Node</a>, for more information.\n</p>\n"}, {"id": "13147Indices", "content": "\n<span id=\"Indices\"></span>\n<span id=\"Indices-1\"></span><h4 class=\"subsection\">13.14.7 Indices</h4>\n\n<span id=\"index-CINDEX_002c-keyword\"></span>\n<span id=\"index-concept-index_002c-in-Texinfo-export\"></span>\n<span id=\"index-FINDEX_002c-keyword\"></span>\n<span id=\"index-function-index_002c-in-Texinfo-export\"></span>\n<span id=\"index-KINDEX_002c-keyword\"></span>\n<span id=\"index-keystroke-index_002c-in-Texinfo-export\"></span>\n<span id=\"index-PINDEX_002c-keyword\"></span>\n<span id=\"index-program-index_002c-in-Texinfo-export\"></span>\n<span id=\"index-TINDEX_002c-keyword\"></span>\n<span id=\"index-data-type-index_002c-in-Texinfo-export\"></span>\n<span id=\"index-VINDEX_002c-keyword\"></span>\n<span id=\"index-variable-index_002c-in-Texinfo-export\"></span>\n<p>The Texinfo export back-end recognizes these indexing keywords if used\nin the Org file: \u2018<samp>CINDEX</samp>\u2019, \u2018<samp>FINDEX</samp>\u2019, \u2018<samp>KINDEX</samp>\u2019, \u2018<samp>PINDEX</samp>\u2019, \u2018<samp>TINDEX</samp>\u2019 and\n\u2018<samp>VINDEX</samp>\u2019.  Write their value as verbatim Texinfo code; in particular,\n\u2018<samp>{</samp>\u2019, \u2018<samp>}</samp>\u2019 and \u2018<samp>@</samp>\u2019 characters need to be escaped with \u2018<samp>@</samp>\u2019 if they do not\nbelong to a Texinfo command.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CINDEX: Defining indexing entries\n</pre></div>\n\n\n<span id=\"index-INDEX_002c-property\"></span>\n<p>For the back-end to generate an index entry for a headline, set the\n\u2018<samp>INDEX</samp>\u2019 property to \u2018<samp>cp</samp>\u2019 or \u2018<samp>vr</samp>\u2019.  These abbreviations come from\nTexinfo that stand for concept index and variable index.  The Texinfo\nmanual has abbreviations for all other kinds of indexes.  The back-end\nexports the headline as an unnumbered chapter or section command, and\nthen inserts the index after its contents.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Concept Index\n  :PROPERTIES:\n  :INDEX: cp\n  :END:\n</pre></div>\n\n"}, {"id": "13148QuotingTexinfocode", "content": "\n<span id=\"Quoting-Texinfo-code\"></span>\n<span id=\"Quoting-Texinfo-code-1\"></span><h4 class=\"subsection\">13.14.8 Quoting Texinfo code</h4>\n\n<p>Use any of the following three methods to insert or escape raw Texinfo\ncode:\n</p>\n<span id=\"index-TEXINFO_002c-keyword\"></span>\n<span id=\"index-BEGIN_005fEXPORT-texinfo\"></span>\n<div class=\"example\">\n<pre class=\"example\">Richard @@texinfo:@sc{@@Stallman@@texinfo:}@@ commence' GNU.\n\n#+TEXINFO: @need800\nThis paragraph is preceded by...\n\n#+BEGIN_EXPORT texinfo\n  @auindex Johnson, Mark\n  @auindex Lakoff, George\n#+END_EXPORT\n</pre></div>\n\n"}, {"id": "13149PlainlistsinTexinfoexport", "content": "\n<span id=\"Plain-lists-in-Texinfo-export\"></span>\n<span id=\"Plain-lists-in-Texinfo-export-1\"></span><h4 class=\"subsection\">13.14.9 Plain lists in Texinfo export</h4>\n\n<span id=\"index-ATTR_005fTEXINFO_002c-keyword\"></span>\n<span id=\"index-two_002dcolumn-tables_002c-in-Texinfo-export\"></span>\n<span id=\"index-table_002dtype_002c-Texinfo-attribute\"></span>\n<p>The Texinfo export back-end by default converts description lists in\nthe Org file using the default command \u2018<samp>@table</samp>\u2019, which results in\na table with two columns.  To change this behavior, set \u2018<samp>:table-type</samp>\u2019\nattribute to either \u2018<samp>ftable</samp>\u2019 or \u2018<samp>vtable</samp>\u2019 value.  For more information,\nsee <a href=\"https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#Two_002dcolumn-Tables\">(texinfo)Two-column Tables</a>.\n</p>\n<span id=\"index-org_002dtexinfo_002dtable_002ddefault_002dmarkup\"></span>\n<span id=\"index-indic_002c-Texinfo-attribute\"></span>\n<p>The Texinfo export back-end by default also applies a text highlight\nbased on the defaults stored in <code>org-texinfo-table-default-markup</code>.\nTo override the default highlight command, specify another one with\nthe \u2018<samp>:indic</samp>\u2019 attribute.\n</p>\n<span id=\"index-multiple-items-in-Texinfo-lists\"></span>\n<span id=\"index-sep_002c-Texinfo-attribute\"></span>\n<p>Org syntax is limited to one entry per list item.  Nevertheless, the\nTexinfo export back-end can split that entry according to any text\nprovided through the \u2018<samp>:sep</samp>\u2019 attribute.  Each part then becomes a new\nentry in the first column of the table.\n</p>\n<p>The following example illustrates all the attributes above:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :table-type vtable :sep , :indic asis\n- foo, bar :: This is the common text for variables foo and bar.\n</pre></div>\n\n<p>becomes\n</p>\n<div class=\"example\">\n<pre class=\"example\">@vtable @asis\n@item foo\n@itemx bar\nThis is the common text for variables foo and bar.\n@end table\n</pre></div>\n\n<span id=\"index-lettered-lists_002c-in-Texinfo-export\"></span>\n<span id=\"index-enum_002c-Texinfo-attribute\"></span>\n<p>Ordered lists are numbered when exported to Texinfo format.  Such\nnumbering obeys any counter (see <a href=\"https://orgmode.org/org.html#Plain-Lists\">Plain Lists</a>) in the first item of\nthe list.  The \u2018<samp>:enum</samp>\u2019 attribute also let you start the list at\na specific number, or switch to a lettered list, as illustrated here\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :enum A\n1. Alpha\n2. Bravo\n3. Charlie\n</pre></div>\n\n"}, {"id": "131410TablesinTexinfoexport", "content": "\n<span id=\"Tables-in-Texinfo-export\"></span>\n<span id=\"Tables-in-Texinfo-export-1\"></span><h4 class=\"subsection\">13.14.10 Tables in Texinfo export</h4>\n\n<span id=\"index-ATTR_005fTEXINFO_002c-keyword-1\"></span>\n<p>When exporting tables, the Texinfo export back-end uses the widest\ncell width in each column.  To override this and instead specify as\nfractions of line length, use the \u2018<samp>:columns</samp>\u2019 attribute.  See example\nbelow.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :columns .5 .5\n| a cell | another cell |\n</pre></div>\n\n"}, {"id": "131411ImagesinTexinfoexport", "content": "\n<span id=\"Images-in-Texinfo-export\"></span>\n<span id=\"Images-in-Texinfo-export-1\"></span><h4 class=\"subsection\">13.14.11 Images in Texinfo export</h4>\n\n<span id=\"index-ATTR_005fTEXINFO_002c-keyword-2\"></span>\n<p>Insert a file link to the image in the Org file, and the Texinfo\nexport back-end inserts the image.  These links must have the usual\nsupported image extensions and no descriptions.  To scale the image,\nuse \u2018<samp>:width</samp>\u2019 and \u2018<samp>:height</samp>\u2019 attributes.  For alternate text, use \u2018<samp>:alt</samp>\u2019\nand specify the text using Texinfo code, as shown in the example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :width 1in :alt Alternate @i{text}\n[[ridt.pdf]]\n</pre></div>\n\n"}, {"id": "131412QuotationsinTexinfoexport", "content": "\n<span id=\"Quotations-in-Texinfo-export\"></span>\n<span id=\"Quotations-in-Texinfo-export-1\"></span><h4 class=\"subsection\">13.14.12 Quotations in Texinfo export</h4>\n\n<span id=\"index-ATTR_005fTEXINFO_002c-keyword-3\"></span>\n<p>You can write the text of a quotation within a quote block (see\n<a href=\"https://orgmode.org/org.html#Paragraphs\">Paragraphs</a>).  You may also emphasize some text at the beginning of\nthe quotation with the \u2018<samp>:tag</samp>\u2019 attribute.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :tag Warning\n#+BEGIN_QUOTE\nStriking your thumb with a hammer may cause severe pain and discomfort.\n#+END_QUOTE\n</pre></div>\n\n<p>To specify the author of the quotation, use the \u2018<samp>:author</samp>\u2019 attribute.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :author King Arthur\n#+BEGIN_QUOTE\nThe Lady of the Lake, her arm clad in the purest shimmering samite,\nheld aloft Excalibur from the bosom of the water, signifying by divine\nprovidence that I, Arthur, was to carry Excalibur.  That is why I am\nyour king.\n#+END_QUOTE\n</pre></div>\n\n"}, {"id": "131413SpecialblocksinTexinfoexport", "content": "\n<span id=\"Special-blocks-in-Texinfo-export\"></span>\n<span id=\"Special-blocks-in-Texinfo-export-1\"></span><h4 class=\"subsection\">13.14.13 Special blocks in Texinfo export</h4>\n\n<span id=\"index-ATTR_005fTEXINFO_002c-keyword-4\"></span>\n\n<p>The Texinfo export back-end converts special blocks to commands with\nthe same name.  It also adds any \u2018<samp>:options</samp>\u2019 attributes to the end of\nthe command, as shown in this example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_TEXINFO: :options org-org-export-to-org ...\n#+BEGIN_defun\n  A somewhat obsessive function name.\n#+END_defun\n</pre></div>\n\n<p>becomes\n</p>\n<div class=\"example\">\n<pre class=\"example\">@defun org-org-export-to-org ...\n  A somewhat obsessive function name.\n@end defun\n</pre></div>\n\n"}, {"id": "131414ATexinfoexample", "content": "\n<span id=\"A-Texinfo-example\"></span>\n<span id=\"A-Texinfo-example-1\"></span><h4 class=\"subsection\">13.14.14 A Texinfo example</h4>\n\n<p>Here is a more detailed example Org file.  See\n<a href=\"https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#GNU-Sample-Texts\">(texinfo)GNU Sample Texts</a> for an equivalent example using\nTexinfo code.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+TITLE: GNU Sample {{{version}}}\n#+SUBTITLE: for version {{{version}}}, {{{updated}}}\n#+AUTHOR: A.U. Thor\n#+EMAIL: bug-sample@gnu.org\n\n#+OPTIONS: ':t toc:t author:t email:t\n#+LANGUAGE: en\n\n#+MACRO: version 2.0\n#+MACRO: updated last updated 4 March 2014\n\n#+TEXINFO_FILENAME: sample.info\n#+TEXINFO_HEADER: @syncodeindex pg cp\n\n#+TEXINFO_DIR_CATEGORY: Texinfo documentation system\n#+TEXINFO_DIR_TITLE: sample: (sample)\n#+TEXINFO_DIR_DESC: Invoking sample\n\n#+TEXINFO_PRINTED_TITLE: GNU Sample\n\nThis manual is for GNU Sample (version {{{version}}},\n{{{updated}}}).\n\n* Copying\n  :PROPERTIES:\n  :COPYING:  t\n  :END:\n\n  This manual is for GNU Sample (version {{{version}}},\n  {{{updated}}}), which is an example in the Texinfo documentation.\n\n  Copyright \\copy 2016 Free Software Foundation, Inc.\n\n  #+BEGIN_QUOTE\n  Permission is granted to copy, distribute and/or modify this\n  document under the terms of the GNU Free Documentation License,\n  Version 1.3 or any later version published by the Free Software\n  Foundation; with no Invariant Sections, with no Front-Cover Texts,\n  and with no Back-Cover Texts.  A copy of the license is included in\n  the section entitled \"GNU Free Documentation License\".\n  #+END_QUOTE\n\n* Invoking sample\n\n  #+PINDEX: sample\n  #+CINDEX: invoking @command{sample}\n\n  This is a sample manual.  There is no sample program to invoke, but\n  if there were, you could see its basic usage and command line\n  options here.\n\n* GNU Free Documentation License\n  :PROPERTIES:\n  :APPENDIX: t\n  :END:\n\n  #+INCLUDE: fdl.org\n\n* Index\n  :PROPERTIES:\n  :INDEX:    cp\n  :END:\n</pre></div>\n\n"}, {"id": "1315iCalendarExport", "content": "\n<span id=\"iCalendar-Export\"></span>\n<span id=\"iCalendar-Export-1\"></span><h3 class=\"section\">13.15 iCalendar Export</h3>\n\n<span id=\"index-iCalendar-export\"></span>\n\n<p>A large part of Org mode\u2019s interoperability success is its ability to\neasily export to or import from external applications.  The iCalendar\nexport back-end takes calendar data from Org files and exports to the\nstandard iCalendar format.\n</p>\n<span id=\"index-org_002dicalendar_002dinclude_002dtodo\"></span>\n<span id=\"index-org_002dicalendar_002duse_002ddeadline\"></span>\n<span id=\"index-org_002dicalendar_002duse_002dscheduled\"></span>\n<p>The iCalendar export back-end can also incorporate TODO entries based\non the configuration of the <code>org-icalendar-include-todo</code> variable.\nThe back-end exports plain timestamps as \u2018<samp>VEVENT</samp>\u2019, TODO items as\n\u2018<samp>VTODO</samp>\u2019, and also create events from deadlines that are in non-TODO\nitems.  The back-end uses the deadlines and scheduling dates in Org\nTODO items for setting the start and due dates for the iCalendar TODO\nentry.  Consult the <code>org-icalendar-use-deadline</code> and\n<code>org-icalendar-use-scheduled</code> variables for more details.\n</p>\n<span id=\"index-org_002dicalendar_002dcategories\"></span>\n<span id=\"index-org_002dicalendar_002dalarm_002dtime\"></span>\n<p>For tags on the headline, the iCalendar export back-end makes them\ninto iCalendar categories.  To tweak the inheritance of tags and TODO\nstates, configure the variable <code>org-icalendar-categories</code>.  To assign\nclock alarms based on time, configure the <code>org-icalendar-alarm-time</code>\nvariable.\n</p>\n<span id=\"index-org_002dicalendar_002dstore_002dUID\"></span>\n<span id=\"index-ID_002c-property-2\"></span>\n<p>The iCalendar format standard requires globally unique identifier\u2014or\nUID\u2014for each entry.  The iCalendar export back-end creates UIDs\nduring export.  To save a copy of the UID in the Org file set the\nvariable <code>org-icalendar-store-UID</code>.  The back-end looks for the \u2018<samp>ID</samp>\u2019\nproperty of the entry for re-using the same UID for subsequent\nexports.\n</p>\n<p>Since a single Org entry can result in multiple iCalendar\nentries\u2014timestamp, deadline, scheduled item, or TODO item\u2014Org adds\nprefixes to the UID, depending on which part of the Org entry\ntriggered the creation of the iCalendar entry.  Prefixing ensures UIDs\nremains unique, yet enable synchronization programs trace the\nconnections.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e c f</kbd> (<code>org-icalendar-export-to-ics</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-c-f\"></span>\n<span id=\"index-org_002dicalendar_002dexport_002dto_002dics\"></span>\n<p>Create iCalendar entries from the current Org buffer and store them\nin the same directory, using a file extension \u2018<samp>.ics</samp>\u2019.\n</p>\n</dd>\n<dt><kbd>C-c C-e c a</kbd> (<code>org-icalendar-export-agenda-files</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-c-a\"></span>\n<span id=\"index-org_002dicalendar_002dexport_002dagenda_002dfiles\"></span>\n<p>Create iCalendar entries from Org files in <code>org-agenda-files</code> and\nstore in a separate iCalendar file for each Org file.\n</p>\n</dd>\n<dt><kbd>C-c C-e c c</kbd> (<code>org-icalendar-combine-agenda-files</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-c-c\"></span>\n<span id=\"index-org_002dicalendar_002dcombine_002dagenda_002dfiles\"></span>\n<span id=\"index-org_002dicalendar_002dcombined_002dagenda_002dfile\"></span>\n<p>Create a combined iCalendar file from Org files in\n<code>org-agenda-files</code> and write it to\n<code>org-icalendar-combined-agenda-file</code> file name.\n</p></dd>\n</dl>\n\n<span id=\"index-SUMMARY_002c-property\"></span>\n<span id=\"index-DESCRIPTION_002c-property-1\"></span>\n<span id=\"index-LOCATION_002c-property\"></span>\n<span id=\"index-TIMEZONE_002c-property\"></span>\n<span id=\"index-CLASS_002c-property\"></span>\n<p>The iCalendar export back-end includes \u2018<samp>SUMMARY</samp>\u2019, \u2018<samp>DESCRIPTION</samp>\u2019,\n\u2018<samp>LOCATION</samp>\u2019, \u2018<samp>TIMEZONE</samp>\u2019 and \u2018<samp>CLASS</samp>\u2019 properties from the Org entries\nwhen exporting.  To force the back-end to inherit the \u2018<samp>LOCATION</samp>\u2019,\n\u2018<samp>TIMEZONE</samp>\u2019 and \u2018<samp>CLASS</samp>\u2019 properties, configure the\n<code>org-use-property-inheritance</code> variable.\n</p>\n<span id=\"index-org_002dicalendar_002dinclude_002dbody\"></span>\n<p>When Org entries do not have \u2018<samp>SUMMARY</samp>\u2019, \u2018<samp>DESCRIPTION</samp>\u2019, \u2018<samp>LOCATION</samp>\u2019 and\n\u2018<samp>CLASS</samp>\u2019 properties, the iCalendar export back-end derives the summary\nfrom the headline, and derives the description from the body of the\nOrg item.  The <code>org-icalendar-include-body</code> variable limits the\nmaximum number of characters of the content are turned into its\ndescription.\n</p>\n<p>The \u2018<samp>TIMEZONE</samp>\u2019 property can be used to specify a per-entry time zone,\nand is applied to any entry with timestamp information.  Time zones\nshould be specified as per the IANA time zone database format, e.g.,\n\u2018<samp>Asia/Almaty</samp>\u2019.  Alternately, the property value can be \u2018<samp>UTC</samp>\u2019, to force\nUTC time for this entry only.\n</p>\n<p>The \u2018<samp>CLASS</samp>\u2019 property can be used to specify a per-entry visibility\nclass or access restrictions, and is applied to any entry with class\ninformation.  The iCalendar standard defines three visibility classes:\n</p><dl compact=\"compact\">\n<dt>\u2018<samp>PUBLIC</samp>\u2019</dt>\n<dd><p>The entry is publicly visible (this is the default).\n</p></dd>\n<dt>\u2018<samp>CONFIDENTIAL</samp>\u2019</dt>\n<dd><p>Only a limited group of clients get access to the\nevent.\n</p></dd>\n<dt>\u2018<samp>PRIVATE</samp>\u2019</dt>\n<dd><p>The entry can be retrieved only by its owner.\n</p></dd>\n</dl>\n<p>The server should treat unknown class properties the same as\n\u2018<samp>PRIVATE</samp>\u2019.\n</p>\n<p>Exporting to iCalendar format depends in large part on the\ncapabilities of the destination application.  Some are more lenient\nthan others.  Consult the Org mode FAQ for advice on specific\napplications.\n</p>\n"}, {"id": "1316OtherBuiltinBackends", "content": "\n<span id=\"Other-Built_002din-Back_002dends\"></span>\n<span id=\"Other-Built_002din-Back_002dends-1\"></span><h3 class=\"section\">13.16 Other Built-in Back-ends</h3>\n\n<p>Other export back-ends included with Org are:\n</p>\n<ul>\n<li> \u2018<samp>ox-man.el</samp>\u2019: Export to a man page.\n</li></ul>\n\n<p>To activate such back-ends, either customize <code>org-export-backends</code> or\nload directly with \u2018<samp>(require 'ox-man)</samp>\u2019.  On successful load, the\nback-end adds new keys in the export dispatcher (see <a href=\"https://orgmode.org/org.html#The-Export-Dispatcher\">The Export Dispatcher</a>).\n</p>\n<p>Follow the comment section of such files, for example, \u2018<samp>ox-man.el</samp>\u2019,\nfor usage and configuration details.\n</p>\n"}, {"id": "1317AdvancedExportConfiguration", "content": "\n<span id=\"Advanced-Export-Configuration\"></span>\n<span id=\"Advanced-Export-Configuration-1\"></span><h3 class=\"section\">13.17 Advanced Export Configuration</h3>\n\n\n\n<span id=\"Export-hooks\"></span><span id=\"Export-hooks-1\"></span><h4 class=\"subheading\">Export hooks</h4>\n\n<span id=\"index-org_002dexport_002dbefore_002dprocessing_002dhook\"></span>\n<span id=\"index-org_002dexport_002dbefore_002dparsing_002dhook\"></span>\n<p>The export process executes two hooks before the actual exporting\nbegins.  The first hook, <code>org-export-before-processing-hook</code>, runs\nbefore any expansions of macros, Babel code, and include keywords in\nthe buffer.  The second hook, <code>org-export-before-parsing-hook</code>, runs\nbefore the buffer is parsed.\n</p>\n<p>Functions added to these hooks are called with a single argument: the\nexport back-end actually used, as a symbol.  You may use them for\nheavy duty structural modifications of the document.  For example, you\ncan remove every headline in the buffer during export like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-headline-removal (backend)\n  \"Remove all headlines in the current buffer.\nBACKEND is the export back-end being used, as a symbol.\"\n  (org-map-entries\n   (lambda () (delete-region (point) (line-beginning-position 2)))))\n\n(add-hook 'org-export-before-parsing-hook #'my-headline-removal)\n</pre></div>\n\n<span id=\"Filters\"></span><span id=\"Filters-1\"></span><h4 class=\"subheading\">Filters</h4>\n\n<span id=\"index-Filters_002c-exporting\"></span>\n<p>Filters are lists of functions to be applied to certain parts for\na given back-end.  The output from the first function in the filter is\npassed on to the next function in the filter.  The final output is the\noutput from the final function in the filter.\n</p>\n<p>The Org export process has many filter sets applicable to different\ntypes of objects, plain text, parse trees, export options, and final\noutput formats.  The filters are named after the element type or\nobject type: <code>org-export-filter-TYPE-functions</code>, where <var>TYPE</var>\nis the type targeted by the filter.  Valid types are:\n</p>\n<table>\n<tbody><tr><td width=\"33%\">body</td><td width=\"33%\">bold</td><td width=\"33%\">babel-call</td></tr>\n<tr><td width=\"33%\">center-block</td><td width=\"33%\">clock</td><td width=\"33%\">code</td></tr>\n<tr><td width=\"33%\">diary-sexp</td><td width=\"33%\">drawer</td><td width=\"33%\">dynamic-block</td></tr>\n<tr><td width=\"33%\">entity</td><td width=\"33%\">example-block</td><td width=\"33%\">export-block</td></tr>\n<tr><td width=\"33%\">export-snippet</td><td width=\"33%\">final-output</td><td width=\"33%\">fixed-width</td></tr>\n<tr><td width=\"33%\">footnote-definition</td><td width=\"33%\">footnote-reference</td><td width=\"33%\">headline</td></tr>\n<tr><td width=\"33%\">horizontal-rule</td><td width=\"33%\">inline-babel-call</td><td width=\"33%\">inline-src-block</td></tr>\n<tr><td width=\"33%\">inlinetask</td><td width=\"33%\">italic</td><td width=\"33%\">item</td></tr>\n<tr><td width=\"33%\">keyword</td><td width=\"33%\">latex-environment</td><td width=\"33%\">latex-fragment</td></tr>\n<tr><td width=\"33%\">line-break</td><td width=\"33%\">link</td><td width=\"33%\">node-property</td></tr>\n<tr><td width=\"33%\">options</td><td width=\"33%\">paragraph</td><td width=\"33%\">parse-tree</td></tr>\n<tr><td width=\"33%\">plain-list</td><td width=\"33%\">plain-text</td><td width=\"33%\">planning</td></tr>\n<tr><td width=\"33%\">property-drawer</td><td width=\"33%\">quote-block</td><td width=\"33%\">radio-target</td></tr>\n<tr><td width=\"33%\">section</td><td width=\"33%\">special-block</td><td width=\"33%\">src-block</td></tr>\n<tr><td width=\"33%\">statistics-cookie</td><td width=\"33%\">strike-through</td><td width=\"33%\">subscript</td></tr>\n<tr><td width=\"33%\">superscript</td><td width=\"33%\">table</td><td width=\"33%\">table-cell</td></tr>\n<tr><td width=\"33%\">table-row</td><td width=\"33%\">target</td><td width=\"33%\">timestamp</td></tr>\n<tr><td width=\"33%\">underline</td><td width=\"33%\">verbatim</td><td width=\"33%\">verse-block</td></tr>\n</tbody></table>\n\n<p>Here is an example filter that replaces non-breaking spaces <code>&nbsp;</code> in the\nOrg buffer with \u2018<samp>~</samp>\u2019 for the LaTeX back-end.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-latex-filter-nobreaks (text backend info)\n  \"Ensure \\\"&nbsp;\\\" are properly handled in LaTeX export.\"\n  (when (org-export-derived-backend-p backend 'latex)\n    (replace-regexp-in-string \"&nbsp;\" \"~\" text)))\n\n(add-to-list 'org-export-filter-plain-text-functions\n             'my-latex-filter-nobreaks)\n</pre></div>\n\n<p>A filter requires three arguments: the code to be transformed, the\nname of the back-end, and some optional information about the export\nprocess.  The third argument can be safely ignored.  Note the use of\n<code>org-export-derived-backend-p</code> predicate that tests for <em>latex</em>\nback-end or any other back-end, such as <em>beamer</em>, derived from\n<em>latex</em>.\n</p>\n<span id=\"Defining-filters-for-individual-files\"></span><span id=\"Defining-filters-for-individual-files-1\"></span><h4 class=\"subheading\">Defining filters for individual files</h4>\n\n<p>The Org export can filter not just for back-ends, but also for\nspecific files through the \u2018<samp>BIND</samp>\u2019 keyword.  Here is an example with\ntwo filters; one removes brackets from time stamps, and the other\nremoves strike-through text.  The filter functions are defined in\na code block in the same Org file, which is a handy location for\ndebugging.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BIND: org-export-filter-timestamp-functions (tmp-f-timestamp)\n#+BIND: org-export-filter-strike-through-functions (tmp-f-strike-through)\n#+BEGIN_SRC emacs-lisp :exports results :results none\n  (defun tmp-f-timestamp (s backend info)\n    (replace-regexp-in-string \"&amp;[lg]t;\\\\|[][]\" \"\" s))\n  (defun tmp-f-strike-through (s backend info) \"\")\n#+END_SRC\n</pre></div>\n\n<span id=\"Extending-an-existing-back_002dend\"></span><span id=\"Extending-an-existing-back_002dend-1\"></span><h4 class=\"subheading\">Extending an existing back-end</h4>\n\n<p>Some parts of the conversion process can be extended for certain\nelements so as to introduce a new or revised translation.  That is how\nthe HTML export back-end was extended to handle Markdown format.  The\nextensions work seamlessly so any aspect of filtering not done by the\nextended back-end is handled by the original back-end.  Of all the\nexport customization in Org, extending is very powerful as it operates\nat the parser level.\n</p>\n<p>For this example, make the <em>ascii</em> back-end display the language used\nin a source code block.  Also make it display only when some attribute\nis non-<code>nil</code>, like the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ATTR_ASCII: :language t\n</pre></div>\n\n\n<p>Then extend ASCII back-end with a custom \u201cmy-ascii\u201d back-end.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-ascii-src-block (src-block contents info)\n  \"Transcode a SRC-BLOCK element from Org to ASCII.\nCONTENTS is nil.  INFO is a plist used as a communication\nchannel.\"\n  (if (not (org-export-read-attribute :attr_ascii src-block :language))\n      (org-export-with-backend 'ascii src-block contents info)\n    (concat\n     (format \",--[ %s ]--\\n%s`----\"\n             (org-element-property :language src-block)\n             (replace-regexp-in-string\n              \"^\" \"| \"\n              (org-element-normalize-string\n               (org-export-format-code-default src-block info)))))))\n\n(org-export-define-derived-backend 'my-ascii 'ascii\n  :translate-alist '((src-block . my-ascii-src-block)))\n</pre></div>\n\n<p>The <code>my-ascii-src-block</code> function looks at the attribute above the\ncurrent element.  If not true, hands over to <em>ascii</em> back-end.  If\ntrue, which it is in this example, it creates a box around the code\nand leaves room for the inserting a string for language.  The last\nform creates the new back-end that springs to action only when\ntranslating <code>src-block</code> type elements.\n</p>\n<p>To use the newly defined back-end, evaluate the following from an Org\nbuffer:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-export-to-buffer 'my-ascii \"*Org MY-ASCII Export*\")\n</pre></div>\n\n<p>Further steps to consider would be an interactive function,\nself-installing an item in the export dispatcher menu, and other\nuser-friendly improvements.\n</p>\n"}, {"id": "1318ExportinForeignBuffers", "content": "\n<span id=\"Export-in-Foreign-Buffers\"></span>\n<span id=\"Export-in-Foreign-Buffers-1\"></span><h3 class=\"section\">13.18 Export in Foreign Buffers</h3>\n\n<p>The export back-ends in Org often include commands to convert selected\nregions.  A convenient feature of this in-place conversion is that the\nexported output replaces the original source.  Here are such\nfunctions:\n</p>\n<dl compact=\"compact\">\n<dt><code>org-ascii-convert-region-to-ascii</code></dt>\n<dd><span id=\"index-org_002dascii_002dconvert_002dregion_002dto_002dascii\"></span>\n<p>Convert the selected region into ASCII.\n</p>\n</dd>\n<dt><code>org-ascii-convert-region-to-utf8</code></dt>\n<dd><span id=\"index-org_002dascii_002dconvert_002dregion_002dto_002dutf8\"></span>\n<p>Convert the selected region into UTF-8.\n</p>\n</dd>\n<dt><code>org-html-convert-region-to-html</code></dt>\n<dd><span id=\"index-org_002dhtml_002dconvert_002dregion_002dto_002dhtml\"></span>\n<p>Convert the selected region into HTML.\n</p>\n</dd>\n<dt><code>org-latex-convert-region-to-latex</code></dt>\n<dd><span id=\"index-org_002dlatex_002dconvert_002dregion_002dto_002dlatex\"></span>\n<p>Convert the selected region into LaTeX.\n</p>\n</dd>\n<dt><code>org-texinfo-convert-region-to-texinfo</code></dt>\n<dd><span id=\"index-org_002dtexinfo_002dconvert_002dregion_002dto_002dtexinfo\"></span>\n<p>Convert the selected region into Texinfo.\n</p>\n</dd>\n<dt><code>org-md-convert-region-to-md</code></dt>\n<dd><span id=\"index-org_002dmd_002dconvert_002dregion_002dto_002dmd\"></span>\n<p>Convert the selected region into Markdown.\n</p></dd>\n</dl>\n\n<p>In-place conversions are particularly handy for quick conversion of\ntables and lists in foreign buffers.  For example, in an HTML buffer,\nwrite a list in Org syntax, select it, and convert it to HTML with\n<kbd>M-x org-html-convert-region-to-html</kbd>.\n</p>\n\n\n"}, {"id": "13181ExportingtominimalHTML", "content": "\n<span id=\"Bare-HTML\"></span>\n<span id=\"Exporting-to-minimal-HTML\"></span><h4 class=\"subsection\">13.18.1 Exporting to minimal HTML</h4>\n\n<p>If you want to output a minimal HTML file, with no CSS, no Javascript,\nno preamble or postamble, here are the variable you would need to set:\n</p>\n<span id=\"index-org_002dhtml_002dhead-2\"></span>\n<span id=\"index-org_002dhtml_002dhead_002dextra-2\"></span>\n<span id=\"index-org_002dhtml_002dhead_002dinclude_002ddefault_002dstyle-1\"></span>\n<span id=\"index-org_002dhtml_002dhead_002dinclude_002dscripts\"></span>\n<span id=\"index-org_002dhtml_002dpreamble-1\"></span>\n<span id=\"index-org_002dhtml_002dpostamble-1\"></span>\n<span id=\"index-org_002dhtml_002duse_002dinfojs\"></span>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-html-head \"\"\n      org-html-head-extra \"\"\n      org-html-head-include-default-style nil\n      org-html-head-include-scripts nil\n      org-html-preamble nil\n      org-html-postamble nil\n      org-html-use-infojs nil)\n</pre></div>\n\n"}, {"id": "14Publishing", "content": "\n<span id=\"Publishing\"></span>\n<span id=\"Publishing-1\"></span><h2 class=\"chapter\">14 Publishing</h2>\n\n<span id=\"index-publishing\"></span>\n\n<p>Org includes a publishing management system that allows you to\nconfigure automatic HTML conversion of <em>projects</em> composed of\ninterlinked Org files.  You can also configure Org to automatically\nupload your exported HTML pages and related attachments, such as\nimages and source code files, to a web server.\n</p>\n<p>You can also use Org to convert files into PDF, or even combine HTML\nand PDF conversion so that files are available in both formats on the\nserver.\n</p>\n<p>Publishing has been contributed to Org by David O\u2019Toole.\n</p>\n\n\n"}, {"id": "141Configuration", "content": "\n<span id=\"Configuration\"></span>\n<span id=\"Configuration-1\"></span><h3 class=\"section\">14.1 Configuration</h3>\n\n<p>Publishing needs significant configuration to specify files,\ndestination and many other properties of a project.\n</p>\n\n\n"}, {"id": "1411Thevariablecodeorgpublishprojectalistcode", "content": "\n<span id=\"Project-alist\"></span>\n<span id=\"The-variable-org_002dpublish_002dproject_002dalist\"></span><h4 class=\"subsection\">14.1.1 The variable <code>org-publish-project-alist</code></h4>\n\n<span id=\"index-projects_002c-for-publishing\"></span>\n\n<span id=\"index-org_002dpublish_002dproject_002dalist\"></span>\n<p>Publishing is configured almost entirely through setting the value of\none variable, called <code>org-publish-project-alist</code>.  Each element of the\nlist configures one project, and may be in one of the two following\nforms:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(\"project-name\" :property value :property value ...)\n</pre></div>\n\n<p>i.e., a well-formed property list with alternating keys and values,\nor:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(\"project-name\" :components (\"project-name\" \"project-name\" ...))\n</pre></div>\n\n<p>In both cases, projects are configured by specifying property values.\nA project defines the set of files that are to be published, as well\nas the publishing configuration to use when publishing those files.\nWhen a project takes the second form listed above, the individual\nmembers of the <code>:components</code> property are taken to be sub-projects,\nwhich group together files requiring different publishing options.\nWhen you publish such a \u201cmeta-project\u201d, all the components are also\npublished, in the sequence given.\n</p>\n"}, {"id": "1412Sourcesanddestinationsforfiles", "content": "\n<span id=\"Sources-and-destinations\"></span>\n<span id=\"Sources-and-destinations-for-files\"></span><h4 class=\"subsection\">14.1.2 Sources and destinations for files</h4>\n\n<span id=\"index-directories_002c-for-publishing\"></span>\n\n<p>Most properties are optional, but some should always be set.  In\nparticular, Org needs to know where to look for source files, and\nwhere to put published files.\n</p>\n<dl compact=\"compact\">\n<dt><code>:base-directory</code></dt>\n<dd><p>Directory containing publishing source files.\n</p>\n</dd>\n<dt><code>:publishing-directory</code></dt>\n<dd><p>Directory where output files are published.  You can directly\npublish to a webserver using a file name syntax appropriate for the\nEmacs tramp package.  Or you can publish to a local directory and\nuse external tools to upload your website (see <a href=\"https://orgmode.org/org.html#Uploading-Files\">Uploading Files</a>).\n</p>\n</dd>\n<dt><code>:preparation-function</code></dt>\n<dd><p>Function or list of functions to be called before starting the\npublishing process, for example, to run \u2018<samp>make</samp>\u2019 for updating files to\nbe published.  Each preparation function is called with a single\nargument, the project property list.\n</p>\n</dd>\n<dt><code>:completion-function</code></dt>\n<dd><p>Function or list of functions called after finishing the publishing\nprocess, for example, to change permissions of the resulting files.\nEach completion function is called with a single argument, the\nproject property list.\n</p></dd>\n</dl>\n\n"}, {"id": "1413Selectingfiles", "content": "\n<span id=\"Selecting-files\"></span>\n<span id=\"Selecting-files-1\"></span><h4 class=\"subsection\">14.1.3 Selecting files</h4>\n\n<span id=\"index-files_002c-selecting-for-publishing\"></span>\n\n<p>By default, all files with extension \u2018<samp>.org</samp>\u2019 in the base directory are\nconsidered part of the project.  This can be modified by setting the\nfollowing properties\n</p>\n<dl compact=\"compact\">\n<dt><code>:base-extension</code></dt>\n<dd><p>Extension\u2014without the dot\u2014of source files.  This actually is\na regular expression.  Set this to the symbol <code>any</code> if you want to\nget all files in <code>:base-directory</code>, even without extension.\n</p>\n</dd>\n<dt><code>:exclude</code></dt>\n<dd><p>Regular expression to match file names that should not be published,\neven though they have been selected on the basis of their extension.\n</p>\n</dd>\n<dt><code>:include</code></dt>\n<dd><p>List of files to be included regardless of <code>:base-extension</code> and\n<code>:exclude</code>.\n</p>\n</dd>\n<dt><code>:recursive</code></dt>\n<dd><p>Non-<code>nil</code> means, check base-directory recursively for files to\npublish.\n</p></dd>\n</dl>\n\n"}, {"id": "1414Publishingaction", "content": "\n<span id=\"Publishing-action\"></span>\n<span id=\"Publishing-action-1\"></span><h4 class=\"subsection\">14.1.4 Publishing action</h4>\n\n<span id=\"index-action_002c-for-publishing\"></span>\n\n<p>Publishing means that a file is copied to the destination directory\nand possibly transformed in the process.  The default transformation\nis to export Org files as HTML files, and this is done by the function\n<code>org-html-publish-to-html</code> which calls the HTML exporter (see <a href=\"https://orgmode.org/org.html#HTML-Export\">HTML Export</a>).  But you can also publish your content as PDF files using\n<code>org-latex-publish-to-pdf</code>, or as ASCII, Texinfo, etc., using the\ncorresponding functions.\n</p>\n<p>If you want to publish the Org file as an \u2018<samp>.org</samp>\u2019 file but with\n<em>archived</em>, <em>commented</em>, and <em>tag-excluded</em> trees removed, use\n<code>org-org-publish-to-org</code>.  This produces \u2018<samp>file.org</samp>\u2019 and puts it in the\npublishing directory.  If you want a htmlized version of this file,\nset the parameter <code>:htmlized-source</code> to <code>t</code>.  It produces\n\u2018<samp>file.org.html</samp>\u2019 in the publishing directory<a id=\"DOCF142\" href=\"https://orgmode.org/org.html#FOOT142\"><sup>142</sup></a>.\n</p>\n<p>Other files like images only need to be copied to the publishing\ndestination; for this you can use <code>org-publish-attachment</code>.  For\nnon-Org files, you always need to specify the publishing function:\n</p>\n<dl compact=\"compact\">\n<dt><code>:publishing-function</code></dt>\n<dd><p>Function executing the publication of a file.  This may also be\na list of functions, which are all called in turn.\n</p>\n</dd>\n<dt><code>:htmlized-source</code></dt>\n<dd><p>Non-<code>nil</code> means, publish htmlized source.\n</p></dd>\n</dl>\n\n<p>The function must accept three arguments: a property list containing\nat least a <code>:publishing-directory</code> property, the name of the file to\nbe published, and the path to the publishing directory of the output\nfile.  It should take the specified file, make the necessary\ntransformation, if any, and place the result into the destination\nfolder.\n</p>\n"}, {"id": "1415Optionsfortheexporters", "content": "\n<span id=\"Publishing-options\"></span>\n<span id=\"Options-for-the-exporters\"></span><h4 class=\"subsection\">14.1.5 Options for the exporters</h4>\n\n<span id=\"index-options_002c-for-publishing\"></span>\n<span id=\"index-publishing-options\"></span>\n\n<p>The property list can be used to set many export options for the HTML\nand LaTeX exporters.  In most cases, these properties correspond to\nuser variables in Org.  The table below lists these properties along\nwith the variable they belong to.  See the documentation string for\nthe respective variable for details.\n</p>\n<span id=\"index-org_002dpublish_002dproject_002dalist-1\"></span>\n<p>When a property is given a value in <code>org-publish-project-alist</code>, its\nsetting overrides the value of the corresponding user variable, if\nany, during publishing.  Options set within a file (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>), however, override everything.\n</p>\n<span id=\"Generic-properties\"></span><span id=\"Generic-properties-1\"></span><h4 class=\"subsubheading\">Generic properties</h4>\n\n<table>\n<tbody><tr><td><code>:archived-trees</code></td><td><code>org-export-with-archived-trees</code></td></tr>\n<tr><td><code>:exclude-tags</code></td><td><code>org-export-exclude-tags</code></td></tr>\n<tr><td><code>:headline-levels</code></td><td><code>org-export-headline-levels</code></td></tr>\n<tr><td><code>:language</code></td><td><code>org-export-default-language</code></td></tr>\n<tr><td><code>:preserve-breaks</code></td><td><code>org-export-preserve-breaks</code></td></tr>\n<tr><td><code>:section-numbers</code></td><td><code>org-export-with-section-numbers</code></td></tr>\n<tr><td><code>:select-tags</code></td><td><code>org-export-select-tags</code></td></tr>\n<tr><td><code>:with-author</code></td><td><code>org-export-with-author</code></td></tr>\n<tr><td><code>:with-broken-links</code></td><td><code>org-export-with-broken-links</code></td></tr>\n<tr><td><code>:with-clocks</code></td><td><code>org-export-with-clocks</code></td></tr>\n<tr><td><code>:with-creator</code></td><td><code>org-export-with-creator</code></td></tr>\n<tr><td><code>:with-date</code></td><td><code>org-export-with-date</code></td></tr>\n<tr><td><code>:with-drawers</code></td><td><code>org-export-with-drawers</code></td></tr>\n<tr><td><code>:with-email</code></td><td><code>org-export-with-email</code></td></tr>\n<tr><td><code>:with-emphasize</code></td><td><code>org-export-with-emphasize</code></td></tr>\n<tr><td><code>:with-fixed-width</code></td><td><code>org-export-with-fixed-width</code></td></tr>\n<tr><td><code>:with-footnotes</code></td><td><code>org-export-with-footnotes</code></td></tr>\n<tr><td><code>:with-latex</code></td><td><code>org-export-with-latex</code></td></tr>\n<tr><td><code>:with-planning</code></td><td><code>org-export-with-planning</code></td></tr>\n<tr><td><code>:with-priority</code></td><td><code>org-export-with-priority</code></td></tr>\n<tr><td><code>:with-properties</code></td><td><code>org-export-with-properties</code></td></tr>\n<tr><td><code>:with-special-strings</code></td><td><code>org-export-with-special-strings</code></td></tr>\n<tr><td><code>:with-sub-superscript</code></td><td><code>org-export-with-sub-superscripts</code></td></tr>\n<tr><td><code>:with-tables</code></td><td><code>org-export-with-tables</code></td></tr>\n<tr><td><code>:with-tags</code></td><td><code>org-export-with-tags</code></td></tr>\n<tr><td><code>:with-tasks</code></td><td><code>org-export-with-tasks</code></td></tr>\n<tr><td><code>:with-timestamps</code></td><td><code>org-export-with-timestamps</code></td></tr>\n<tr><td><code>:with-title</code></td><td><code>org-export-with-title</code></td></tr>\n<tr><td><code>:with-toc</code></td><td><code>org-export-with-toc</code></td></tr>\n<tr><td><code>:with-todo-keywords</code></td><td><code>org-export-with-todo-keywords</code></td></tr>\n</tbody></table>\n\n<span id=\"ASCII-specific-properties\"></span><span id=\"ASCII-specific-properties-1\"></span><h4 class=\"subsubheading\">ASCII specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:ascii-bullets</code></td><td><code>org-ascii-bullets</code></td></tr>\n<tr><td><code>:ascii-caption-above</code></td><td><code>org-ascii-caption-above</code></td></tr>\n<tr><td><code>:ascii-charset</code></td><td><code>org-ascii-charset</code></td></tr>\n<tr><td><code>:ascii-global-margin</code></td><td><code>org-ascii-global-margin</code></td></tr>\n<tr><td><code>:ascii-format-drawer-function</code></td><td><code>org-ascii-format-drawer-function</code></td></tr>\n<tr><td><code>:ascii-format-inlinetask-function</code></td><td><code>org-ascii-format-inlinetask-function</code></td></tr>\n<tr><td><code>:ascii-headline-spacing</code></td><td><code>org-ascii-headline-spacing</code></td></tr>\n<tr><td><code>:ascii-indented-line-width</code></td><td><code>org-ascii-indented-line-width</code></td></tr>\n<tr><td><code>:ascii-inlinetask-width</code></td><td><code>org-ascii-inlinetask-width</code></td></tr>\n<tr><td><code>:ascii-inner-margin</code></td><td><code>org-ascii-inner-margin</code></td></tr>\n<tr><td><code>:ascii-links-to-notes</code></td><td><code>org-ascii-links-to-notes</code></td></tr>\n<tr><td><code>:ascii-list-margin</code></td><td><code>org-ascii-list-margin</code></td></tr>\n<tr><td><code>:ascii-paragraph-spacing</code></td><td><code>org-ascii-paragraph-spacing</code></td></tr>\n<tr><td><code>:ascii-quote-margin</code></td><td><code>org-ascii-quote-margin</code></td></tr>\n<tr><td><code>:ascii-table-keep-all-vertical-lines</code></td><td><code>org-ascii-table-keep-all-vertical-lines</code></td></tr>\n<tr><td><code>:ascii-table-use-ascii-art</code></td><td><code>org-ascii-table-use-ascii-art</code></td></tr>\n<tr><td><code>:ascii-table-widen-columns</code></td><td><code>org-ascii-table-widen-columns</code></td></tr>\n<tr><td><code>:ascii-text-width</code></td><td><code>org-ascii-text-width</code></td></tr>\n<tr><td><code>:ascii-underline</code></td><td><code>org-ascii-underline</code></td></tr>\n<tr><td><code>:ascii-verbatim-format</code></td><td><code>org-ascii-verbatim-format</code></td></tr>\n</tbody></table>\n\n<span id=\"Beamer-specific-properties\"></span><span id=\"Beamer-specific-properties-1\"></span><h4 class=\"subsubheading\">Beamer specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:beamer-theme</code></td><td><code>org-beamer-theme</code></td></tr>\n<tr><td><code>:beamer-column-view-format</code></td><td><code>org-beamer-column-view-format</code></td></tr>\n<tr><td><code>:beamer-environments-extra</code></td><td><code>org-beamer-environments-extra</code></td></tr>\n<tr><td><code>:beamer-frame-default-options</code></td><td><code>org-beamer-frame-default-options</code></td></tr>\n<tr><td><code>:beamer-outline-frame-options</code></td><td><code>org-beamer-outline-frame-options</code></td></tr>\n<tr><td><code>:beamer-outline-frame-title</code></td><td><code>org-beamer-outline-frame-title</code></td></tr>\n<tr><td><code>:beamer-subtitle-format</code></td><td><code>org-beamer-subtitle-format</code></td></tr>\n</tbody></table>\n\n<span id=\"HTML-specific-properties\"></span><span id=\"HTML-specific-properties-1\"></span><h4 class=\"subsubheading\">HTML specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:html-allow-name-attribute-in-anchors</code></td><td><code>org-html-allow-name-attribute-in-anchors</code></td></tr>\n<tr><td><code>:html-checkbox-type</code></td><td><code>org-html-checkbox-type</code></td></tr>\n<tr><td><code>:html-container</code></td><td><code>org-html-container-element</code></td></tr>\n<tr><td><code>:html-divs</code></td><td><code>org-html-divs</code></td></tr>\n<tr><td><code>:html-doctype</code></td><td><code>org-html-doctype</code></td></tr>\n<tr><td><code>:html-extension</code></td><td><code>org-html-extension</code></td></tr>\n<tr><td><code>:html-footnote-format</code></td><td><code>org-html-footnote-format</code></td></tr>\n<tr><td><code>:html-footnote-separator</code></td><td><code>org-html-footnote-separator</code></td></tr>\n<tr><td><code>:html-footnotes-section</code></td><td><code>org-html-footnotes-section</code></td></tr>\n<tr><td><code>:html-format-drawer-function</code></td><td><code>org-html-format-drawer-function</code></td></tr>\n<tr><td><code>:html-format-headline-function</code></td><td><code>org-html-format-headline-function</code></td></tr>\n<tr><td><code>:html-format-inlinetask-function</code></td><td><code>org-html-format-inlinetask-function</code></td></tr>\n<tr><td><code>:html-head-extra</code></td><td><code>org-html-head-extra</code></td></tr>\n<tr><td><code>:html-head-include-default-style</code></td><td><code>org-html-head-include-default-style</code></td></tr>\n<tr><td><code>:html-head-include-scripts</code></td><td><code>org-html-head-include-scripts</code></td></tr>\n<tr><td><code>:html-head</code></td><td><code>org-html-head</code></td></tr>\n<tr><td><code>:html-home/up-format</code></td><td><code>org-html-home/up-format</code></td></tr>\n<tr><td><code>:html-html5-fancy</code></td><td><code>org-html-html5-fancy</code></td></tr>\n<tr><td><code>:html-indent</code></td><td><code>org-html-indent</code></td></tr>\n<tr><td><code>:html-infojs-options</code></td><td><code>org-html-infojs-options</code></td></tr>\n<tr><td><code>:html-infojs-template</code></td><td><code>org-html-infojs-template</code></td></tr>\n<tr><td><code>:html-inline-image-rules</code></td><td><code>org-html-inline-image-rules</code></td></tr>\n<tr><td><code>:html-inline-images</code></td><td><code>org-html-inline-images</code></td></tr>\n<tr><td><code>:html-link-home</code></td><td><code>org-html-link-home</code></td></tr>\n<tr><td><code>:html-link-org-files-as-html</code></td><td><code>org-html-link-org-files-as-html</code></td></tr>\n<tr><td><code>:html-link-up</code></td><td><code>org-html-link-up</code></td></tr>\n<tr><td><code>:html-link-use-abs-url</code></td><td><code>org-html-link-use-abs-url</code></td></tr>\n<tr><td><code>:html-mathjax-options</code></td><td><code>org-html-mathjax-options</code></td></tr>\n<tr><td><code>:html-mathjax-template</code></td><td><code>org-html-mathjax-template</code></td></tr>\n<tr><td><code>:html-equation-reference-format</code></td><td><code>org-html-equation-reference-format</code></td></tr>\n<tr><td><code>:html-metadata-timestamp-format</code></td><td><code>org-html-metadata-timestamp-format</code></td></tr>\n<tr><td><code>:html-postamble-format</code></td><td><code>org-html-postamble-format</code></td></tr>\n<tr><td><code>:html-postamble</code></td><td><code>org-html-postamble</code></td></tr>\n<tr><td><code>:html-preamble-format</code></td><td><code>org-html-preamble-format</code></td></tr>\n<tr><td><code>:html-preamble</code></td><td><code>org-html-preamble</code></td></tr>\n<tr><td><code>:html-self-link-headlines</code></td><td><code>org-html-self-link-headlines</code></td></tr>\n<tr><td><code>:html-table-align-individual-field</code></td><td><code>de{org-html-table-align-individual-fields</code></td></tr>\n<tr><td><code>:html-table-attributes</code></td><td><code>org-html-table-default-attributes</code></td></tr>\n<tr><td><code>:html-table-caption-above</code></td><td><code>org-html-table-caption-above</code></td></tr>\n<tr><td><code>:html-table-data-tags</code></td><td><code>org-html-table-data-tags</code></td></tr>\n<tr><td><code>:html-table-header-tags</code></td><td><code>org-html-table-header-tags</code></td></tr>\n<tr><td><code>:html-table-row-tags</code></td><td><code>org-html-table-row-tags</code></td></tr>\n<tr><td><code>:html-table-use-header-tags-for-first-column</code></td><td><code>org-html-table-use-header-tags-for-first-column</code></td></tr>\n<tr><td><code>:html-tag-class-prefix</code></td><td><code>org-html-tag-class-prefix</code></td></tr>\n<tr><td><code>:html-text-markup-alist</code></td><td><code>org-html-text-markup-alist</code></td></tr>\n<tr><td><code>:html-todo-kwd-class-prefix</code></td><td><code>org-html-todo-kwd-class-prefix</code></td></tr>\n<tr><td><code>:html-toplevel-hlevel</code></td><td><code>org-html-toplevel-hlevel</code></td></tr>\n<tr><td><code>:html-use-infojs</code></td><td><code>org-html-use-infojs</code></td></tr>\n<tr><td><code>:html-validation-link</code></td><td><code>org-html-validation-link</code></td></tr>\n<tr><td><code>:html-viewport</code></td><td><code>org-html-viewport</code></td></tr>\n<tr><td><code>:html-wrap-src-lines</code></td><td><code>org-html-wrap-src-lines</code></td></tr>\n<tr><td><code>:html-xml-declaration</code></td><td><code>org-html-xml-declaration</code></td></tr>\n</tbody></table>\n\n<span id=\"LaTeX-specific-properties\"></span><span id=\"LaTeX-specific-properties-1\"></span><h4 class=\"subsubheading\">LaTeX specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:latex-active-timestamp-format</code></td><td><code>org-latex-active-timestamp-format</code></td></tr>\n<tr><td><code>:latex-caption-above</code></td><td><code>org-latex-caption-above</code></td></tr>\n<tr><td><code>:latex-classes</code></td><td><code>org-latex-classes</code></td></tr>\n<tr><td><code>:latex-class</code></td><td><code>org-latex-default-class</code></td></tr>\n<tr><td><code>:latex-compiler</code></td><td><code>org-latex-compiler</code></td></tr>\n<tr><td><code>:latex-default-figure-position</code></td><td><code>org-latex-default-figure-position</code></td></tr>\n<tr><td><code>:latex-default-table-environment</code></td><td><code>org-latex-default-table-environment</code></td></tr>\n<tr><td><code>:latex-default-table-mode</code></td><td><code>org-latex-default-table-mode</code></td></tr>\n<tr><td><code>:latex-diary-timestamp-format</code></td><td><code>org-latex-diary-timestamp-format</code></td></tr>\n<tr><td><code>:latex-footnote-defined-format</code></td><td><code>org-latex-footnote-defined-format</code></td></tr>\n<tr><td><code>:latex-footnote-separator</code></td><td><code>org-latex-footnote-separator</code></td></tr>\n<tr><td><code>:latex-format-drawer-function</code></td><td><code>org-latex-format-drawer-function</code></td></tr>\n<tr><td><code>:latex-format-headline-function</code></td><td><code>org-latex-format-headline-function</code></td></tr>\n<tr><td><code>:latex-format-inlinetask-function</code></td><td><code>org-latex-format-inlinetask-function</code></td></tr>\n<tr><td><code>:latex-hyperref-template</code></td><td><code>org-latex-hyperref-template</code></td></tr>\n<tr><td><code>:latex-image-default-height</code></td><td><code>org-latex-image-default-height</code></td></tr>\n<tr><td><code>:latex-image-default-option</code></td><td><code>org-latex-image-default-option</code></td></tr>\n<tr><td><code>:latex-image-default-width</code></td><td><code>org-latex-image-default-width</code></td></tr>\n<tr><td><code>:latex-images-centered</code></td><td><code>org-latex-images-centered</code></td></tr>\n<tr><td><code>:latex-inactive-timestamp-format</code></td><td><code>org-latex-inactive-timestamp-format</code></td></tr>\n<tr><td><code>:latex-inline-image-rules</code></td><td><code>org-latex-inline-image-rules</code></td></tr>\n<tr><td><code>:latex-link-with-unknown-path-format</code></td><td><code>org-latex-link-with-unknown-path-format</code></td></tr>\n<tr><td><code>:latex-listings-langs</code></td><td><code>org-latex-listings-langs</code></td></tr>\n<tr><td><code>:latex-listings-options</code></td><td><code>org-latex-listings-options</code></td></tr>\n<tr><td><code>:latex-listings</code></td><td><code>org-latex-listings</code></td></tr>\n<tr><td><code>:latex-minted-langs</code></td><td><code>org-latex-minted-langs</code></td></tr>\n<tr><td><code>:latex-minted-options</code></td><td><code>org-latex-minted-options</code></td></tr>\n<tr><td><code>:latex-prefer-user-labels</code></td><td><code>org-latex-prefer-user-labels</code></td></tr>\n<tr><td><code>:latex-subtitle-format</code></td><td><code>org-latex-subtitle-format</code></td></tr>\n<tr><td><code>:latex-subtitle-separate</code></td><td><code>org-latex-subtitle-separate</code></td></tr>\n<tr><td><code>:latex-table-scientific-notation</code></td><td><code>org-latex-table-scientific-notation</code></td></tr>\n<tr><td><code>:latex-tables-booktabs</code></td><td><code>org-latex-tables-booktabs</code></td></tr>\n<tr><td><code>:latex-tables-centered</code></td><td><code>org-latex-tables-centered</code></td></tr>\n<tr><td><code>:latex-text-markup-alist</code></td><td><code>org-latex-text-markup-alist</code></td></tr>\n<tr><td><code>:latex-title-command</code></td><td><code>org-latex-title-command</code></td></tr>\n<tr><td><code>:latex-toc-command</code></td><td><code>org-latex-toc-command</code></td></tr>\n</tbody></table>\n\n<span id=\"Markdown-specific-properties\"></span><span id=\"Markdown-specific-properties-1\"></span><h4 class=\"subsubheading\">Markdown specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:md-footnote-format</code></td><td><code>org-md-footnote-format</code></td></tr>\n<tr><td><code>:md-footnotes-section</code></td><td><code>org-md-footnotes-section</code></td></tr>\n<tr><td><code>:md-headline-style</code></td><td><code>org-md-headline-style</code></td></tr>\n</tbody></table>\n\n<span id=\"ODT-specific-properties\"></span><span id=\"ODT-specific-properties-1\"></span><h4 class=\"subsubheading\">ODT specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:odt-content-template-file</code></td><td><code>org-odt-content-template-file</code></td></tr>\n<tr><td><code>:odt-display-outline-level</code></td><td><code>org-odt-display-outline-level</code></td></tr>\n<tr><td><code>:odt-fontify-srcblocks</code></td><td><code>org-odt-fontify-srcblocks</code></td></tr>\n<tr><td><code>:odt-format-drawer-function</code></td><td><code>org-odt-format-drawer-function</code></td></tr>\n<tr><td><code>:odt-format-headline-function</code></td><td><code>org-odt-format-headline-function</code></td></tr>\n<tr><td><code>:odt-format-inlinetask-function</code></td><td><code>org-odt-format-inlinetask-function</code></td></tr>\n<tr><td><code>:odt-inline-formula-rules</code></td><td><code>org-odt-inline-formula-rules</code></td></tr>\n<tr><td><code>:odt-inline-image-rules</code></td><td><code>org-odt-inline-image-rules</code></td></tr>\n<tr><td><code>:odt-pixels-per-inch</code></td><td><code>org-odt-pixels-per-inch</code></td></tr>\n<tr><td><code>:odt-styles-file</code></td><td><code>org-odt-styles-file</code></td></tr>\n<tr><td><code>:odt-table-styles</code></td><td><code>org-odt-table-styles</code></td></tr>\n<tr><td><code>:odt-use-date-fields</code></td><td><code>org-odt-use-date-fields</code></td></tr>\n</tbody></table>\n\n<span id=\"Texinfo-specific-properties\"></span><span id=\"Texinfo-specific-properties-1\"></span><h4 class=\"subsubheading\">Texinfo specific properties</h4>\n\n<table>\n<tbody><tr><td><code>:texinfo-active-timestamp-format</code></td><td><code>org-texinfo-active-timestamp-format</code></td></tr>\n<tr><td><code>:texinfo-classes</code></td><td><code>org-texinfo-classes</code></td></tr>\n<tr><td><code>:texinfo-class</code></td><td><code>org-texinfo-default-class</code></td></tr>\n<tr><td><code>:texinfo-table-default-markup</code></td><td><code>org-texinfo-table-default-markup</code></td></tr>\n<tr><td><code>:texinfo-diary-timestamp-format</code></td><td><code>org-texinfo-diary-timestamp-format</code></td></tr>\n<tr><td><code>:texinfo-filename</code></td><td><code>org-texinfo-filename</code></td></tr>\n<tr><td><code>:texinfo-format-drawer-function</code></td><td><code>org-texinfo-format-drawer-function</code></td></tr>\n<tr><td><code>:texinfo-format-headline-function</code></td><td><code>org-texinfo-format-headline-function</code></td></tr>\n<tr><td><code>:texinfo-format-inlinetask-function</code></td><td><code>org-texinfo-format-inlinetask-function</code></td></tr>\n<tr><td><code>:texinfo-inactive-timestamp-format</code></td><td><code>org-texinfo-inactive-timestamp-format</code></td></tr>\n<tr><td><code>:texinfo-link-with-unknown-path-format</code></td><td><code>org-texinfo-link-with-unknown-path-format</code></td></tr>\n<tr><td><code>:texinfo-node-description-column</code></td><td><code>org-texinfo-node-description-column</code></td></tr>\n<tr><td><code>:texinfo-table-scientific-notation</code></td><td><code>org-texinfo-table-scientific-notation</code></td></tr>\n<tr><td><code>:texinfo-tables-verbatim</code></td><td><code>org-texinfo-tables-verbatim</code></td></tr>\n<tr><td><code>:texinfo-text-markup-alist</code></td><td><code>org-texinfo-text-markup-alist</code></td></tr>\n</tbody></table>\n\n"}, {"id": "1416Publishinglinks", "content": "\n<span id=\"Publishing-links\"></span>\n<span id=\"Publishing-links-1\"></span><h4 class=\"subsection\">14.1.6 Publishing links</h4>\n\n<span id=\"index-links_002c-publishing\"></span>\n\n<p>To create a link from one Org file to another, you would use something\nlike \u2018<samp>[[file:foo.org][The foo]]</samp>\u2019 or simply \u2018<samp>[[file:foo.org]]</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#External-Links\">External Links</a>).  When\npublished, this link becomes a link to \u2018<samp>foo.html</samp>\u2019.  You can thus\ninterlink the pages of your \u201cOrg web\u201d project and the links will work\nas expected when you publish them to HTML.  If you also publish the\nOrg source file and want to link to it, use an \u2018<samp>http</samp>\u2019 link instead of\na \u2018<samp>file:</samp>\u2019 link, because \u2018<samp>file</samp>\u2019 links are converted to link to the\ncorresponding \u2018<samp>.html</samp>\u2019 file.\n</p>\n<p>You may also link to related files, such as images.  Provided you are\ncareful with relative file names, and provided you have also\nconfigured Org to upload the related files, these links will work too.\nSee <a href=\"https://orgmode.org/org.html#Complex-example\">Complex example</a>, for an example of this\nusage.\n</p>\n<p>Eventually, links between published documents can contain some search\noptions (see <a href=\"https://orgmode.org/org.html#Search-Options\">Search Options</a>), which will be resolved to\nthe appropriate location in the linked file.  For example, once\npublished to HTML, the following links all point to a dedicated anchor\nin \u2018<samp>foo.html</samp>\u2019.\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[file:foo.org::*heading]]\n[[file:foo.org::#custom-id]]\n[[file:foo.org::target]]\n</pre></div>\n\n"}, {"id": "1417Generatingasitemap", "content": "\n<span id=\"Site-map\"></span>\n<span id=\"Generating-a-sitemap\"></span><h4 class=\"subsection\">14.1.7 Generating a sitemap</h4>\n\n<span id=\"index-sitemap_002c-of-published-pages\"></span>\n\n<p>The following properties may be used to control publishing of\na map of files for a given project.\n</p>\n<dl compact=\"compact\">\n<dt><code>:auto-sitemap</code></dt>\n<dd><p>When non-<code>nil</code>, publish a sitemap during\n<code>org-publish-current-project</code> or <code>org-publish-all</code>.\n</p>\n</dd>\n<dt><code>:sitemap-filename</code></dt>\n<dd><p>Filename for output of sitemap.  Defaults to \u2018<samp>sitemap.org</samp>\u2019, which\nbecomes \u2018<samp>sitemap.html</samp>\u2019.\n</p>\n</dd>\n<dt><code>:sitemap-title</code></dt>\n<dd><p>Title of sitemap page.  Defaults to name of file.\n</p>\n</dd>\n<dt><code>:sitemap-format-entry</code></dt>\n<dd><span id=\"index-org_002dpublish_002dfind_002ddate\"></span>\n<span id=\"index-org_002dpublish_002dfind_002dproperty\"></span>\n<span id=\"index-org_002dpublish_002dfind_002dtitle\"></span>\n<p>With this option one can tell how a site-map entry is formatted in\nthe site-map.  It is a function called with three arguments: the\nfile or directory name relative to base directory of the project,\nthe site-map style and the current project.  It is expected to\nreturn a string.  Default value turns file names into links and use\ndocument titles as descriptions.  For specific formatting needs, one\ncan use <code>org-publish-find-date</code>, <code>org-publish-find-title</code> and\n<code>org-publish-find-property</code>, to retrieve additional information\nabout published documents.\n</p>\n</dd>\n<dt><code>:sitemap-function</code></dt>\n<dd><p>Plug-in function to use for generation of the sitemap.  It is called\nwith two arguments: the title of the site-map and a representation\nof the files and directories involved in the project as a nested\nlist, which can further be transformed using <code>org-list-to-generic</code>,\n<code>org-list-to-subtree</code> and alike.  Default value generates a plain\nlist of links to all files in the project.\n</p>\n</dd>\n<dt><code>:sitemap-sort-folders</code></dt>\n<dd><p>Where folders should appear in the sitemap.  Set this to <code>first</code>\n(default) or <code>last</code> to display folders first or last, respectively.\nWhen set to <code>ignore</code>, folders are ignored altogether.  Any other\nvalue mixes files and folders.  This variable has no effect when\nsite-map style is <code>tree</code>.\n</p>\n</dd>\n<dt><code>:sitemap-sort-files</code></dt>\n<dd><p>How the files are sorted in the site map.  Set this to\n<code>alphabetically</code> (default), <code>chronologically</code> or\n<code>anti-chronologically</code>.  <code>chronologically</code> sorts the files with\nolder date first while <code>anti-chronologically</code> sorts the files with\nnewer date first.  <code>alphabetically</code> sorts the files alphabetically.\nThe date of a file is retrieved with <code>org-publish-find-date</code>.\n</p>\n</dd>\n<dt><code>:sitemap-ignore-case</code></dt>\n<dd><p>Should sorting be case-sensitive?  Default <code>nil</code>.\n</p>\n</dd>\n<dt><code>:sitemap-file-entry-format</code></dt>\n<dd><p>With this option one can tell how a sitemap\u2019s entry is formatted in\nthe sitemap.  This is a format string with some escape sequences:\n<code>%t</code> stands for the title of the file, <code>%a</code> stands for the author of\nthe file and <code>%d</code> stands for the date of the file.  The date is\nretrieved with the <code>org-publish-find-date</code> function and formatted\nwith <code>org-publish-sitemap-date-format</code>.  Default <code>%t</code>.\n</p>\n</dd>\n<dt><code>:sitemap-date-format</code></dt>\n<dd><p>Format string for the <code>format-time-string</code> function that tells how\na sitemap entry\u2019s date is to be formatted.  This property bypasses\n<code>org-publish-sitemap-date-format</code> which defaults to <code>%Y-%m-%d</code>.\n</p></dd>\n</dl>\n\n"}, {"id": "1418Generatinganindex", "content": "\n<span id=\"Generating-an-index\"></span>\n<span id=\"Generating-an-index-1\"></span><h4 class=\"subsection\">14.1.8 Generating an index</h4>\n\n<span id=\"index-index_002c-in-a-publishing-project\"></span>\n\n<p>Org mode can generate an index across the files of a publishing project.\n</p>\n<dl compact=\"compact\">\n<dt><code>:makeindex</code></dt>\n<dd><p>When non-<code>nil</code>, generate in index in the file \u2018<samp>theindex.org</samp>\u2019 and\npublish it as \u2018<samp>theindex.html</samp>\u2019.\n</p></dd>\n</dl>\n\n<p>The file is created when first publishing a project with the\n<code>:makeindex</code> set.  The file only contains a statement \u2018<samp>#+INCLUDE:\n\"theindex.inc\"</samp>\u2019.  You can then build around this include statement by\nadding a title, style information, etc.\n</p>\n<span id=\"index-INDEX_002c-keyword\"></span>\n<p>Index entries are specified with \u2018<samp>INDEX</samp>\u2019 keyword.  An entry that\ncontains an exclamation mark creates a sub item.\n</p>\n<div class=\"example\">\n<pre class=\"example\">*** Curriculum Vitae\n#+INDEX: CV\n#+INDEX: Application!CV\n</pre></div>\n\n"}, {"id": "142UploadingFiles", "content": "\n<span id=\"Uploading-Files\"></span>\n<span id=\"Uploading-Files-1\"></span><h3 class=\"section\">14.2 Uploading Files</h3>\n\n<span id=\"index-rsync\"></span>\n<span id=\"index-unison\"></span>\n\n<p>For those people already utilizing third party sync tools such as\nRsync or Unison, it might be preferable not to use the built-in remote\npublishing facilities of Org mode which rely heavily on Tramp.  Tramp,\nwhile very useful and powerful, tends not to be so efficient for\nmultiple file transfer and has been known to cause problems under\nheavy usage.\n</p>\n<p>Specialized synchronization utilities offer several advantages.  In\naddition to timestamp comparison, they also do content and\npermissions/attribute checks.  For this reason you might prefer to\npublish your web to a local directory\u2014possibly even <em>in place</em> with\nyour Org files\u2014and then use Unison or Rsync to do the\nsynchronization with the remote host.\n</p>\n<p>Since Unison, for example, can be configured as to which files to\ntransfer to a certain remote destination, it can greatly simplify the\nproject publishing definition.  Simply keep all files in the correct\nlocation, process your Org files with <code>org-publish</code> and let the\nsynchronization tool do the rest.  You do not need, in this scenario,\nto include attachments such as JPG, CSS or PNG files in the project\ndefinition since the third-party tool syncs them.\n</p>\n<p>Publishing to a local directory is also much faster than to a remote\none, so that you can afford more easily to republish entire projects.\nIf you set <code>org-publish-use-timestamps-flag</code> to <code>nil</code>, you gain the\nmain benefit of re-including any changed external files such as source\nexample files you might include with \u2018<samp>INCLUDE</samp>\u2019 keyword.  The timestamp\nmechanism in Org is not smart enough to detect if included files have\nbeen modified.\n</p>\n"}, {"id": "143SampleConfiguration", "content": "\n<span id=\"Sample-Configuration\"></span>\n<span id=\"Sample-Configuration-1\"></span><h3 class=\"section\">14.3 Sample Configuration</h3>\n\n<p>Below we provide two example configurations.  The first one is\na simple project publishing only a set of Org files.  The second\nexample is more complex, with a multi-component project.\n</p>\n\n\n"}, {"id": "1431Examplesimplepublishingconfiguration", "content": "\n<span id=\"Simple-example\"></span>\n<span id=\"Example_003a-simple-publishing-configuration\"></span><h4 class=\"subsection\">14.3.1 Example: simple publishing configuration</h4>\n\n<p>This example publishes a set of Org files to the \u2018<samp>public_html</samp>\u2019\ndirectory on the local machine.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-publish-project-alist\n      '((\"org\"\n         :base-directory \"~/org/\"\n         :publishing-function org-html-publish-to-html\n         :publishing-directory \"~/public_html\"\n         :section-numbers nil\n         :with-toc nil\n         :html-head \"&lt;link rel=\\\"stylesheet\\\"\n                    href=\\\"../other/mystyle.css\\\"\n                    type=\\\"text/css\\\"/&gt;\")))\n</pre></div>\n\n"}, {"id": "1432Examplecomplexpublishingconfiguration", "content": "\n<span id=\"Complex-example\"></span>\n<span id=\"Example_003a-complex-publishing-configuration\"></span><h4 class=\"subsection\">14.3.2 Example: complex publishing configuration</h4>\n\n<p>This more complicated example publishes an entire website, including\nOrg files converted to HTML, image files, Emacs Lisp source code, and\nstyle sheets.  The publishing directory is remote and private files\nare excluded.\n</p>\n<p>To ensure that links are preserved, care should be taken to replicate\nyour directory structure on the web server, and to use relative file\npaths.  For example, if your Org files are kept in \u2018<samp>~/org/</samp>\u2019 and your\npublishable images in \u2018<samp>~/images/</samp>\u2019, you would link to an image with\n</p>\n<div class=\"example\">\n<pre class=\"example\">file:../images/myimage.png\n</pre></div>\n\n\n<p>On the web server, the relative path to the image should be the same.\nYou can accomplish this by setting up an \u2018<samp>images/</samp>\u2019 folder in the right\nplace on the web server, and publishing images to it.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-publish-project-alist\n      '((\"orgfiles\"\n         :base-directory \"~/org/\"\n         :base-extension \"org\"\n         :publishing-directory \"/ssh:user@host:~/html/notebook/\"\n         :publishing-function org-html-publish-to-html\n         :exclude \"PrivatePage.org\" ;; regexp\n         :headline-levels 3\n         :section-numbers nil\n         :with-toc nil\n         :html-head \"&lt;link rel=\\\"stylesheet\\\"\n                  href=\\\"../other/mystyle.css\\\" type=\\\"text/css\\\"/&gt;\"\n         :html-preamble t)\n\n        (\"images\"\n         :base-directory \"~/images/\"\n         :base-extension \"jpg\\\\|gif\\\\|png\"\n         :publishing-directory \"/ssh:user@host:~/html/images/\"\n         :publishing-function org-publish-attachment)\n\n        (\"other\"\n         :base-directory \"~/other/\"\n         :base-extension \"css\\\\|el\"\n         :publishing-directory \"/ssh:user@host:~/html/other/\"\n         :publishing-function org-publish-attachment)\n        (\"website\" :components (\"orgfiles\" \"images\" \"other\"))))\n</pre></div>\n\n"}, {"id": "144TriggeringPublication", "content": "\n<span id=\"Triggering-Publication\"></span>\n<span id=\"Triggering-Publication-1\"></span><h3 class=\"section\">14.4 Triggering Publication</h3>\n\n<p>Once properly configured, Org can publish with the following commands:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-e P x</kbd> (<code>org-publish</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-P-x\"></span>\n<span id=\"index-org_002dpublish\"></span>\n<p>Prompt for a specific project and publish all files that belong to\nit.\n</p>\n</dd>\n<dt><kbd>C-c C-e P p</kbd> (<code>org-publish-current-project</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-P-p\"></span>\n<span id=\"index-org_002dpublish_002dcurrent_002dproject\"></span>\n<p>Publish the project containing the current file.\n</p>\n</dd>\n<dt><kbd>C-c C-e P f</kbd> (<code>org-publish-current-file</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-P-f\"></span>\n<span id=\"index-org_002dpublish_002dcurrent_002dfile\"></span>\n<p>Publish only the current file.\n</p>\n</dd>\n<dt><kbd>C-c C-e P a</kbd> (<code>org-publish-all</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002de-P-a\"></span>\n<span id=\"index-org_002dpublish_002dall\"></span>\n<p>Publish every project.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dpublish_002duse_002dtimestamps_002dflag\"></span>\n<p>Org uses timestamps to track when a file has changed.  The above\nfunctions normally only publish changed files.  You can override this\nand force publishing of all files by giving a prefix argument to any\nof the commands above, or by customizing the variable\n<code>org-publish-use-timestamps-flag</code>.  This may be necessary in\nparticular if files include other files via \u2018<samp>SETUPFILE</samp>\u2019 or \u2018<samp>INCLUDE</samp>\u2019\nkeywords.\n</p>\n"}, {"id": "15Citationhandling", "content": "\n<span id=\"Citation-handling\"></span>\n<span id=\"Citation-handling-1\"></span><h2 class=\"chapter\">15 Citation handling</h2>\n\n<span id=\"index-citation\"></span>\n\n<p>The \u2018<samp>oc.el</samp>\u2019 library provides tooling to handle citations in Org via\n\u201ccitation processors\u201d that offer some or all of the following\ncapabilities:\n</p>\n<dl compact=\"compact\">\n<dt>activate</dt>\n<dd><p>Fontification, tooltip preview, etc.\n</p></dd>\n<dt>follow</dt>\n<dd><p>At-point actions on citations via <code>org-open-at-point</code>.\n</p></dd>\n<dt>insert</dt>\n<dd><p>Add and edit citations via <code>org-cite-insert</code>.\n</p></dd>\n<dt>export</dt>\n<dd><p>Via different libraries for different target formats.\n</p></dd>\n</dl>\n\n<p>The user can configure these with <code>org-cite-activate-processor</code>,\n<code>org-cite-follow-processor</code>, <code>org-cite-insert-processor</code>, and\n<code>org-cite-export-processors</code> respectively.\n</p>\n<p>The included \u201cbasic\u201d processor provides all four capabilities.\n</p>\n\n\n"}, {"id": "151Citations", "content": "\n<span id=\"Citations\"></span>\n<span id=\"Citations-1\"></span><h3 class=\"section\">15.1 Citations</h3>\n\n<p>Before adding citations, first set one-or-more bibliographies, either\nglobally with <code>org-cite-global-bibliography</code>, or locally using one or\nmore \u201cbibliography\u201d keywords.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+bibliography: SomeFile.bib\n#+bibliography: /some/other/file.json\n#+bibliography: \"/some/file/with spaces/in its name.bib\"\n</pre></div>\n\n<span id=\"index-C_002dc-C_002dx-_0040\"></span>\n<span id=\"index-org_002dcite_002dinsert\"></span>\n<p>One can then insert and edit citations using <code>org-cite-insert</code>, called\nwith <kbd>C-c C-x @</kbd>.\n</p>\n<p>A <em>citation</em> requires one or more citation <em>key(s)</em>, elements\nidentifying a reference in the bibliography.\n</p>\n<ul>\n<li> Each citation is surrounded by brackets and uses the \u2018<samp>cite</samp>\u2019 type.\n\n</li><li> Each key starts with the character \u2018<samp>@</samp>\u2019.\n\n</li><li> Each key can be qualified by a <em>prefix</em> (e.g.&nbsp;\u201csee \u201d) and/or\na <em>suffix</em> (e.g.&nbsp;\u201cp.&nbsp;123\u201d), giving information useful or necessary\nfo the comprehension of the citation but not included in the\nreference.\n\n</li><li> A single citation can cite more than one reference ; the keys are\nseparated by semicolons ; the formatting of such citation groups is\nspecified by the style.\n\n</li><li> One can also specify a stylistic variation for the citations by\ninserting a \u2018<samp>/</samp>\u2019 and a style name between the \u2018<samp>cite</samp>\u2019 keyword and the\ncolon; this usually makes sense only for the author-year styles.\n</li></ul>\n\n<div class=\"example\">\n<pre class=\"example\">[cite/style:common prefix ;prefix @key suffix; ... ; common suffix]\n</pre></div>\n\n\n<p>The only mandatory elements are:\n</p>\n<ul>\n<li> The \u2018<samp>cite</samp>\u2019 keyword and the colon.\n</li><li> The \u2018<samp>@</samp>\u2019 character immediately preceding each key.\n</li><li> The brackets surrounding the citation(s) (group).\n</li></ul>\n\n"}, {"id": "152Citationexportprocessors", "content": "\n<span id=\"Citation-export-processors\"></span>\n<span id=\"Citation-export-processors-1\"></span><h3 class=\"section\">15.2 Citation export processors</h3>\n\n<p>Org currently includes the following export processors:\n</p>\n<ul>\n<li> Two processors can export to a variety of formats, including \u2018<samp>latex</samp>\u2019\n(and therefore \u2018<samp>pdf</samp>\u2019), \u2018<samp>html</samp>\u2019, \u2018<samp>odt</samp>\u2019 and plain (UTF8) text:\n\n<dl compact=\"compact\">\n<dt>basic</dt>\n<dd><p>a basic export processor, well adapted to situations\nwhere backward compatibility is not a requirement and formatting\nneeds are minimal;\n</p>\n</dd>\n<dt>csl</dt>\n<dd><p>this export processor uses format files written in <a href=\"https://en.wikipedia.org/wiki/Citation_Style_Language\">Citation\nStyle Language</a> via <a href=\"https://github.com/andras-simonyi/citeproc-el\">citeproc-el</a>;\n</p></dd>\n</dl>\n\n</li><li> In contrast, two other processors target LaTeX and LaTeX-derived\nformats exclusively:\n\n<dl compact=\"compact\">\n<dt>natbib</dt>\n<dd><p>this export processor uses BibTeX, the historical\nbibliographic processor used with LaTeX, thus allowing the use of\ndata and style files compatible with this processor (including\na large number of publishers\u2019 styles).  It uses citation commands\nimplemented in the LaTeX package \u2018<samp>natbib</samp>\u2019, allowing more stylistic\nvariants that LaTeX\u2019s \u2018<samp>\\cite</samp>\u2019 command.\n</p>\n</dd>\n<dt>biblatex</dt>\n<dd><p>this backend allows the use of data and formats\nprepared for BibLaTeX, an alternate bibliographic processor used\nwith LaTeX, which overcomes some serious BibTeX limitations, but\nhas not (yet?)&nbsp;been widely adopted by publishers.\n</p></dd>\n</dl>\n</li></ul>\n\n<p>The \u2018<samp>CITE_EXPORT</samp>\u2019 keyword specifies the export processor and the\ncitation (and possibly reference) style(s); for example (all arguments\nare optional)\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+cite_export: basic author author-year\n</pre></div>\n\n\n<p>specifies the \u201cbasic\u201d export processor with citations inserted as\nauthor\u2019s name and references indexed by author\u2019s names and year;\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+cite_export: csl /some/path/to/vancouver-brackets.csl\n</pre></div>\n\n\n<p>specifies the \u201ccsl\u201d processor and CSL style, which in this case\ndefines numeric citations and numeric references according to the\n\u2018<samp>Vancouver</samp>\u2019 specification (as style used in many medical journals),\nfollowing a typesetting variation putting citations between brackets;\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+cite_export: natbib kluwer\n</pre></div>\n\n\n<p>specifies the \u2018<samp>natbib</samp>\u2019 export processor with a label citation style\nconformant to the Harvard style and the specification of the\nWolkers-Kluwer publisher; since it relies on the <code>bibtex</code> processor of\nyour LaTeX installation, it won\u2019t export to anything but PDF.\n</p>\n"}, {"id": "16WorkingwithSourceCode", "content": "\n<span id=\"Working-with-Source-Code\"></span>\n<span id=\"Working-with-Source-Code-1\"></span><h2 class=\"chapter\">16 Working with Source Code</h2>\n\n<span id=\"index-source-code_002c-working-with\"></span>\n\n<p>Source code here refers to any plain text collection of computer\ninstructions, possibly with comments, written using a human-readable\nprogramming language.  Org can manage source code in an Org document\nwhen the source code is identified with begin and end markers.\nWorking with source code begins with identifying source code blocks.\nA source code block can be placed almost anywhere in an Org document;\nit is not restricted to the preamble or the end of the document.\nHowever, Org cannot manage a source code block if it is placed inside\nan Org comment or within a fixed width section.\n</p>\n<p>Here is an example source code block in the Emacs Lisp language:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp\n  (defun org-xor (a b)\n     \"Exclusive or.\"\n     (if a (not b) b))\n#+END_SRC\n</pre></div>\n\n<p>Source code blocks are one of many Org block types, which also include\n\u201ccenter\u201d, \u201ccomment\u201d, \u201cdynamic\u201d, \u201cexample\u201d, \u201cexport\u201d, \u201cquote\u201d,\n\u201cspecial\u201d, and \u201cverse\u201d.  This section pertains to blocks between\n\u2018<samp>#+BEGIN_SRC</samp>\u2019 and \u2018<samp>#+END_SRC</samp>\u2019.\n</p>\n<p>Details of Org\u2019s facilities for working with source code are described\nin the following sections.\n</p>\n\n\n"}, {"id": "161FeaturesOverview", "content": "\n<span id=\"Features-Overview\"></span>\n<span id=\"Features-Overview-1\"></span><h3 class=\"section\">16.1 Features Overview</h3>\n\n<p>Org can manage the source code in the block delimited by \u2018<samp>#+BEGIN_SRC</samp>\u2019\n\u2026 \u2018<samp>#+END_SRC</samp>\u2019 in several ways that can simplify housekeeping tasks\nessential to modern source code maintenance.  Org can edit, format,\nextract, export, and publish source code blocks.  Org can also compile\nand execute a source code block, then capture the results.  The Org\nmode literature sometimes refers to source code blocks as <em>live code</em>\nblocks because they can alter the content of the Org document or the\nmaterial that it exports.  Users can control the \u201cliveliness\u201d of each\nsource code block by tweaking the header arguments (see <a href=\"https://orgmode.org/org.html#Using-Header-Arguments\">Using Header Arguments</a>) for compiling, execution, extraction, and exporting.\n</p>\n<p>For editing and formatting a source code block, Org uses an\nappropriate Emacs major mode that includes features specifically\ndesigned for source code in that language.\n</p>\n<p>Org can extract one or more source code blocks and write them to one\nor more source files\u2014a process known as <em>tangling</em> in literate\nprogramming terminology.\n</p>\n<p>For exporting and publishing, Org\u2019s back-ends can format a source code\nblock appropriately, often with native syntax highlighting.\n</p>\n<p>For executing and compiling a source code block, the user can\nconfigure Org to select the appropriate compiler.  Org provides\nfacilities to collect the result of the execution or compiler output,\ninsert it into the Org document, and/or export it.  In addition to\ntext results, Org can insert links to other data types, including\naudio, video, and graphics.  Org can also link a compiler error\nmessage to the appropriate line in the source code block.\n</p>\n<p>An important feature of Org\u2019s management of source code blocks is the\nability to pass variables, functions, and results to one another using\na common syntax for source code blocks in any language.  Although most\nliterate programming facilities are restricted to one language or\nanother, Org\u2019s language-agnostic approach lets the literate programmer\nmatch each programming task with the appropriate computer language and\nto mix them all together in a single Org document.  This\ninteroperability among languages explains why Org\u2019s source code\nmanagement facility was named <em>Org Babel</em> by its originators, Eric\nSchulte and Dan Davison.\n</p>\n<p>Org mode fulfills the promise of easy verification and maintenance of\npublishing reproducible research by keeping text, data, code,\nconfiguration settings of the execution environment, the results of\nthe execution, and associated narratives, claims, references, and\ninternal and external links in a single Org document.\n</p>\n"}, {"id": "162StructureofCodeBlocks", "content": "\n<span id=\"Structure-of-Code-Blocks\"></span>\n<span id=\"Structure-of-Code-Blocks-1\"></span><h3 class=\"section\">16.2 Structure of Code Blocks</h3>\n\n<span id=\"index-code-block_002c-structure\"></span>\n<span id=\"index-source-code_002c-block-structure\"></span>\n<span id=\"index-NAME-keyword_002c-in-source-blocks\"></span>\n<span id=\"index-BEGIN_005fSRC-1\"></span>\n\n<p>Org offers two ways to structure source code in Org documents: in\na source code block, and directly inline.  Both specifications are\nshown below.\n</p>\n<p>A source code block conforms to this structure:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: &lt;name&gt;\n#+BEGIN_SRC &lt;language&gt; &lt;switches&gt; &lt;header arguments&gt;\n  &lt;body&gt;\n#+END_SRC\n</pre></div>\n\n<p>Do not be put-off by having to remember the source block syntax.  Org\nmode offers a command for wrapping existing text in a block (see\n<a href=\"https://orgmode.org/org.html#Structure-Templates\">Structure Templates</a>).  Org also works with other completion systems\nin Emacs, some of which predate Org and have custom domain-specific\nlanguages for defining templates.  Regular use of templates reduces\nerrors, increases accuracy, and maintains consistency.\n</p>\n<span id=\"index-source-code_002c-inline\"></span>\n<p>An inline code block conforms to this structure:\n</p>\n<div class=\"example\">\n<pre class=\"example\">src_&lt;language&gt;{&lt;body&gt;}\n</pre></div>\n\n\n<p>or\n</p>\n<div class=\"example\">\n<pre class=\"example\">src_&lt;language&gt;[&lt;header arguments&gt;]{&lt;body&gt;}\n</pre></div>\n\n\n<dl compact=\"compact\">\n<dt>\u2018<samp>#+NAME: &lt;name&gt;</samp>\u2019</dt>\n<dd><p>Optional.  Names the source block so it can be called, like\na function, from other source blocks or inline code to evaluate or\nto capture the results.  Code from other blocks, other files, and\nfrom table formulas (see <a href=\"https://orgmode.org/org.html#The-Spreadsheet\">The Spreadsheet</a>) can use the name to\nreference a source block.  This naming serves the same purpose as\nnaming Org tables.  Org mode requires unique names.  For duplicate\nnames, Org mode\u2019s behavior is undefined.\n</p>\n</dd>\n<dt>\u2018<samp>#+BEGIN_SRC</samp>\u2019 \u2026 \u2018<samp>#+END_SRC</samp>\u2019</dt>\n<dd><p>Mandatory.  They mark the start and end of a block that Org\nrequires.  The \u2018<samp>#+BEGIN_SRC</samp>\u2019 line takes additional arguments, as\ndescribed next.\n</p>\n</dd>\n<dt>\u2018<samp>&lt;language&gt;</samp>\u2019</dt>\n<dd><span id=\"index-language_002c-in-code-blocks\"></span>\n<p>Mandatory.  It is the identifier of the source code language in the\nblock.  See <a href=\"https://orgmode.org/org.html#Languages\">Languages</a>, for identifiers of supported languages.\n</p>\n</dd>\n<dt>\u2018<samp>&lt;switches&gt;</samp>\u2019</dt>\n<dd><span id=\"index-switches_002c-in-code-blocks\"></span>\n<p>Optional.  Switches provide finer control of the code execution,\nexport, and format (see the discussion of switches in <a href=\"https://orgmode.org/org.html#Literal-Examples\">Literal Examples</a>).\n</p>\n</dd>\n<dt>\u2018<samp>&lt;header arguments&gt;</samp>\u2019</dt>\n<dd><span id=\"index-header-arguments_002c-in-code-blocks\"></span>\n<p>Optional.  Heading arguments control many aspects of evaluation,\nexport and tangling of code blocks (see <a href=\"https://orgmode.org/org.html#Using-Header-Arguments\">Using Header Arguments</a>).\nUsing Org\u2019s properties feature, header arguments can be selectively\napplied to the entire buffer or specific sub-trees of the Org\ndocument.\n</p>\n</dd>\n<dt>\u2018<samp>&lt;body&gt;</samp>\u2019</dt>\n<dd><p>Source code in the dialect of the specified language identifier.\n</p></dd>\n</dl>\n\n"}, {"id": "163UsingHeaderArguments", "content": "\n<span id=\"Using-Header-Arguments\"></span>\n<span id=\"Using-Header-Arguments-1\"></span><h3 class=\"section\">16.3 Using Header Arguments</h3>\n\n<p>Org comes with many header arguments common to all languages.  New\nheader arguments are added for specific languages as they become\navailable for use in source code blocks.  A header argument is\nspecified with an initial colon followed by the argument\u2019s name in\nlowercase.\n</p>\n<p>Since header arguments can be set in several ways, Org prioritizes\nthem in case of overlaps or conflicts by giving local settings\na higher priority.  Header values in function calls, for example,\noverride header values from global defaults.\n</p>\n<span id=\"System_002dwide-header-arguments\"></span><span id=\"System_002dwide-header-arguments-1\"></span><h4 class=\"subheading\">System-wide header arguments</h4>\n\n<span id=\"index-org_002dbabel_002ddefault_002dheader_002dargs\"></span>\n\n<span id=\"index-org_002dbabel_002ddefault_002dheader_002dargs-1\"></span>\n<p>System-wide values of header arguments can be specified by customizing\nthe <code>org-babel-default-header-args</code> variable, which defaults to the\nfollowing values:\n</p>\n<div class=\"example\">\n<pre class=\"example\">:session    =&gt; \"none\"\n:results    =&gt; \"replace\"\n:exports    =&gt; \"code\"\n:cache      =&gt; \"no\"\n:noweb      =&gt; \"no\"\n</pre></div>\n\n<p>The example below sets \u2018<samp>:noweb</samp>\u2019 header arguments to \u2018<samp>yes</samp>\u2019, which makes\nOrg expand \u2018<samp>:noweb</samp>\u2019 references by default.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-babel-default-header-args\n      (cons '(:noweb . \"yes\")\n            (assq-delete-all :noweb org-babel-default-header-args)))\n</pre></div>\n\n<span id=\"index-language-specific-default-header-arguments\"></span>\n<span id=\"index-default-header-arguments-per-language\"></span>\n<p>Each language can have separate default header arguments by\ncustomizing the variable <code>org-babel-default-header-args:&lt;LANG&gt;</code>, where\n<var>&lt;LANG&gt;</var> is the name of the language.  For details, see the\nlanguage-specific online documentation at\n<a href=\"https://orgmode.org/worg/org-contrib/babel/\">https://orgmode.org/worg/org-contrib/babel/</a>.\n</p>\n<span id=\"Header-arguments-in-Org-mode-properties\"></span><span id=\"Header-arguments-in-Org-mode-properties-1\"></span><h4 class=\"subheading\">Header arguments in Org mode properties</h4>\n\n<p>For header arguments applicable to the buffer, use \u2018<samp>PROPERTY</samp>\u2019 keyword\nanywhere in the Org file (see <a href=\"https://orgmode.org/org.html#Property-Syntax\">Property Syntax</a>).\n</p>\n<p>The following example makes all the R code blocks execute in the same\nsession.  Setting \u2018<samp>:results</samp>\u2019 to \u2018<samp>silent</samp>\u2019 ignores the results of\nexecutions for all blocks, not just R code blocks; no results inserted\nfor any block.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+PROPERTY: header-args:R  :session *R*\n#+PROPERTY: header-args    :results silent\n</pre></div>\n\n<span id=\"index-org_002duse_002dproperty_002dinheritance-1\"></span>\n<p>Header arguments set through Org\u2019s property drawers (see <a href=\"https://orgmode.org/org.html#Property-Syntax\">Property Syntax</a>) apply at the sub-tree level on down.  Since these property\ndrawers can appear anywhere in the file hierarchy, Org uses outermost\ncall or source block to resolve the values.  Org ignores\n<code>org-use-property-inheritance</code> setting.\n</p>\n<p>In this example, \u2018<samp>:cache</samp>\u2019 defaults to \u2018<samp>yes</samp>\u2019 for all code blocks in the\nsub-tree.\n</p>\n<div class=\"example\">\n<pre class=\"example\">* sample header\n  :PROPERTIES:\n  :header-args:    :cache yes\n  :END:\n</pre></div>\n\n<span id=\"index-C_002dc-C_002dx-p-1\"></span>\n<span id=\"index-org_002dset_002dproperty-2\"></span>\n<p>Properties defined through <code>org-set-property</code> function, bound to\n<kbd>C-c C-x p</kbd>, apply to all active languages.  They override\nproperties set in <code>org-babel-default-header-args</code>.\n</p>\n<span id=\"index-language-specific-header-arguments-properties\"></span>\n<span id=\"index-header-arguments-per-language\"></span>\n<p>Language-specific header arguments are also read from properties\n\u2018<samp>header-args:&lt;LANG&gt;</samp>\u2019 where <var>&lt;LANG&gt;</var> is the language\nidentifier.  For example,\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Heading\n  :PROPERTIES:\n  :header-args:clojure:    :session *clojure-1*\n  :header-args:R:          :session *R*\n  :END:\n** Subheading\n  :PROPERTIES:\n  :header-args:clojure:    :session *clojure-2*\n  :END:\n</pre></div>\n\n<p>would force separate sessions for Clojure blocks in \u2018<samp>Heading</samp>\u2019 and\n\u2018<samp>Subheading</samp>\u2019, but use the same session for all R blocks.  Blocks in\n\u2018<samp>Subheading</samp>\u2019 inherit settings from \u2018<samp>Heading</samp>\u2019.\n</p>\n<span id=\"Code-block-specific-header-arguments\"></span><span id=\"Code-block-specific-header-arguments-1\"></span><h4 class=\"subheading\">Code block specific header arguments</h4>\n\n<p>Header arguments are most commonly set at the source code block level,\non the \u2018<samp>#+BEGIN_SRC</samp>\u2019 line.  Arguments set at this level take\nprecedence over those set in the <code>org-babel-default-header-args</code>\nvariable, and also those set as header properties.\n</p>\n<p>In the following example, setting \u2018<samp>:results</samp>\u2019 to \u2018<samp>silent</samp>\u2019 makes it\nignore results of the code execution.  Setting \u2018<samp>:exports</samp>\u2019 to \u2018<samp>code</samp>\u2019\nexports only the body of the code block to HTML or LaTeX.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: factorial\n#+BEGIN_SRC haskell :results silent :exports code :var n=0\n  fac 0 = 1\n  fac n = n * fac (n-1)\n#+END_SRC\n</pre></div>\n\n<p>The same header arguments in an inline code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">src_haskell[:exports both]{fac 5}\n</pre></div>\n\n\n<span id=\"index-HEADER_002c-keyword\"></span>\n<p>Code block header arguments can span multiple lines using \u2018<samp>#+HEADER:</samp>\u2019\non each line.  Note that Org currently accepts the plural spelling of\n\u2018<samp>#+HEADER:</samp>\u2019 only as a convenience for backward-compatibility.  It may\nbe removed at some point.\n</p>\n<p>Multi-line header arguments on an unnamed code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+HEADER: :var data1=1\n#+BEGIN_SRC emacs-lisp :var data2=2\n   (message \"data1:%S, data2:%S\" data1 data2)\n#+END_SRC\n\n#+RESULTS:\n: data1:1, data2:2\n</pre></div>\n\n<p>Multi-line header arguments on a named code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: named-block\n#+HEADER: :var data=2\n#+BEGIN_SRC emacs-lisp\n  (message \"data:%S\" data)\n#+END_SRC\n\n#+RESULTS: named-block\n  : data:2\n</pre></div>\n\n<span id=\"Header-arguments-in-function-calls\"></span><span id=\"Header-arguments-in-function-calls-1\"></span><h4 class=\"subheading\">Header arguments in function calls</h4>\n\n<p>Header arguments in function calls are the most specific and override\nall other settings in case of an overlap.  They get the highest\npriority.  Two \u2018<samp>#+CALL:</samp>\u2019 examples are shown below.  For the complete\nsyntax of \u2018<samp>CALL</samp>\u2019 keyword, see <a href=\"https://orgmode.org/org.html#Evaluating-Code-Blocks\">Evaluating Code Blocks</a>.\n</p>\n<p>In this example, \u2018<samp>:exports results</samp>\u2019 header argument is applied to the\nevaluation of the \u2018<samp>#+CALL:</samp>\u2019 line.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CALL: factorial(n=5) :exports results\n</pre></div>\n\n\n<p>In this example, \u2018<samp>:session special</samp>\u2019 header argument is applied to the\nevaluation of \u2018<samp>factorial</samp>\u2019 code block.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CALL: factorial[:session special](n=5)\n</pre></div>\n\n"}, {"id": "164EnvironmentofaCodeBlock", "content": "\n<span id=\"Environment-of-a-Code-Block\"></span>\n<span id=\"Environment-of-a-Code-Block-1\"></span><h3 class=\"section\">16.4 Environment of a Code Block</h3>\n\n\n\n<span id=\"Passing-arguments\"></span><span id=\"Passing-arguments-1\"></span><h4 class=\"subheading\">Passing arguments</h4>\n\n<span id=\"index-passing-arguments-to-code-blocks\"></span>\n<span id=\"index-arguments_002c-in-code-blocks\"></span>\n<span id=\"index-var_002c-header-argument\"></span>\n<p>Use \u2018<samp>var</samp>\u2019 for passing arguments to source code blocks.  The specifics\nof variables in code blocks vary by the source language and are\ncovered in the language-specific documentation.  The syntax for \u2018<samp>var</samp>\u2019,\nhowever, is the same for all languages.  This includes declaring\na variable, and assigning a default value.\n</p>\n<p>The following syntax is used to pass arguments to code blocks using\nthe \u2018<samp>var</samp>\u2019 header argument.\n</p>\n<div class=\"example\">\n<pre class=\"example\">:var NAME=ASSIGN\n</pre></div>\n\n\n<p><var>NAME</var> is the name of the variable bound in the code block\nbody.  <var>ASSIGN</var> is a literal value, such as a string,\na number, a reference to a table, a list, a literal example, another\ncode block\u2014with or without arguments\u2014or the results of evaluating\na code block.  <var>ASSIGN</var> may specify a filename for references\nto elements in a different file, using a \u2018<samp>:</samp>\u2019 to separate the filename\nfrom the reference.\n</p>\n<div class=\"example\">\n<pre class=\"example\">:var NAME=FILE:REFERENCE\n</pre></div>\n\n\n<p>Here are examples of passing values by reference:\n</p>\n<dl compact=\"compact\">\n<dt>table</dt>\n<dd><p>A table named with a \u2018<samp>NAME</samp>\u2019 keyword.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example-table\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n\n#+NAME: table-length\n#+BEGIN_SRC emacs-lisp :var table=example-table\n  (length table)\n#+END_SRC\n\n#+RESULTS: table-length\n: 4\n</pre></div>\n\n<p>When passing a table, you can treat specially the row, or the\ncolumn, containing labels for the columns, or the rows, in the\ntable.\n</p>\n<span id=\"index-colnames_002c-header-argument\"></span>\n<p>The \u2018<samp>colnames</samp>\u2019 header argument accepts \u2018<samp>yes</samp>\u2019, \u2018<samp>no</samp>\u2019, or \u2018<samp>nil</samp>\u2019 values.\nThe default value is \u2018<samp>nil</samp>\u2019: if an input table has column\nnames\u2014because the second row is a horizontal rule\u2014then Org\nremoves the column names, processes the table, puts back the column\nnames, and then writes the table to the results block.  Using \u2018<samp>yes</samp>\u2019,\nOrg does the same to the first row, even if the initial table does\nnot contain any horizontal rule.  When set to \u2018<samp>no</samp>\u2019, Org does not\npre-process column names at all.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: less-cols\n| a |\n|---|\n| b |\n| c |\n\n#+BEGIN_SRC python :var tab=less-cols :colnames nil\n  return [[val + '*' for val in row] for row in tab]\n#+END_SRC\n\n#+RESULTS:\n| a  |\n|----|\n| b* |\n| c* |\n</pre></div>\n\n<span id=\"index-rownames_002c-header-argument\"></span>\n<p>Similarly, the \u2018<samp>rownames</samp>\u2019 header argument can take two values: \u2018<samp>yes</samp>\u2019\nor \u2018<samp>no</samp>\u2019.  When set to \u2018<samp>yes</samp>\u2019, Org removes the first column, processes\nthe table, puts back the first column, and then writes the table to\nthe results block.  The default is \u2018<samp>no</samp>\u2019, which means Org does not\npre-process the first column.  Note that Emacs Lisp code blocks\nignore \u2018<samp>rownames</samp>\u2019 header argument because of the ease of\ntable-handling in Emacs.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: with-rownames\n| one | 1 | 2 | 3 | 4 |  5 |\n| two | 6 | 7 | 8 | 9 | 10 |\n\n#+BEGIN_SRC python :var tab=with-rownames :rownames yes\n  return [[val + 10 for val in row] for row in tab]\n#+END_SRC\n\n#+RESULTS:\n| one | 11 | 12 | 13 | 14 | 15 |\n| two | 16 | 17 | 18 | 19 | 20 |\n</pre></div>\n</dd>\n</dl>\n\n<p>To refer to a table in another file, join the filename and table name with\na colon, for example: \u2018<samp>:var table=other-file.org:example-table</samp>\u2019.\n</p>\n<dl compact=\"compact\">\n<dt>list</dt>\n<dd><p>A simple named list.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example-list\n- simple\n  - not\n  - nested\n- list\n\n#+BEGIN_SRC emacs-lisp :var x=example-list\n  (print x)\n#+END_SRC\n\n#+RESULTS:\n| simple | list |\n</pre></div>\n\n<p>Note that only the top level list items are passed along.  Nested\nlist items are ignored.\n</p>\n</dd>\n<dt>code block without arguments</dt>\n<dd><p>A code block name, as assigned by \u2018<samp>NAME</samp>\u2019 keyword from the example\nabove, optionally followed by parentheses.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp :var length=table-length()\n  (* 2 length)\n#+END_SRC\n\n#+RESULTS:\n: 8\n</pre></div>\n\n</dd>\n<dt>code block with arguments</dt>\n<dd><p>A code block name, as assigned by \u2018<samp>NAME</samp>\u2019 keyword, followed by\nparentheses and optional arguments passed within the parentheses.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: double\n#+BEGIN_SRC emacs-lisp :var input=8\n  (* 2 input)\n#+END_SRC\n\n#+RESULTS: double\n: 16\n\n#+NAME: squared\n#+BEGIN_SRC emacs-lisp :var input=double(input=1)\n  (* input input)\n#+END_SRC\n\n#+RESULTS: squared\n: 4\n</pre></div>\n\n</dd>\n<dt>literal example</dt>\n<dd><p>A literal example block named with a \u2018<samp>NAME</samp>\u2019 keyword.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: literal-example\n#+BEGIN_EXAMPLE\n  A literal example\n  on two lines\n#+END_EXAMPLE\n\n#+NAME: read-literal-example\n#+BEGIN_SRC emacs-lisp :var x=literal-example\n  (concatenate #'string x \" for you.\")\n#+END_SRC\n\n#+RESULTS: read-literal-example\n: A literal example\n: on two lines for you.\n</pre></div>\n</dd>\n</dl>\n\n<p>Indexing variable values enables referencing portions of a variable.\nIndexes are 0 based with negative values counting backwards from the\nend.  If an index is separated by commas then each subsequent section\nindexes as the next dimension.  Note that this indexing occurs\n<em>before</em> other table-related header arguments are applied, such as\n\u2018<samp>hlines</samp>\u2019, \u2018<samp>colnames</samp>\u2019 and \u2018<samp>rownames</samp>\u2019.  The following example assigns\nthe last cell of the first row the table \u2018<samp>example-table</samp>\u2019 to the\nvariable \u2018<samp>data</samp>\u2019:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example-table\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n\n#+BEGIN_SRC emacs-lisp :var data=example-table[0,-1]\n  data\n#+END_SRC\n\n#+RESULTS:\n: a\n</pre></div>\n\n<p>Two integers separated by a colon reference a range of variable\nvalues.  In that case the entire inclusive range is referenced.  For\nexample the following assigns the middle three rows of \u2018<samp>example-table</samp>\u2019\nto \u2018<samp>data</samp>\u2019.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example-table\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n| 5 | 3 |\n\n#+BEGIN_SRC emacs-lisp :var data=example-table[1:3]\n  data\n#+END_SRC\n\n#+RESULTS:\n| 2 | b |\n| 3 | c |\n| 4 | d |\n</pre></div>\n\n<p>To pick the entire range, use an empty index, or the single character\n\u2018<samp>*</samp>\u2019.  \u2018<samp>0:-1</samp>\u2019 does the same thing.  Example below shows how to\nreference the first column only.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example-table\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n\n#+BEGIN_SRC emacs-lisp :var data=example-table[,0]\n  data\n#+END_SRC\n\n#+RESULTS:\n| 1 | 2 | 3 | 4 |\n</pre></div>\n\n<p>Index referencing can be used for tables and code blocks.  Index\nreferencing can handle any number of dimensions.  Commas delimit\nmultiple dimensions, as shown below.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: 3D\n#+BEGIN_SRC emacs-lisp\n  '(((1  2  3)  (4  5  6)  (7  8  9))\n    ((10 11 12) (13 14 15) (16 17 18))\n    ((19 20 21) (22 23 24) (25 26 27)))\n#+END_SRC\n\n#+BEGIN_SRC emacs-lisp :var data=3D[1,,1]\n  data\n#+END_SRC\n\n#+RESULTS:\n| 11 | 14 | 17 |\n</pre></div>\n\n<p>Note that row names and column names are not removed prior to variable\nindexing.  You need to take them into account, even when \u2018<samp>colnames</samp>\u2019 or\n\u2018<samp>rownames</samp>\u2019 header arguments remove them.\n</p>\n<p>Emacs lisp code can also set the values for variables.  To\ndifferentiate a value from Lisp code, Org interprets any value\nstarting with \u2018<samp>(</samp>\u2019, \u2018<samp>[</samp>\u2019, \u2018<samp>'</samp>\u2019 or \u2018<samp>`</samp>\u2019 as Emacs Lisp code.  The result of\nevaluating that code is then assigned to the value of that variable.\nThe following example shows how to reliably query and pass the file\nname of the Org mode buffer to a code block using headers.  We need\nreliability here because the file\u2019s name could change once the code in\nthe block starts executing.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both\n  wc -w $filename\n#+END_SRC\n</pre></div>\n\n<p>Note that values read from tables and lists are not mistakenly\nevaluated as Emacs Lisp code, as illustrated in the following example.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: table\n| (a b c) |\n\n#+HEADER: :var data=table[0,0]\n#+BEGIN_SRC perl\n  $data\n#+END_SRC\n\n#+RESULTS:\n: (a b c)\n</pre></div>\n\n<span id=\"Using-sessions\"></span><span id=\"Using-sessions-1\"></span><h4 class=\"subheading\">Using sessions</h4>\n\n<span id=\"index-using-sessions-in-code-blocks\"></span>\n<span id=\"index-session_002c-header-argument\"></span>\n<p>Two code blocks can share the same environment.  The \u2018<samp>session</samp>\u2019 header\nargument is for running multiple source code blocks under one session.\nOrg runs code blocks with the same session name in the same\ninterpreter process.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>none</samp>\u2019</dt>\n<dd><p>Default.  Each code block gets a new interpreter process to execute.\nThe process terminates once the block is evaluated.\n</p>\n</dd>\n<dt><var>STRING</var></dt>\n<dd><p>Any string besides \u2018<samp>none</samp>\u2019 turns that string into the name of that\nsession.  For example, \u2018<samp>:session STRING</samp>\u2019 names it \u2018<samp>STRING</samp>\u2019.  If\n\u2018<samp>session</samp>\u2019 has no value, then the session name is derived from the\nsource language identifier.  Subsequent blocks with the same source\ncode language use the same session.  Depending on the language,\nstate variables, code from other blocks, and the overall interpreted\nenvironment may be shared.  Some interpreted languages support\nconcurrent sessions when subsequent source code language blocks\nchange session names.\n</p></dd>\n</dl>\n\n<p>Only languages that provide interactive evaluation can have session\nsupport.  Not all languages provide this support, such as C and ditaa.\nEven languages, such as Python and Haskell, that do support\ninteractive evaluation impose limitations on allowable language\nconstructs that can run interactively.  Org inherits those limitations\nfor those code blocks running in a session.\n</p>\n<span id=\"Choosing-a-working-directory\"></span><span id=\"Choosing-a-working-directory-1\"></span><h4 class=\"subheading\">Choosing a working directory</h4>\n\n<span id=\"index-working-directory_002c-in-a-code-block\"></span>\n<span id=\"index-dir_002c-header-argument\"></span>\n<span id=\"index-mkdirp_002c-header-argument\"></span>\n<p>The \u2018<samp>dir</samp>\u2019 header argument specifies the default directory during code\nblock execution.  If it is absent, then the directory associated with\nthe current buffer is used.  In other words, supplying \u2018<samp>:dir\nDIRECTORY</samp>\u2019 temporarily has the same effect as changing the current\ndirectory with <kbd>M-x cd <span class=\"key\">RET</span> DIRECTORY</kbd>, and then not setting\n\u2018<samp>dir</samp>\u2019.  Under the surface, \u2018<samp>dir</samp>\u2019 simply sets the value of the Emacs\nvariable <code>default-directory</code>.  Setting \u2018<samp>mkdirp</samp>\u2019 header argument to\na non-<code>nil</code> value creates the directory, if necessary.\n</p>\n<p>For example, to save the plot file in the \u2018<samp>Work/</samp>\u2019 folder of the home\ndirectory\u2014notice tilde is expanded:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC R :file myplot.png :dir ~/Work\n  matplot(matrix(rnorm(100), 10), type=\"l\")\n#+END_SRC\n</pre></div>\n\n<p>To evaluate the code block on a remote machine, supply a remote\ndirectory name using Tramp syntax.  For example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC R :file plot.png :dir /scp:dand@yakuba.princeton.edu:\n  plot(1:10, main=system(\"hostname\", intern=TRUE))\n#+END_SRC\n</pre></div>\n\n<p>Org first captures the text results as usual for insertion in the Org\nfile.  Then Org also inserts a link to the remote file, thanks to\nEmacs Tramp.  Org constructs the remote path to the file name from\n\u2018<samp>dir</samp>\u2019 and <code>default-directory</code>, as illustrated here:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[file:/scp:dand@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]\n</pre></div>\n\n\n<p>When \u2018<samp>dir</samp>\u2019 is used with \u2018<samp>session</samp>\u2019, Org sets the starting directory for\na new session.  But Org does not alter the directory of an already\nexisting session.\n</p>\n<p>Do not use \u2018<samp>dir</samp>\u2019 with \u2018<samp>:exports results</samp>\u2019 or with \u2018<samp>:exports both</samp>\u2019 to\navoid Org inserting incorrect links to remote files.  That is because\nOrg does not expand <code>default directory</code> to avoid some underlying\nportability issues.\n</p>\n<span id=\"Inserting-headers-and-footers\"></span><span id=\"Inserting-headers-and-footers-1\"></span><h4 class=\"subheading\">Inserting headers and footers</h4>\n\n<span id=\"index-headers_002c-in-code-blocks\"></span>\n<span id=\"index-footers_002c-in-code-blocks\"></span>\n<span id=\"index-prologue_002c-header-argument\"></span>\n<p>The \u2018<samp>prologue</samp>\u2019 header argument is for appending to the top of the code\nblock for execution, like a reset instruction.  For example, you may\nuse \u2018<samp>:prologue \"reset\"</samp>\u2019 in a Gnuplot code block or, for every such\nblock:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-to-list 'org-babel-default-header-args:gnuplot\n             '((:prologue . \"reset\")))\n\n</pre></div>\n\n<span id=\"index-epilogue_002c-header-argument\"></span>\n<p>Likewise, the value of the \u2018<samp>epilogue</samp>\u2019 header argument is for appending\nto the end of the code block for execution.\n</p>\n"}, {"id": "165EvaluatingCodeBlocks", "content": "\n<span id=\"Evaluating-Code-Blocks\"></span>\n<span id=\"Evaluating-Code-Blocks-1\"></span><h3 class=\"section\">16.5 Evaluating Code Blocks</h3>\n\n<span id=\"index-code-block_002c-evaluating\"></span>\n<span id=\"index-source-code_002c-evaluating\"></span>\n<span id=\"index-RESULTS_002c-keyword\"></span>\n\n<p>A note about security: With code evaluation comes the risk of harm.\nOrg safeguards by prompting for user\u2019s permission before executing any\ncode in the source block.  To customize this safeguard, or disable it,\nsee <a href=\"https://orgmode.org/org.html#Code-Evaluation-Security\">Code Evaluation Security</a>.\n</p>\n<span id=\"How-to-evaluate-source-code\"></span><span id=\"How-to-evaluate-source-code-1\"></span><h4 class=\"subheading\">How to evaluate source code</h4>\n\n<p>Org captures the results of the code block evaluation and inserts them\nin the Org file, right after the code block.  The insertion point is\nafter a newline and the \u2018<samp>RESULTS</samp>\u2019 keyword.  Org creates the \u2018<samp>RESULTS</samp>\u2019\nkeyword if one is not already there.\n</p>\n<p>By default, Org enables only Emacs Lisp code blocks for execution.\nSee <a href=\"https://orgmode.org/org.html#Languages\">Languages</a> to enable other languages.\n</p>\n<span id=\"index-C_002dc-C_002dc-17\"></span>\n<span id=\"index-C_002dc-C_002dv-e\"></span>\n<span id=\"index-org_002dbabel_002dexecute_002dsrc_002dblock\"></span>\n<p>Org provides many ways to execute code blocks.  <kbd>C-c C-c</kbd> or\n<kbd>C-c C-v e</kbd> with the point on a code block<a id=\"DOCF143\" href=\"https://orgmode.org/org.html#FOOT143\"><sup>143</sup></a> calls the\n<code>org-babel-execute-src-block</code> function, which executes the code in the\nblock, collects the results, and inserts them in the buffer.\n</p>\n<span id=\"index-CALL_002c-keyword\"></span>\n<span id=\"index-org_002dbabel_002dinline_002dresult_002dwrap\"></span>\n<p>By calling a named code block<a id=\"DOCF144\" href=\"https://orgmode.org/org.html#FOOT144\"><sup>144</sup></a> from an Org mode buffer or\na table.  Org can call the named code blocks from the current Org mode\nbuffer or from the \u201cLibrary of Babel\u201d (see <a href=\"https://orgmode.org/org.html#Library-of-Babel\">Library of Babel</a>).\n</p>\n<p>The syntax for \u2018<samp>CALL</samp>\u2019 keyword is:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CALL: &lt;name&gt;(&lt;arguments&gt;)\n#+CALL: &lt;name&gt;[&lt;inside header arguments&gt;](&lt;arguments&gt;) &lt;end header arguments&gt;\n</pre></div>\n\n<p>The syntax for inline named code blocks is:\n</p>\n<div class=\"example\">\n<pre class=\"example\">... call_&lt;name&gt;(&lt;arguments&gt;) ...\n... call_&lt;name&gt;[&lt;inside header arguments&gt;](&lt;arguments&gt;)[&lt;end header arguments&gt;] ...\n</pre></div>\n\n<p>When inline syntax is used, the result is wrapped based on the\nvariable <code>org-babel-inline-result-wrap</code>, which by default is set to\n<code>\"=%s=\"</code> to produce verbatim text suitable for markup.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>&lt;name&gt;</samp>\u2019</dt>\n<dd><p>This is the name of the code block (see <a href=\"https://orgmode.org/org.html#Structure-of-Code-Blocks\">Structure of Code Blocks</a>)\nto be evaluated in the current document.  If the block is located in\nanother file, start \u2018<samp>&lt;name&gt;</samp>\u2019 with the file name followed by\na colon.  For example, in order to execute a block named \u2018<samp>clear-data</samp>\u2019\nin \u2018<samp>file.org</samp>\u2019, you can write the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CALL: file.org:clear-data()\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>&lt;arguments&gt;</samp>\u2019</dt>\n<dd><p>Org passes arguments to the code block using standard function call\nsyntax.  For example, a \u2018<samp>#+CALL:</samp>\u2019 line that passes \u2018<samp>4</samp>\u2019 to a code\nblock named \u2018<samp>double</samp>\u2019, which declares the header argument \u2018<samp>:var n=2</samp>\u2019,\nwould be written as:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+CALL: double(n=4)\n</pre></div>\n\n\n<p>Note how this function call syntax is different from the header\nargument syntax.\n</p>\n</dd>\n<dt>\u2018<samp>&lt;inside header arguments&gt;</samp>\u2019</dt>\n<dd><p>Org passes inside header arguments to the named code block using the\nheader argument syntax.  Inside header arguments apply to code block\nevaluation.  For example, \u2018<samp>[:results output]</samp>\u2019 collects results\nprinted to stdout during code execution of that block.  Note how\nthis header argument syntax is different from the function call\nsyntax.\n</p>\n</dd>\n<dt>\u2018<samp>&lt;end header arguments&gt;</samp>\u2019</dt>\n<dd><p>End header arguments affect the results returned by the code block.\nFor example, \u2018<samp>:results html</samp>\u2019 wraps the results in a \u2018<samp>#+BEGIN_EXPORT\n  html</samp>\u2019 block before inserting the results in the Org buffer.\n</p></dd>\n</dl>\n\n<span id=\"Limit-code-block-evaluation\"></span><span id=\"Limit-code-block-evaluation-1\"></span><h4 class=\"subheading\">Limit code block evaluation</h4>\n\n<span id=\"index-eval_002c-header-argument\"></span>\n<span id=\"index-control-code-block-evaluation\"></span>\n<p>The \u2018<samp>eval</samp>\u2019 header argument can limit evaluation of specific code\nblocks and \u2018<samp>CALL</samp>\u2019 keyword.  It is useful for protection against\nevaluating untrusted code blocks by prompting for a confirmation.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>never</samp>\u2019 or \u2018<samp>no</samp>\u2019</dt>\n<dd><p>Org never evaluates the source code.\n</p>\n</dd>\n<dt>\u2018<samp>query</samp>\u2019</dt>\n<dd><p>Org prompts the user for permission to evaluate the source code.\n</p>\n</dd>\n<dt>\u2018<samp>never-export</samp>\u2019 or \u2018<samp>no-export</samp>\u2019</dt>\n<dd><p>Org does not evaluate the source code when exporting, yet the user\ncan evaluate it interactively.\n</p>\n</dd>\n<dt>\u2018<samp>query-export</samp>\u2019</dt>\n<dd><p>Org prompts the user for permission to evaluate the source code\nduring export.\n</p></dd>\n</dl>\n\n<p>If \u2018<samp>eval</samp>\u2019 header argument is not set, then Org determines whether to\nevaluate the source code from the <code>org-confirm-babel-evaluate</code>\nvariable (see <a href=\"https://orgmode.org/org.html#Code-Evaluation-Security\">Code Evaluation Security</a>).\n</p>\n<span id=\"Cache-results-of-evaluation\"></span><span id=\"Cache-results-of-evaluation-1\"></span><h4 class=\"subheading\">Cache results of evaluation</h4>\n\n<span id=\"index-cache_002c-header-argument\"></span>\n<span id=\"index-cache-results-of-code-evaluation\"></span>\n<p>The \u2018<samp>cache</samp>\u2019 header argument is for caching results of evaluating code\nblocks.  Caching results can avoid re-evaluating a code block that\nhave not changed since the previous run.  To benefit from the cache\nand avoid redundant evaluations, the source block must have a result\nalready present in the buffer, and neither the header\narguments\u2014including the value of \u2018<samp>var</samp>\u2019 references\u2014nor the text of\nthe block itself has changed since the result was last computed.  This\nfeature greatly helps avoid long-running calculations.  For some edge\ncases, however, the cached results may not be reliable.\n</p>\n<p>The caching feature is best for when code blocks are pure functions,\nthat is functions that return the same value for the same input\narguments (see <a href=\"https://orgmode.org/org.html#Environment-of-a-Code-Block\">Environment of a Code Block</a>), and that do not have\nside effects, and do not rely on external variables other than the\ninput arguments.  Functions that depend on a timer, file system\nobjects, and random number generators are clearly unsuitable for\ncaching.\n</p>\n<p>A note of warning: when \u2018<samp>cache</samp>\u2019 is used in a session, caching may\ncause unexpected results.\n</p>\n<p>When the caching mechanism tests for any source code changes, it does\nnot expand noweb style references (see <a href=\"https://orgmode.org/org.html#Noweb-Reference-Syntax\">Noweb Reference Syntax</a>).\n</p>\n<p>The \u2018<samp>cache</samp>\u2019 header argument can have one of two values: \u2018<samp>yes</samp>\u2019 or \u2018<samp>no</samp>\u2019.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>no</samp>\u2019</dt>\n<dd><p>Default.  No caching of results; code block evaluated every time.\n</p>\n</dd>\n<dt>\u2018<samp>yes</samp>\u2019</dt>\n<dd><p>Whether to run the code or return the cached results is determined\nby comparing the SHA1 hash value of the combined code block and\narguments passed to it.  This hash value is packed on the\n\u2018<samp>#+RESULTS:</samp>\u2019 line from previous evaluation.  When hash values match,\nOrg does not evaluate the code block.  When hash values mismatch,\nOrg evaluates the code block, inserts the results, recalculates the\nhash value, and updates \u2018<samp>#+RESULTS:</samp>\u2019 line.\n</p></dd>\n</dl>\n\n<p>In this example, both functions are cached.  But \u2018<samp>caller</samp>\u2019 runs only if\nthe result from \u2018<samp>random</samp>\u2019 has changed since the last run.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: random\n#+BEGIN_SRC R :cache yes\n  runif(1)\n#+END_SRC\n\n#+RESULTS[a2a72cd647ad44515fab62e144796432793d68e1]: random\n0.4659510825295\n\n#+NAME: caller\n#+BEGIN_SRC emacs-lisp :var x=random :cache yes\n  x\n#+END_SRC\n\n#+RESULTS[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller\n0.254227238707244\n</pre></div>\n\n"}, {"id": "166ResultsofEvaluation", "content": "\n<span id=\"Results-of-Evaluation\"></span>\n<span id=\"Results-of-Evaluation-1\"></span><h3 class=\"section\">16.6 Results of Evaluation</h3>\n\n<span id=\"index-code-block_002c-results-of-evaluation\"></span>\n<span id=\"index-source-code_002c-results-of-evaluation\"></span>\n\n<span id=\"index-results_002c-header-argument\"></span>\n<p>How Org handles results of a code block execution depends on many\nheader arguments working together.  The primary determinant, however,\nis the \u2018<samp>results</samp>\u2019 header argument.  It accepts four classes of options.\nEach code block can take only one option per class:\n</p>\n<dl compact=\"compact\">\n<dt>Collection</dt>\n<dd><p>For how the results should be collected from the code block;\n</p>\n</dd>\n<dt>Type</dt>\n<dd><p>For which type of result the code block will return; affects how Org\nprocesses and inserts results in the Org buffer;\n</p>\n</dd>\n<dt>Format</dt>\n<dd><p>For the result; affects how Org processes results;\n</p>\n</dd>\n<dt>Handling</dt>\n<dd><p>For inserting results once they are properly formatted.\n</p></dd>\n</dl>\n\n<span id=\"Collection\"></span><span id=\"Collection-1\"></span><h4 class=\"subheading\">Collection</h4>\n\n<p>Collection options specify the results.  Choose one of the options;\nthey are mutually exclusive.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>value</samp>\u2019</dt>\n<dd><p>Default for most Babel libraries<a id=\"DOCF145\" href=\"https://orgmode.org/org.html#FOOT145\"><sup>145</sup></a>.  Functional mode.  Org\ngets the value by wrapping the code in a function definition in the\nlanguage of the source block.  That is why when using \u2018<samp>:results\n  value</samp>\u2019, code should execute like a function and return a value.  For\nlanguages like Python, an explicit <code>return</code> statement is mandatory\nwhen using \u2018<samp>:results value</samp>\u2019.  Result is the value returned by the\nlast statement in the code block.\n</p>\n<p>When evaluating the code block in a session (see <a href=\"https://orgmode.org/org.html#Environment-of-a-Code-Block\">Environment of a Code Block</a>), Org passes the code to an interpreter running as an\ninteractive Emacs inferior process.  Org gets the value from the\nsource code interpreter\u2019s last statement output.  Org has to use\nlanguage-specific methods to obtain the value.  For example, from\nthe variable <code>_</code> in Ruby, and the value of <code>.Last.value</code> in R.\n</p>\n</dd>\n<dt>\u2018<samp>output</samp>\u2019</dt>\n<dd><p>Scripting mode.  Org passes the code to an external process running\nthe interpreter.  Org returns the contents of the standard output\nstream as text results.\n</p>\n<p>When using a session, Org passes the code to the interpreter running\nas an interactive Emacs inferior process.  Org concatenates any text\noutput from the interpreter and returns the collection as a result.\n</p></dd>\n</dl>\n\n<span id=\"Type\"></span><span id=\"Type-1\"></span><h4 class=\"subheading\">Type</h4>\n\n<p>Type tells what result types to expect from the execution of the code\nblock.  Choose one of the options; they are mutually exclusive.  The\ndefault behavior is to automatically determine the result type.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>table</samp>\u2019</dt>\n<dt>\u2018<samp>vector</samp>\u2019</dt>\n<dd><p>Interpret the results as an Org table.  If the result is a single\nvalue, create a table with one row and one column.  Usage example:\n\u2018<samp>:results value table</samp>\u2019.\n</p>\n<span id=\"index-hlines_002c-header-argument\"></span>\n<p>In-between each table row or below the table headings, sometimes\nresults have horizontal lines, which are also known as \u201chlines\u201d.\nThe \u2018<samp>hlines</samp>\u2019 argument with the default \u2018<samp>no</samp>\u2019 value strips such lines\nfrom the input table.  For most code, this is desirable, or else\nthose \u2018<samp>hline</samp>\u2019 symbols raise unbound variable errors.  A \u2018<samp>yes</samp>\u2019\naccepts such lines, as demonstrated in the following example.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: many-cols\n| a | b | c |\n|---+---+---|\n| d | e | f |\n|---+---+---|\n| g | h | i |\n\n#+NAME: no-hline\n#+BEGIN_SRC python :var tab=many-cols :hlines no\n  return tab\n#+END_SRC\n\n#+RESULTS: no-hline\n| a | b | c |\n| d | e | f |\n| g | h | i |\n\n#+NAME: hlines\n#+BEGIN_SRC python :var tab=many-cols :hlines yes\n  return tab\n#+END_SRC\n\n#+RESULTS: hlines\n| a | b | c |\n|---+---+---|\n| d | e | f |\n|---+---+---|\n| g | h | i |\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>list</samp>\u2019</dt>\n<dd><p>Interpret the results as an Org list.  If the result is a single\nvalue, create a list of one element.\n</p>\n</dd>\n<dt>\u2018<samp>scalar</samp>\u2019</dt>\n<dt>\u2018<samp>verbatim</samp>\u2019</dt>\n<dd><p>Interpret literally and insert as quoted text.  Do not create\na table.  Usage example: \u2018<samp>:results value verbatim</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>file</samp>\u2019</dt>\n<dd><p>Interpret as a filename.  Save the results of execution of the code\nblock to that file, then insert a link to it.  You can control both\nthe filename and the description associated to the link.\n</p>\n<span id=\"index-file_002c-header-argument\"></span>\n<span id=\"index-output_002ddir_002c-header-argument\"></span>\n<p>Org first tries to generate the filename from the value of the\n\u2018<samp>file</samp>\u2019 header argument and the directory specified using the\n\u2018<samp>output-dir</samp>\u2019 header arguments.  If \u2018<samp>output-dir</samp>\u2019 is not specified,\nOrg assumes it is the current directory.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC asymptote :results value file :file circle.pdf :output-dir img/\n  size(2cm);\n  draw(unitcircle);\n#+END_SRC\n</pre></div>\n\n<span id=\"index-file_002dext_002c-header-argument\"></span>\n<p>If \u2018<samp>file</samp>\u2019 header argument is missing, Org generates the base name of\nthe output file from the name of the code block, and its extension\nfrom the \u2018<samp>file-ext</samp>\u2019 header argument.  In that case, both the name\nand the extension are mandatory.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+name: circle\n#+BEGIN_SRC asymptote :results value file :file-ext pdf\n  size(2cm);\n  draw(unitcircle);\n#+END_SRC\n</pre></div>\n\n<span id=\"index-file_002ddesc_002c-header-argument\"></span>\n<p>The \u2018<samp>file-desc</samp>\u2019 header argument defines the description (see <a href=\"https://orgmode.org/org.html#Link-Format\">Link Format</a>) for the link.  If \u2018<samp>file-desc</samp>\u2019 is present but has no value,\nthe \u2018<samp>file</samp>\u2019 value is used as the link description.  When this\nargument is not present, the description is omitted.  If you want to\nprovide the \u2018<samp>file-desc</samp>\u2019 argument but omit the description, you can\nprovide it with an empty vector (i.e., :file-desc []).\n</p>\n<span id=\"index-sep_002c-header-argument\"></span>\n<p>By default, Org assumes that a table written to a file has\nTAB-delimited output.  You can choose a different separator with\nthe \u2018<samp>sep</samp>\u2019 header argument.\n</p>\n<span id=\"index-file_002dmode_002c-header-argument\"></span>\n<p>The \u2018<samp>file-mode</samp>\u2019 header argument defines the file permissions.  To\nmake it executable, use \u2018<samp>:file-mode (identity #o755)</samp>\u2019.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC shell :results file :file script.sh :file-mode (identity #o755)\n  echo \"#!/bin/bash\"\n  echo \"echo Hello World\"\n#+END_SRC\n</pre></div>\n</dd>\n</dl>\n\n<span id=\"Format\"></span><span id=\"Format-1\"></span><h4 class=\"subheading\">Format</h4>\n\n<p>Format pertains to the type of the result returned by the code block.\nChoose one of the options; they are mutually exclusive.  The default\nfollows from the type specified above.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>code</samp>\u2019</dt>\n<dd><p>Result enclosed in a code block.  Useful for parsing.  Usage\nexample: \u2018<samp>:results value code</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>drawer</samp>\u2019</dt>\n<dd><p>Result wrapped in a \u2018<samp>RESULTS</samp>\u2019 drawer.  Useful for containing \u2018<samp>raw</samp>\u2019\nor \u2018<samp>org</samp>\u2019 results for later scripting and automated processing.\nUsage example: \u2018<samp>:results value drawer</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>html</samp>\u2019</dt>\n<dd><p>Results enclosed in a \u2018<samp>BEGIN_EXPORT html</samp>\u2019 block.  Usage example:\n\u2018<samp>:results value html</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>latex</samp>\u2019</dt>\n<dd><p>Results enclosed in a \u2018<samp>BEGIN_EXPORT latex</samp>\u2019 block.  Usage example:\n\u2018<samp>:results value latex</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>link</samp>\u2019</dt>\n<dt>\u2018<samp>graphics</samp>\u2019</dt>\n<dd><p>When used along with \u2018<samp>file</samp>\u2019 type, the result is a link to the file\nspecified in \u2018<samp>:file</samp>\u2019 header argument.  However, unlike plain \u2018<samp>file</samp>\u2019\ntype, nothing is written to the disk.  The block is used for its\nside-effects only, as in the following example:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+begin_src shell :results file link :file \"download.tar.gz\"\nwget -c \"https://example.com/download.tar.gz\"\n#+end_src\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>org</samp>\u2019</dt>\n<dd><p>Results enclosed in a \u2018<samp>BEGIN_SRC org</samp>\u2019 block.  For comma-escape,\neither <kbd><span class=\"key\">TAB</span></kbd> in the block, or export the file.  Usage\nexample: \u2018<samp>:results value org</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>pp</samp>\u2019</dt>\n<dd><p>Result converted to pretty-print source code.  Enclosed in a code\nblock.  Languages supported: Emacs Lisp, Python, and Ruby.  Usage\nexample: \u2018<samp>:results value pp</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>raw</samp>\u2019</dt>\n<dd><p>Interpreted as raw Org mode.  Inserted directly into the buffer.\nAligned if it is a table.  Usage example: \u2018<samp>:results value raw</samp>\u2019.\n</p></dd>\n</dl>\n\n<span id=\"index-wrap_002c-header-argument\"></span>\n<p>The \u2018<samp>wrap</samp>\u2019 header argument unconditionally marks the results block by\nappending strings to \u2018<samp>#+BEGIN_</samp>\u2019 and \u2018<samp>#+END_</samp>\u2019.  If no string is\nspecified, Org wraps the results in a \u2018<samp>#+BEGIN_results</samp>\u2019\n\u2026 \u2018<samp>#+END_results</samp>\u2019 block.  It takes precedent over the \u2018<samp>results</samp>\u2019\nvalue listed above.  E.g.,\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp :results html :wrap EXPORT markdown\n\"&lt;blink&gt;Welcome back to the 90's&lt;/blink&gt;\"\n#+END_SRC\n\n#+RESULTS:\n#+BEGIN_EXPORT markdown\n&lt;blink&gt;Welcome back to the 90's&lt;/blink&gt;\n#+END_EXPORT\n</pre></div>\n\n<span id=\"Handling\"></span><span id=\"Handling-1\"></span><h4 class=\"subheading\">Handling</h4>\n\n<p>Handling options after collecting the results.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>replace</samp>\u2019</dt>\n<dd><p>Default.  Insert results in the Org buffer.  Remove previous\nresults.  Usage example: \u2018<samp>:results output replace</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>silent</samp>\u2019</dt>\n<dd><p>Do not insert results in the Org mode buffer, but echo them in the\nminibuffer.  Usage example: \u2018<samp>:results output silent</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>none</samp>\u2019</dt>\n<dd><p>Do not process results at all.  No inserting in the Org mode buffer\nnor echo them in the minibuffer.  Usage example: \u2018<samp>:results none</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>append</samp>\u2019</dt>\n<dd><p>Append results to the Org buffer.  Latest results are at the bottom.\nDoes not remove previous results.  Usage example: \u2018<samp>:results output\n  append</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>prepend</samp>\u2019</dt>\n<dd><p>Prepend results to the Org buffer.  Latest results are at the top.\nDoes not remove previous results.  Usage example: \u2018<samp>:results output\n  prepend</samp>\u2019.\n</p></dd>\n</dl>\n\n<span id=\"Post_002dprocessing\"></span><span id=\"Post_002dprocessing-1\"></span><h4 class=\"subheading\">Post-processing</h4>\n\n<span id=\"index-post_002c-header-argument\"></span>\n<span id=\"index-_002athis_002a_002c-in-post-header-argument\"></span>\n<p>The \u2018<samp>post</samp>\u2019 header argument is for post-processing results from block\nevaluation.  When \u2018<samp>post</samp>\u2019 has any value, Org binds the results to\n<code>*this*</code> variable for easy passing to \u2018<samp>var</samp>\u2019 header argument\nspecifications (see <a href=\"https://orgmode.org/org.html#Environment-of-a-Code-Block\">Environment of a Code Block</a>).  That makes results\navailable to other code blocks, or even for direct Emacs Lisp code\nexecution.\n</p>\n<p>The following two examples illustrate \u2018<samp>post</samp>\u2019 header argument in\naction.  The first one shows how to attach an \u2018<samp>ATTR_LATEX</samp>\u2019 keyword\nusing \u2018<samp>post</samp>\u2019.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: attr_wrap\n#+BEGIN_SRC sh :var data=\"\" :var width=\"\\\\textwidth\" :results output\n  echo \"#+ATTR_LATEX: :width $width\"\n  echo \"$data\"\n#+END_SRC\n\n#+HEADER: :file /tmp/it.png\n#+BEGIN_SRC dot :post attr_wrap(width=\"5cm\", data=*this*) :results drawer\n  digraph{\n          a -&gt; b;\n          b -&gt; c;\n          c -&gt; a;\n  }\n#+end_src\n\n#+RESULTS:\n:RESULTS:\n#+ATTR_LATEX :width 5cm\n[[file:/tmp/it.png]]\n:END:\n</pre></div>\n\n<p>The second example shows use of \u2018<samp>colnames</samp>\u2019 header argument in \u2018<samp>post</samp>\u2019\nto pass data between code blocks.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: round-tbl\n#+BEGIN_SRC emacs-lisp :var tbl=\"\" fmt=\"%.3f\"\n  (mapcar (lambda (row)\n            (mapcar (lambda (cell)\n                      (if (numberp cell)\n                          (format fmt cell)\n                        cell))\n                    row))\n          tbl)\n#+end_src\n\n#+BEGIN_SRC R :colnames yes :post round-tbl[:colnames yes](*this*)\n  set.seed(42)\n  data.frame(foo=rnorm(1))\n#+END_SRC\n\n#+RESULTS:\n|   foo |\n|-------|\n| 1.371 |\n</pre></div>\n\n"}, {"id": "167ExportingCodeBlocks", "content": "\n<span id=\"Exporting-Code-Blocks\"></span>\n<span id=\"Exporting-Code-Blocks-1\"></span><h3 class=\"section\">16.7 Exporting Code Blocks</h3>\n\n<span id=\"index-code-block_002c-exporting\"></span>\n<span id=\"index-source-code_002c-exporting\"></span>\n\n<p>It is possible to export the <em>code</em> of code blocks, the <em>results</em> of\ncode block evaluation, <em>both</em> the code and the results of code block\nevaluation, or <em>none</em>.  Org defaults to exporting <em>code</em> for most\nlanguages.  For some languages, such as ditaa, Org defaults to\n<em>results</em>.  To export just the body of code blocks, see <a href=\"https://orgmode.org/org.html#Literal-Examples\">Literal Examples</a>.  To selectively export sub-trees of an Org document, see\n<a href=\"https://orgmode.org/org.html#Exporting\">Exporting</a>.\n</p>\n<span id=\"index-exports_002c-header-argument\"></span>\n<p>The \u2018<samp>exports</samp>\u2019 header argument is to specify if that part of the Org\nfile is exported to, say, HTML or LaTeX formats.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>code</samp>\u2019</dt>\n<dd><p>The default.  The body of code is included into the exported file.\nExample: \u2018<samp>:exports code</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>results</samp>\u2019</dt>\n<dd><p>The results of evaluation of the code is included in the exported\nfile.  Example: \u2018<samp>:exports results</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>both</samp>\u2019</dt>\n<dd><p>Both the code and results of evaluation are included in the exported\nfile.  Example: \u2018<samp>:exports both</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>none</samp>\u2019</dt>\n<dd><p>Neither the code nor the results of evaluation is included in the\nexported file.  Whether the code is evaluated at all depends on\nother options.  Example: \u2018<samp>:exports none</samp>\u2019.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dexport_002duse_002dbabel\"></span>\n<p>To stop Org from evaluating code blocks to speed exports, use the\nheader argument \u2018<samp>:eval never-export</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#Evaluating-Code-Blocks\">Evaluating Code Blocks</a>).\nTo stop Org from evaluating code blocks for greater security, set the\n<code>org-export-use-babel</code> variable to <code>nil</code>, but understand that header\narguments will have no effect.\n</p>\n<p>Turning off evaluation comes in handy when batch processing.  For\nexample, markup languages for wikis, which have a high risk of\nuntrusted code.  Stopping code block evaluation also stops evaluation\nof all header arguments of the code block.  This may not be desirable\nin some circumstances.  So during export, to allow evaluation of just\nthe header arguments but not any code evaluation in the source block,\nset \u2018<samp>:eval never-export</samp>\u2019 (see <a href=\"https://orgmode.org/org.html#Evaluating-Code-Blocks\">Evaluating Code Blocks</a>).\n</p>\n<p>Org never evaluates code blocks in commented sub-trees when exporting\n(see <a href=\"https://orgmode.org/org.html#Comment-Lines\">Comment Lines</a>).  On the other hand, Org does evaluate code\nblocks in sub-trees excluded from export (see <a href=\"https://orgmode.org/org.html#Export-Settings\">Export Settings</a>).\n</p>\n"}, {"id": "168ExtractingSourceCode", "content": "\n<span id=\"Extracting-Source-Code\"></span>\n<span id=\"Extracting-Source-Code-1\"></span><h3 class=\"section\">16.8 Extracting Source Code</h3>\n\n<span id=\"index-tangling\"></span>\n<span id=\"index-source-code_002c-extracting\"></span>\n<span id=\"index-code-block_002c-extracting-source-code\"></span>\n\n<p>Extracting source code from code blocks is a basic task in literate\nprogramming.  Org has features to make this easy.  In literate\nprogramming parlance, documents on creation are <em>woven</em> with code and\ndocumentation, and on export, the code is tangled for execution by\na computer.  Org facilitates weaving and tangling for producing,\nmaintaining, sharing, and exporting literate programming documents.\nOrg provides extensive customization options for extracting source\ncode.\n</p>\n<p>When Org tangles code blocks, it expands, merges, and transforms them.\nThen Org recomposes them into one or more separate files, as\nconfigured through the options.  During this tangling process, Org\nexpands variables in the source code, and resolves any noweb style\nreferences (see <a href=\"https://orgmode.org/org.html#Noweb-Reference-Syntax\">Noweb Reference Syntax</a>).\n</p>\n<span id=\"Header-arguments\"></span><span id=\"Header-arguments-1\"></span><h4 class=\"subheading\">Header arguments</h4>\n\n<span id=\"index-tangle_002c-header-argument\"></span>\n<p>The \u2018<samp>tangle</samp>\u2019 header argument specifies if the code block is exported\nto source file(s).\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>yes</samp>\u2019</dt>\n<dd><p>Export the code block to source file.  The file name for the source\nfile is derived from the name of the Org file, and the file\nextension is derived from the source code language identifier.\nExample: \u2018<samp>:tangle yes</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>no</samp>\u2019</dt>\n<dd><p>The default.  Do not extract the code in a source code file.\nExample: \u2018<samp>:tangle no</samp>\u2019.\n</p>\n</dd>\n<dt><var>FILENAME</var></dt>\n<dd><p>Export the code block to source file whose file name is derived from\nany string passed to the \u2018<samp>tangle</samp>\u2019 header argument.  Org derives the\nfile name as being relative to the directory of the Org file\u2019s\nlocation.  Example: \u2018<samp>:tangle FILENAME</samp>\u2019.\n</p></dd>\n</dl>\n\n<span id=\"index-mkdirp_002c-header-argument-1\"></span>\n<p>The \u2018<samp>mkdirp</samp>\u2019 header argument creates parent directories for tangled\nfiles if the directory does not exist.  A \u2018<samp>yes</samp>\u2019 value enables\ndirectory creation whereas \u2018<samp>no</samp>\u2019 inhibits it.\n</p>\n<span id=\"index-comments_002c-header-argument\"></span>\n<p>The \u2018<samp>comments</samp>\u2019 header argument controls inserting comments into\ntangled files.  These are above and beyond whatever comments may\nalready exist in the code block.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>no</samp>\u2019</dt>\n<dd><p>The default.  Do not insert any extra comments during tangling.\n</p>\n</dd>\n<dt>\u2018<samp>link</samp>\u2019</dt>\n<dd><p>Wrap the code block in comments.  Include links pointing back to the\nplace in the Org file from where the code was tangled.\n</p>\n</dd>\n<dt>\u2018<samp>yes</samp>\u2019</dt>\n<dd><p>Kept for backward compatibility; same as \u2018<samp>link</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>org</samp>\u2019</dt>\n<dd><p>Nearest headline text from Org file is inserted as comment.  The\nexact text that is inserted is picked from the leading context of\nthe source block.\n</p>\n</dd>\n<dt>\u2018<samp>both</samp>\u2019</dt>\n<dd><p>Includes both \u2018<samp>link</samp>\u2019 and \u2018<samp>org</samp>\u2019 options.\n</p>\n</dd>\n<dt>\u2018<samp>noweb</samp>\u2019</dt>\n<dd><p>Includes \u2018<samp>link</samp>\u2019 option, expands noweb references (see <a href=\"https://orgmode.org/org.html#Noweb-Reference-Syntax\">Noweb Reference Syntax</a>), and wraps them in link comments inside the body\nof the code block.\n</p></dd>\n</dl>\n\n<span id=\"index-padline_002c-header-argument\"></span>\n<p>The \u2018<samp>padline</samp>\u2019 header argument controls insertion of newlines to pad\nsource code in the tangled file.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>yes</samp>\u2019</dt>\n<dd><p>Default.  Insert a newline before and after each code block in the\ntangled file.\n</p>\n</dd>\n<dt>\u2018<samp>no</samp>\u2019</dt>\n<dd><p>Do not insert newlines to pad the tangled code blocks.\n</p></dd>\n</dl>\n\n<span id=\"index-shebang_002c-header-argument\"></span>\n<p>The \u2018<samp>shebang</samp>\u2019 header argument can turn results into executable script\nfiles.  By setting it to a string value\u2014for example, \u2018<samp>:shebang\n\"#!/bin/bash\"</samp>\u2019\u2014Org inserts that string as the first line of the\ntangled file that the code block is extracted to.  Org then turns on\nthe tangled file\u2019s executable permission.\n</p>\n<span id=\"index-tangle_002dmode_002c-header-argument\"></span>\n<p>The \u2018<samp>tangle-mode</samp>\u2019 header argument specifies what permissions to set\nfor tangled files by <code>set-file-modes</code>.  For example, to make\na read-only tangled file, use \u2018<samp>:tangle-mode (identity #o444)</samp>\u2019.  To\nmake it executable, use \u2018<samp>:tangle-mode (identity #o755)</samp>\u2019.  It also\noverrides executable permission granted by \u2018<samp>shebang</samp>\u2019.  When multiple\nsource code blocks tangle to a single file with different and\nconflicting \u2018<samp>tangle-mode</samp>\u2019 header arguments, Org\u2019s behavior is\nundefined.\n</p>\n<span id=\"index-no_002dexpand_002c-header-argument\"></span>\n<p>By default Org expands code blocks during tangling.  The \u2018<samp>no-expand</samp>\u2019\nheader argument turns off such expansions.  Note that one side-effect\nof expansion by <code>org-babel-expand-src-block</code> also assigns values (see\n<a href=\"https://orgmode.org/org.html#Environment-of-a-Code-Block\">Environment of a Code Block</a>) to variables.  Expansions also replace\nnoweb references with their targets (see <a href=\"https://orgmode.org/org.html#Noweb-Reference-Syntax\">Noweb Reference Syntax</a>).\nSome of these expansions may cause premature assignment, hence this\noption.  This option makes a difference only for tangling.  It has no\neffect when exporting since code blocks for execution have to be\nexpanded anyway.\n</p>\n<span id=\"Functions\"></span><span id=\"Functions-1\"></span><h4 class=\"subheading\">Functions</h4>\n\n<dl compact=\"compact\">\n<dt><code>org-babel-tangle</code></dt>\n<dd><span id=\"index-org_002dbabel_002dtangle\"></span>\n<span id=\"index-C_002dc-C_002dv-t\"></span>\n<p>Tangle the current file.  Bound to <kbd>C-c C-v t</kbd>.\n</p>\n<p>With prefix argument only tangle the current code block.\n</p>\n</dd>\n<dt><code>org-babel-tangle-file</code></dt>\n<dd><span id=\"index-org_002dbabel_002dtangle_002dfile\"></span>\n<span id=\"index-C_002dc-C_002dv-f\"></span>\n<p>Choose a file to tangle.  Bound to <kbd>C-c C-v f</kbd>.\n</p></dd>\n</dl>\n\n<span id=\"Tangle-hooks\"></span><span id=\"Tangle-hooks-1\"></span><h4 class=\"subheading\">Tangle hooks</h4>\n\n<dl compact=\"compact\">\n<dt><code>org-babel-post-tangle-hook</code></dt>\n<dd><span id=\"index-org_002dbabel_002dpost_002dtangle_002dhook\"></span>\n<p>This hook is run from within code files tangled by\n<code>org-babel-tangle</code>, making it suitable for post-processing,\ncompilation, and evaluation of code in the tangled files.\n</p></dd>\n</dl>\n\n<span id=\"Jumping-between-code-and-Org\"></span><span id=\"Jumping-between-code-and-Org-1\"></span><h4 class=\"subheading\">Jumping between code and Org</h4>\n\n<span id=\"index-org_002dbabel_002dtangle_002djump_002dto_002dorg\"></span>\n<p>Debuggers normally link errors and messages back to the source code.\nBut for tangled files, we want to link back to the Org file, not to\nthe tangled source file.  To make this extra jump, Org uses\n<code>org-babel-tangle-jump-to-org</code> function with two additional source\ncode block header arguments:\n</p>\n<ol>\n<li> Set \u2018<samp>padline</samp>\u2019 to true\u2014this is the default setting.\n</li><li> Set \u2018<samp>comments</samp>\u2019 to \u2018<samp>link</samp>\u2019, which makes Org insert links to the Org\nfile.\n</li></ol>\n\n"}, {"id": "169Languages", "content": "\n<span id=\"Languages\"></span>\n<span id=\"Languages-1\"></span><h3 class=\"section\">16.9 Languages</h3>\n\n<span id=\"index-babel_002c-languages\"></span>\n<span id=\"index-source-code_002c-languages\"></span>\n<span id=\"index-code-block_002c-languages\"></span>\n\n<p>Code blocks in dozens of languages are supported.  See Worg for\n<a href=\"https://orgmode.org/worg/org-contrib/babel/languages/index.html\">language specific documentation</a>.\n</p>\n<span id=\"index-org_002dbabel_002dload_002dlanguages\"></span>\n<p>By default, only Emacs Lisp is enabled for evaluation.  To enable or\ndisable other languages, customize the <code>org-babel-load-languages</code>\nvariable either through the Emacs customization interface, or by\nadding code to the init file as shown next.\n</p>\n<p>In this example, evaluation is disabled for Emacs Lisp, and enabled\nfor R.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-babel-do-load-languages\n 'org-babel-load-languages\n '((emacs-lisp . nil)\n   (R . t)))\n</pre></div>\n\n<p>Note that this is not the only way to enable a language.  Org also\nenables languages when loaded with <code>require</code> statement.  For example,\nthe following enables execution of Clojure code blocks:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'ob-clojure)\n</pre></div>\n\n"}, {"id": "1610EditingSourceCode", "content": "\n<span id=\"Editing-Source-Code\"></span>\n<span id=\"Editing-Source-Code-1\"></span><h3 class=\"section\">16.10 Editing Source Code</h3>\n\n<span id=\"index-code-block_002c-editing\"></span>\n<span id=\"index-source-code_002c-editing\"></span>\n\n<span id=\"index-C_002dc-_0027-3\"></span>\n<p>Use <kbd>C-c '</kbd> to edit the current code block.  It opens a new\nmajor mode edit buffer containing the body of the source code block,\nready for any edits.  Use <kbd>C-c '</kbd> again to close the buffer\nand return to the Org buffer.\n</p>\n<span id=\"index-C_002dx-C_002ds-2\"></span>\n<span id=\"index-org_002dedit_002dsrc_002dauto_002dsave_002didle_002ddelay\"></span>\n<span id=\"index-auto_002dsave_002c-in-code-block-editing\"></span>\n<p><kbd>C-x C-s</kbd> saves the buffer and updates the contents of the\nOrg buffer.  Set <code>org-edit-src-auto-save-idle-delay</code> to save the base\nbuffer after a certain idle delay time.  Set\n<code>org-edit-src-turn-on-auto-save</code> to auto-save this buffer into\na separate file using Auto-save mode.\n</p>\n<p>While editing the source code in the major mode, the Org Src minor\nmode remains active.  It provides these customization variables as\ndescribed below.  For even more variables, look in the customization\ngroup <code>org-edit-structure</code>.\n</p>\n<dl compact=\"compact\">\n<dt><code>org-src-lang-modes</code></dt>\n<dd><span id=\"index-org_002dsrc_002dlang_002dmodes\"></span>\n<p>If an Emacs major-mode named <code>&lt;LANG&gt;-mode</code> exists, where\n<var>&lt;LANG&gt;</var> is the language identifier from code block\u2019s\nheader line, then the edit buffer uses that major mode.  Use this\nvariable to arbitrarily map language identifiers to major modes.\n</p>\n</dd>\n<dt><code>org-src-window-setup</code></dt>\n<dd><span id=\"index-org_002dsrc_002dwindow_002dsetup\"></span>\n<p>For specifying Emacs window arrangement when the new edit buffer is\ncreated.\n</p>\n</dd>\n<dt><code>org-src-preserve-indentation</code></dt>\n<dd><span id=\"index-indentation_002c-in-code-blocks\"></span>\n<span id=\"index-org_002dsrc_002dpreserve_002dindentation\"></span>\n<p>Default is <code>nil</code>.  Source code is indented.  This indentation\napplies during export or tangling, and depending on the context, may\nalter leading spaces and tabs.  When non-<code>nil</code>, source code is\naligned with the leftmost column.  No lines are modified during\nexport or tangling, which is very useful for white-space sensitive\nlanguages, such as Python.\n</p>\n</dd>\n<dt><code>org-src-ask-before-returning-to-edit-buffer</code></dt>\n<dd><span id=\"index-org_002dsrc_002dask_002dbefore_002dreturning_002dto_002dedit_002dbuffer\"></span>\n<p>When <code>nil</code>, Org returns to the edit buffer without further prompts.\nThe default prompts for a confirmation.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dsrc_002dfontify_002dnatively\"></span>\n<span id=\"index-org_002dsrc_002dblock_002dfaces\"></span>\n<p>Set <code>org-src-fontify-natively</code> to non-<code>nil</code> to turn on native code\nfontification in the <em>Org</em> buffer.  Fontification of code blocks can\ngive visual separation of text and code on the display page.  To\nfurther customize the appearance of <code>org-block</code> for specific\nlanguages, customize <code>org-src-block-faces</code>.  The following example\nshades the background of regular blocks, and colors source blocks only\nfor Python and Emacs Lisp languages.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'color)\n(set-face-attribute 'org-block nil :background\n                    (color-darken-name\n                     (face-attribute 'default :background) 3))\n\n(setq org-src-block-faces '((\"emacs-lisp\" (:background \"#EEE2FF\"))\n                            (\"python\" (:background \"#E5FFB8\"))))\n</pre></div>\n\n"}, {"id": "1611NowebReferenceSyntax", "content": "\n<span id=\"Noweb-Reference-Syntax\"></span>\n<span id=\"Noweb-Reference-Syntax-1\"></span><h3 class=\"section\">16.11 Noweb Reference Syntax</h3>\n\n<span id=\"index-code-block_002c-noweb-reference\"></span>\n<span id=\"index-syntax_002c-noweb\"></span>\n<span id=\"index-source-code_002c-noweb-reference\"></span>\n\n<span id=\"index-noweb_002dref_002c-header-argument\"></span>\n<p>Source code blocks can include references to other source code blocks,\nusing a noweb<a id=\"DOCF146\" href=\"https://orgmode.org/org.html#FOOT146\"><sup>146</sup></a> style syntax:\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;&lt;CODE-BLOCK-ID&gt;&gt;\n</pre></div>\n\n\n<p>where <var>CODE-BLOCK-ID</var> refers to either the \u2018<samp>NAME</samp>\u2019 of a single\nsource code block, or a collection of one or more source code blocks\nsharing the same \u2018<samp>noweb-ref</samp>\u2019 header argument (see <a href=\"https://orgmode.org/org.html#Using-Header-Arguments\">Using Header Arguments</a>).  Org can replace such references with the source code of\nthe block or blocks being referenced, or, in the case of a single\nsource code block named with \u2018<samp>NAME</samp>\u2019, with the results of an evaluation\nof that block.\n</p>\n<span id=\"index-noweb_002c-header-argument\"></span>\n<p>The \u2018<samp>noweb</samp>\u2019 header argument controls expansion of noweb syntax\nreferences.  Expansions occur when source code blocks are evaluated,\ntangled, or exported.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>no</samp>\u2019</dt>\n<dd><p>Default.  No expansion of noweb syntax references in the body of the\ncode when evaluating, tangling, or exporting.\n</p>\n</dd>\n<dt>\u2018<samp>yes</samp>\u2019</dt>\n<dd><p>Expansion of noweb syntax references in the body of the code block\nwhen evaluating, tangling, or exporting.\n</p>\n</dd>\n<dt>\u2018<samp>tangle</samp>\u2019</dt>\n<dd><p>Expansion of noweb syntax references in the body of the code block\nwhen tangling.  No expansion when evaluating or exporting.\n</p>\n</dd>\n<dt>\u2018<samp>no-export</samp>\u2019</dt>\n<dd><p>Expansion of noweb syntax references in the body of the code block\nwhen evaluating or tangling.  No expansion when exporting.\n</p>\n</dd>\n<dt>\u2018<samp>strip-export</samp>\u2019</dt>\n<dd><p>Expansion of noweb syntax references in the body of the code block\nwhen expanding prior to evaluating or tangling.  Removes noweb\nsyntax references when exporting.\n</p>\n</dd>\n<dt>\u2018<samp>eval</samp>\u2019</dt>\n<dd><p>Expansion of noweb syntax references in the body of the code block\nonly before evaluating.\n</p></dd>\n</dl>\n\n<p>In the most simple case, the contents of a single source block is\ninserted within other blocks.  Thus, in following example,\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: initialization\n#+BEGIN_SRC emacs-lisp\n  (setq sentence \"Never a foot too far, even.\")\n#+END_SRC\n\n#+BEGIN_SRC emacs-lisp :noweb yes\n  &lt;&lt;initialization&gt;&gt;\n  (reverse sentence)\n#+END_SRC\n</pre></div>\n\n<p>the second code block is expanded as\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC emacs-lisp :noweb yes\n  (setq sentence \"Never a foot too far, even.\")\n  (reverse sentence)\n#+END_SRC\n</pre></div>\n\n<p>You may also include the contents of multiple blocks sharing a common\n\u2018<samp>noweb-ref</samp>\u2019 header argument, which can be set at the file, sub-tree,\nor code block level.  In the example Org file shown next, the body of\nthe source code in each block is extracted for concatenation to a pure\ncode file when tangled.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC sh :tangle yes :noweb yes :shebang #!/bin/sh\n  &lt;&lt;fullest-disk&gt;&gt;\n#+END_SRC\n* the mount point of the fullest disk\n  :PROPERTIES:\n  :header-args: :noweb-ref fullest-disk\n  :END:\n\n** query all mounted disks\n#+BEGIN_SRC sh\n  df \\\n#+END_SRC\n\n** strip the header row\n#+BEGIN_SRC sh\n  |sed '1d' \\\n#+END_SRC\n\n** output mount point of fullest disk\n#+BEGIN_SRC sh\n  |awk '{if (u &lt; +$5) {u = +$5; m = $6}} END {print m}'\n#+END_SRC\n</pre></div>\n\n<span id=\"index-noweb_002dsep_002c-header-argument\"></span>\n<p>By default a newline separates each noweb reference concatenation.  To\nuse a different separator, edit the \u2018<samp>noweb-sep</samp>\u2019 header argument.\n</p>\n<p>Alternatively, Org can include the results of evaluation of a single\ncode block rather than its body.  Evaluation occurs when parentheses,\npossibly including arguments, are appended to the code block name, as\nshown below.\n</p>\n<div class=\"example\">\n<pre class=\"example\">&lt;&lt;NAME(optional arguments)&gt;&gt;\n</pre></div>\n\n\n<p>Note that in this case, a code block name set by \u2018<samp>NAME</samp>\u2019 keyword is\nrequired; the reference set by \u2018<samp>noweb-ref</samp>\u2019 will not work when\nevaluation is desired.\n</p>\n<p>Here is an example that demonstrates how the exported content changes\nwhen noweb style references are used with parentheses versus without.\nGiven:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: some-code\n#+BEGIN_SRC python :var num=0 :results output :exports none\n  print(num*10)\n#+END_SRC\n</pre></div>\n\n<p>this code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC text :noweb yes\n  &lt;&lt;some-code&gt;&gt;\n#+END_SRC\n</pre></div>\n\n<p>expands to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">print(num*10)\n</pre></div>\n\n\n<p>Below, a similar noweb style reference is used, but with parentheses,\nwhile setting a variable \u2018<samp>num</samp>\u2019 to 10:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC text :noweb yes\n  &lt;&lt;some-code(num=10)&gt;&gt;\n#+END_SRC\n</pre></div>\n\n<p>Note that the expansion now contains the results of the code block\n\u2018<samp>some-code</samp>\u2019, not the code block itself:\n</p>\n<div class=\"example\">\n<pre class=\"example\">100\n</pre></div>\n\n\n<p>Noweb insertions honor prefix characters that appear before the noweb\nsyntax reference.  This behavior is illustrated in the following\nexample.  Because the \u2018<samp>&lt;&lt;example&gt;&gt;</samp>\u2019 noweb reference appears behind the\nSQL comment syntax, each line of the expanded noweb reference is\ncommented.  With:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: example\n#+BEGIN_SRC text\n  this is the\n  multi-line body of example\n#+END_SRC\n</pre></div>\n\n<p>this code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC sql :noweb yes\n ---&lt;&lt;example&gt;&gt;\n#+END_SRC\n</pre></div>\n\n<p>expands to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN_SRC sql :noweb yes\n ---this is the\n ---multi-line body of example\n#+END_SRC\n</pre></div>\n\n<p>Since this change does not affect noweb replacement text without\nnewlines in them, inline noweb references are acceptable.\n</p>\n<p>This feature can also be used for management of indentation in\nexported code snippets.  With:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+NAME: if-true\n#+BEGIN_SRC python :exports none\n  print('do things when true')\n#+end_src\n\n#+name: if-false\n#+begin_src python :exports none\n  print('do things when false')\n#+end_src\n</pre></div>\n\n<p>this code block:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+begin_src python :noweb yes :results output\n  if true:\n      &lt;&lt;if-true&gt;&gt;\n  else:\n      &lt;&lt;if-false&gt;&gt;\n#+end_src\n</pre></div>\n\n<p>expands to:\n</p>\n<div class=\"example\">\n<pre class=\"example\">if true:\n    print('do things when true')\nelse:\n    print('do things when false')\n</pre></div>\n\n<p>When in doubt about the outcome of a source code block expansion, you\ncan preview the results with the following command:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-v v</kbd> or <kbd>C-c C-v C-v</kbd> (<code>org-babel-expand-src-block</code>)</dt>\n<dd><span id=\"index-org_002dbabel_002dexpand_002dsrc_002dblock\"></span>\n<span id=\"index-C_002dc-C_002dv-v\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dv\"></span>\n<p>Expand the current source code block according to its header\narguments and pop open the results in a preview buffer.\n</p></dd>\n</dl>\n\n"}, {"id": "1612LibraryofBabel", "content": "\n<span id=\"Library-of-Babel\"></span>\n<span id=\"Library-of-Babel-1\"></span><h3 class=\"section\">16.12 Library of Babel</h3>\n\n<span id=\"index-babel_002c-library-of\"></span>\n<span id=\"index-source-code_002c-library\"></span>\n<span id=\"index-code-block_002c-library\"></span>\n\n<p>The \u201cLibrary of Babel\u201d is a collection of code blocks.  Like\na function library, these code blocks can be called from other Org\nfiles.  A collection of useful code blocks is available on <a href=\"https://orgmode.org/worg/library-of-babel.html\">Worg</a>.  For\nremote code block evaluation syntax, see <a href=\"https://orgmode.org/org.html#Evaluating-Code-Blocks\">Evaluating Code Blocks</a>.\n</p>\n<span id=\"index-C_002dc-C_002dv-i\"></span>\n<span id=\"index-org_002dbabel_002dlob_002dingest\"></span>\n<p>For any user to add code to the library, first save the code in\nregular code blocks of an Org file, and then load the Org file with\n<code>org-babel-lob-ingest</code>, which is bound to <kbd>C-c C-v i</kbd>.\n</p>\n"}, {"id": "1613KeybindingsandUsefulFunctions", "content": "\n<span id=\"Key-bindings-and-Useful-Functions\"></span>\n<span id=\"Key-bindings-and-Useful-Functions-1\"></span><h3 class=\"section\">16.13 Key bindings and Useful Functions</h3>\n\n<span id=\"index-code-block_002c-key-bindings\"></span>\n\n<p>Many common Org mode key sequences are re-bound depending on\nthe context.\n</p>\n<p>Active key bindings in code blocks:\n</p>\n<span id=\"index-C_002dc-C_002dc-18\"></span>\n<span id=\"index-org_002dbabel_002dexecute_002dsrc_002dblock-1\"></span>\n<span id=\"index-C_002dc-C_002do-4\"></span>\n<span id=\"index-org_002dbabel_002dopen_002dsrc_002dblock_002dresult\"></span>\n<span id=\"index-M_002dUP-5\"></span>\n<span id=\"index-org_002dbabel_002dload_002din_002dsession\"></span>\n<span id=\"index-M_002dDOWN-5\"></span>\n<span id=\"index-org_002dbabel_002dpop_002dto_002dsession\"></span>\n<table>\n<thead><tr><th width=\"20%\">Key binding</th><th width=\"55%\">Function</th></tr></thead>\n<tbody><tr><td width=\"20%\"><kbd>C-c C-c</kbd></td><td width=\"55%\"><code>org-babel-execute-src-block</code></td></tr>\n<tr><td width=\"20%\"><kbd>C-c C-o</kbd></td><td width=\"55%\"><code>org-babel-open-src-block-result</code></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">UP</span></kbd></td><td width=\"55%\"><code>org-babel-load-in-session</code></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">DOWN</span></kbd></td><td width=\"55%\"><code>org-babel-pop-to-session</code></td></tr>\n</tbody></table>\n\n<p>Active key bindings in Org mode buffer:\n</p>\n<span id=\"index-C_002dc-C_002dv-p\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dp\"></span>\n<span id=\"index-C_002dc-C_002dv-n\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dn\"></span>\n<span id=\"index-C_002dc-C_002dv-e-1\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002de\"></span>\n<span id=\"index-C_002dc-C_002dv-o\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002do\"></span>\n<span id=\"index-C_002dc-C_002dv-v-1\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dv-1\"></span>\n<span id=\"index-C_002dc-C_002dv-u\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002du\"></span>\n<span id=\"index-C_002dc-C_002dv-g\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dg\"></span>\n<span id=\"index-C_002dc-C_002dv-r\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dr\"></span>\n<span id=\"index-C_002dc-C_002dv-b\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002db\"></span>\n<span id=\"index-C_002dc-C_002dv-s\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002ds\"></span>\n<span id=\"index-C_002dc-C_002dv-d\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dd\"></span>\n<span id=\"index-C_002dc-C_002dv-t-1\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dt\"></span>\n<span id=\"index-C_002dc-C_002dv-f-1\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002df\"></span>\n<span id=\"index-C_002dc-C_002dv-c\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dc\"></span>\n<span id=\"index-C_002dc-C_002dv-j\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dj\"></span>\n<span id=\"index-C_002dc-C_002dv-l\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dl\"></span>\n<span id=\"index-C_002dc-C_002dv-i-1\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002di\"></span>\n<span id=\"index-C_002dc-C_002dv-I\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dI\"></span>\n<span id=\"index-C_002dc-C_002dv-z\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dz\"></span>\n<span id=\"index-C_002dc-C_002dv-a\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002da\"></span>\n<span id=\"index-C_002dc-C_002dv-h\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dh\"></span>\n<span id=\"index-C_002dc-C_002dv-x\"></span>\n<span id=\"index-C_002dc-C_002dv-C_002dx\"></span>\n<span id=\"index-org_002dbabel_002dprevious_002dsrc_002dblock\"></span>\n<span id=\"index-org_002dbabel_002dnext_002dsrc_002dblock\"></span>\n<span id=\"index-org_002dbabel_002dexecute_002dmaybe\"></span>\n<span id=\"index-org_002dbabel_002dopen_002dsrc_002dblock_002dresult-1\"></span>\n<span id=\"index-org_002dbabel_002dexpand_002dsrc_002dblock-1\"></span>\n<span id=\"index-org_002dbabel_002dgoto_002dsrc_002dblock_002dhead\"></span>\n<span id=\"index-org_002dbabel_002dgoto_002dnamed_002dsrc_002dblock\"></span>\n<span id=\"index-org_002dbabel_002dgoto_002dnamed_002dresult\"></span>\n<span id=\"index-org_002dbabel_002dexecute_002dbuffer\"></span>\n<span id=\"index-org_002dbabel_002dexecute_002dsubtree\"></span>\n<span id=\"index-org_002dbabel_002ddemarcate_002dblock\"></span>\n<span id=\"index-org_002dbabel_002dtangle-1\"></span>\n<span id=\"index-org_002dbabel_002dtangle_002dfile-1\"></span>\n<span id=\"index-org_002dbabel_002dcheck_002dsrc_002dblock\"></span>\n<span id=\"index-org_002dbabel_002dinsert_002dheader_002darg\"></span>\n<span id=\"index-org_002dbabel_002dload_002din_002dsession-1\"></span>\n<span id=\"index-org_002dbabel_002dlob_002dingest-1\"></span>\n<span id=\"index-org_002dbabel_002dview_002dsrc_002dblock_002dinfo\"></span>\n<span id=\"index-org_002dbabel_002dswitch_002dto_002dsession_002dwith_002dcode\"></span>\n<span id=\"index-org_002dbabel_002dsha1_002dhash\"></span>\n<span id=\"index-org_002dbabel_002ddescribe_002dbindings\"></span>\n<span id=\"index-org_002dbabel_002ddo_002dkey_002dsequence_002din_002dedit_002dbuffer\"></span>\n<table>\n<thead><tr><th width=\"45%\">Key binding</th><th width=\"55%\">Function</th></tr></thead>\n<tbody><tr><td width=\"45%\"><kbd>C-c C-v p</kbd> or <kbd>C-c C-v C-p</kbd></td><td width=\"55%\"><code>org-babel-previous-src-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v n</kbd> or <kbd>C-c C-v C-n</kbd></td><td width=\"55%\"><code>org-babel-next-src-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v e</kbd> or <kbd>C-c C-v C-e</kbd></td><td width=\"55%\"><code>org-babel-execute-maybe</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v o</kbd> or <kbd>C-c C-v C-o</kbd></td><td width=\"55%\"><code>org-babel-open-src-block-result</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v v</kbd> or <kbd>C-c C-v C-v</kbd></td><td width=\"55%\"><code>org-babel-expand-src-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v u</kbd> or <kbd>C-c C-v C-u</kbd></td><td width=\"55%\"><code>org-babel-goto-src-block-head</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v g</kbd> or <kbd>C-c C-v C-g</kbd></td><td width=\"55%\"><code>org-babel-goto-named-src-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v r</kbd> or <kbd>C-c C-v C-r</kbd></td><td width=\"55%\"><code>org-babel-goto-named-result</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v b</kbd> or <kbd>C-c C-v C-b</kbd></td><td width=\"55%\"><code>org-babel-execute-buffer</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v s</kbd> or <kbd>C-c C-v C-s</kbd></td><td width=\"55%\"><code>org-babel-execute-subtree</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v d</kbd> or <kbd>C-c C-v C-d</kbd></td><td width=\"55%\"><code>org-babel-demarcate-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v t</kbd> or <kbd>C-c C-v C-t</kbd></td><td width=\"55%\"><code>org-babel-tangle</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v f</kbd> or <kbd>C-c C-v C-f</kbd></td><td width=\"55%\"><code>org-babel-tangle-file</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v c</kbd> or <kbd>C-c C-v C-c</kbd></td><td width=\"55%\"><code>org-babel-check-src-block</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v j</kbd> or <kbd>C-c C-v C-j</kbd></td><td width=\"55%\"><code>org-babel-insert-header-arg</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v l</kbd> or <kbd>C-c C-v C-l</kbd></td><td width=\"55%\"><code>org-babel-load-in-session</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v i</kbd> or <kbd>C-c C-v C-i</kbd></td><td width=\"55%\"><code>org-babel-lob-ingest</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v I</kbd> or <kbd>C-c C-v C-I</kbd></td><td width=\"55%\"><code>org-babel-view-src-block-info</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v z</kbd> or <kbd>C-c C-v C-z</kbd></td><td width=\"55%\"><code>org-babel-switch-to-session-with-code</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v a</kbd> or <kbd>C-c C-v C-a</kbd></td><td width=\"55%\"><code>org-babel-sha1-hash</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v h</kbd> or <kbd>C-c C-v C-h</kbd></td><td width=\"55%\"><code>org-babel-describe-bindings</code></td></tr>\n<tr><td width=\"45%\"><kbd>C-c C-v x</kbd> or <kbd>C-c C-v C-x</kbd></td><td width=\"55%\"><code>org-babel-do-key-sequence-in-edit-buffer</code></td></tr>\n</tbody></table>\n\n"}, {"id": "1614BatchExecution", "content": "\n<span id=\"Batch-Execution\"></span>\n<span id=\"Batch-Execution-1\"></span><h3 class=\"section\">16.14 Batch Execution</h3>\n\n<span id=\"index-code-block_002c-batch-execution\"></span>\n<span id=\"index-source-code_002c-batch-execution\"></span>\n\n<p>Org mode features, including working with source code facilities can\nbe invoked from the command line.  This enables building shell scripts\nfor batch processing, running automated system tasks, and expanding\nOrg mode\u2019s usefulness.\n</p>\n<p>The sample script shows batch processing of multiple files using\n<code>org-babel-tangle</code>.\n</p>\n<div class=\"example\">\n<pre class=\"example\">#!/bin/sh\n# Tangle files with Org mode\n#\nemacs -Q --batch --eval \"\n    (progn\n      (require 'ob-tangle)\n      (dolist (file command-line-args-left)\n        (with-current-buffer (find-file-noselect file)\n          (org-babel-tangle))))\n  \" \"$@\"\n</pre></div>\n\n"}, {"id": "17Miscellaneous", "content": "\n<span id=\"Miscellaneous\"></span>\n<span id=\"Miscellaneous-1\"></span><h2 class=\"chapter\">17 Miscellaneous</h2>\n\n\n\n"}, {"id": "171Completion", "content": "\n<span id=\"Completion\"></span>\n<span id=\"Completion-1\"></span><h3 class=\"section\">17.1 Completion</h3>\n\n<span id=\"index-completion_002c-of-TeX-symbols\"></span>\n<span id=\"index-completion_002c-of-TODO-keywords-1\"></span>\n<span id=\"index-completion_002c-of-dictionary-words\"></span>\n<span id=\"index-completion_002c-of-option-keywords-1\"></span>\n<span id=\"index-completion_002c-of-tags-1\"></span>\n<span id=\"index-completion_002c-of-property-keys\"></span>\n<span id=\"index-completion_002c-of-link-abbreviations\"></span>\n<span id=\"index-TeX-symbol-completion\"></span>\n<span id=\"index-TODO-keywords-completion\"></span>\n<span id=\"index-dictionary-word-completion\"></span>\n<span id=\"index-option-keyword-completion\"></span>\n<span id=\"index-tag-completion\"></span>\n<span id=\"index-link-abbreviations_002c-completion-of\"></span>\n\n<p>Org has in-buffer completions.  Unlike minibuffer completions, which\nare useful for quick command interactions, Org\u2019s in-buffer completions\nare more suitable for content creation in Org documents.  Type one or\nmore letters and invoke the hot key to complete the text in-place.\nDepending on the context and the keys, Org offers different types of\ncompletions.  No minibuffer is involved.  Such mode-specific hot keys\nhave become an integral part of Emacs and Org provides several\nshortcuts.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>M-<span class=\"key\">TAB</span></kbd></dt>\n<dd><span id=\"index-M_002dTAB-4\"></span>\n\n<p>Complete word at point.\n</p>\n<ul>\n<li> At the beginning of an empty headline, complete TODO keywords.\n\n</li><li> After \u2018<samp>\\</samp>\u2019, complete TeX symbols supported by the exporter.\n\n</li><li> After \u2018<samp>:</samp>\u2019 in a headline, complete tags.  Org deduces the list of\ntags from the \u2018<samp>TAGS</samp>\u2019 in-buffer option (see <a href=\"https://orgmode.org/org.html#Setting-Tags\">Setting Tags</a>), the\nvariable <code>org-tag-alist</code>, or from all tags used in the current\nbuffer.\n\n</li><li> After \u2018<samp>:</samp>\u2019 and not in a headline, complete property keys.  The list\nof keys is constructed dynamically from all keys used in the\ncurrent buffer.\n\n</li><li> After \u2018<samp>[[</samp>\u2019, complete link abbreviations (see <a href=\"https://orgmode.org/org.html#Link-Abbreviations\">Link Abbreviations</a>).\n\n</li><li> After \u2018<samp>[[*</samp>\u2019, complete headlines in the current buffer so that they\ncan be used in search links like: \u2018<samp>[[*find this headline]]</samp>\u2019\n\n</li><li> After \u2018<samp>#+</samp>\u2019, complete the special keywords like \u2018<samp>TYP_TODO</samp>\u2019 or\nfile-specific \u2018<samp>OPTIONS</samp>\u2019.  After option keyword is complete,\npressing <kbd>M-<span class=\"key\">TAB</span></kbd> again inserts example settings for this\nkeyword.\n\n</li><li> After \u2018<samp>STARTUP</samp>\u2019 keyword, complete startup items.\n\n</li><li> When point is anywhere else, complete dictionary words using\nIspell.\n</li></ul>\n</dd>\n</dl>\n\n"}, {"id": "172StructureTemplates", "content": "\n<span id=\"Structure-Templates\"></span>\n<span id=\"Structure-Templates-1\"></span><h3 class=\"section\">17.2 Structure Templates</h3>\n\n<span id=\"index-template-insertion\"></span>\n<span id=\"index-insertion_002c-of-templates\"></span>\n\n<p>With just a few keystrokes, it is possible to insert empty structural\nblocks, such as \u2018<samp>#+BEGIN_SRC</samp>\u2019 \u2026 \u2018<samp>#+END_SRC</samp>\u2019, or to wrap existing\ntext in such a block.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-,</kbd> (<code>org-insert-structure-template</code>)</dt>\n<dd><span id=\"index-org_002dinsert_002dstructure_002dtemplate\"></span>\n<span id=\"index-C_002dc-C_002d_002c\"></span>\n<p>Prompt for a type of block structure, and insert the block at point.\nIf the region is active, it is wrapped in the block.  First prompts\nthe user for keys, which are used to look up a structure type from\nthe variable below.  If the key is <kbd><span class=\"key\">TAB</span></kbd>, <kbd><span class=\"key\">RET</span></kbd>,\nor <kbd><span class=\"key\">SPC</span></kbd>, the user is prompted to enter a block type.\n</p></dd>\n</dl>\n\n<span id=\"index-org_002dstructure_002dtemplate_002dalist\"></span>\n<p>Available structure types are defined in\n<code>org-structure-template-alist</code>, see the docstring for adding or\nchanging values.\n</p>\n<span id=\"index-Tempo\"></span>\n<span id=\"index-template-expansion\"></span>\n<span id=\"index-insertion_002c-of-templates-1\"></span>\n<span id=\"index-org_002dtempo_002dkeywords_002dalist\"></span>\n<p>Org Tempo expands snippets to structures defined in\n<code>org-structure-template-alist</code> and <code>org-tempo-keywords-alist</code>.  For\nexample, <kbd>&lt; s <span class=\"key\">TAB</span></kbd> creates a code block.  Enable it by\ncustomizing <code>org-modules</code> or add \u2018<samp>(require 'org-tempo)</samp>\u2019 to your Emacs\ninit file<a id=\"DOCF147\" href=\"https://orgmode.org/org.html#FOOT147\"><sup>147</sup></a>.\n</p>\n<table>\n<tbody><tr><td width=\"10%\"><kbd>a</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_EXPORT ascii</samp>\u2019 \u2026 \u2018<samp>#+END_EXPORT</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>c</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_CENTER</samp>\u2019 \u2026 \u2018<samp>#+END_CENTER</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>C</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_COMMENT</samp>\u2019 \u2026 \u2018<samp>#+END_COMMENT</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>e</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_EXAMPLE</samp>\u2019 \u2026 \u2018<samp>#+END_EXAMPLE</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>E</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_EXPORT</samp>\u2019 \u2026 \u2018<samp>#+END_EXPORT</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>h</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_EXPORT html</samp>\u2019 \u2026 \u2018<samp>#+END_EXPORT</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>l</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_EXPORT latex</samp>\u2019 \u2026 \u2018<samp>#+END_EXPORT</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>q</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_QUOTE</samp>\u2019 \u2026 \u2018<samp>#+END_QUOTE</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>s</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_SRC</samp>\u2019 \u2026 \u2018<samp>#+END_SRC</samp>\u2019</td></tr>\n<tr><td width=\"10%\"><kbd>v</kbd></td><td width=\"90%\">\u2018<samp>#+BEGIN_VERSE</samp>\u2019 \u2026 \u2018<samp>#+END_VERSE</samp>\u2019</td></tr>\n</tbody></table>\n\n"}, {"id": "173SpeedKeys", "content": "\n<span id=\"Speed-Keys\"></span>\n<span id=\"Speed-Keys-1\"></span><h3 class=\"section\">17.3 Speed Keys</h3>\n\n<span id=\"index-speed-keys\"></span>\n\n<p>Single keystrokes can execute custom commands in an Org file when\npoint is on a headline.  Without the extra burden of a meta or\nmodifier key, Speed Keys can speed navigation or execute custom\ncommands.  Besides faster navigation, Speed Keys may come in handy on\nsmall mobile devices that do not have full keyboards.  Speed Keys may\nalso work on TTY devices known for their problems when entering Emacs\nkey chords.\n</p>\n<span id=\"index-org_002duse_002dspeed_002dcommands\"></span>\n<p>By default, Org has Speed Keys disabled.  To activate Speed Keys, set\nthe variable <code>org-use-speed-commands</code> to a non-<code>nil</code> value.  To\ntrigger a Speed Key, point must be at the beginning of an Org\nheadline, before any of the stars.\n</p>\n<span id=\"index-org_002dspeed_002dcommands\"></span>\n<span id=\"index-org_002dspeed_002dcommand_002dhelp\"></span>\n<p>Org comes with a pre-defined list of Speed Keys.  To add or modify\nSpeed Keys, customize the option <code>org-speed-commands</code>.  For more\ndetails, see the variable\u2019s docstring.  With Speed Keys activated,\n<kbd>M-x org-speed-command-help</kbd>, or <kbd>?</kbd> when point is at the\nbeginning of an Org headline, shows currently active Speed Keys,\nincluding the user-defined ones.\n</p>\n"}, {"id": "174ACleanerOutlineView", "content": "\n<span id=\"Clean-View\"></span>\n<span id=\"A-Cleaner-Outline-View\"></span><h3 class=\"section\">17.4 A Cleaner Outline View</h3>\n\n<span id=\"index-hiding-leading-stars\"></span>\n<span id=\"index-dynamic-indentation\"></span>\n<span id=\"index-odd_002dlevels_002donly-outlines\"></span>\n<span id=\"index-clean-outline-view\"></span>\n\n<p>Org\u2019s outline with stars and no indents can look cluttered for short\ndocuments.  For <em>book-like</em> long documents, the effect is not as\nnoticeable.  Org provides an alternate stars and indentation scheme,\nas shown on the right in the following table.  It displays only one\nstar and indents text to line up with the heading:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Top level headline             |    * Top level headline\n** Second level                  |      * Second level\n*** Third level                  |        * Third level\nsome text                        |          some text\n*** Third level                  |        * Third level\nmore text                        |          more text\n* Another top level headline     |    * Another top level headline\n</pre></div>\n\n<p>Org can achieve this in two ways, (1) by just displaying the buffer in\nthis way without changing it, or (2) by actually indenting every line\nin the desired amount with hard spaces and hiding leading stars.\n</p>\n\n\n"}, {"id": "1741OrgIndentMode", "content": "\n<span id=\"Org-Indent-Mode\"></span>\n<span id=\"Org-Indent-Mode-1\"></span><h4 class=\"subsection\">17.4.1 Org Indent Mode</h4>\n\n<span id=\"index-Indent-mode\"></span>\n<span id=\"index-org_002dindent_002dmode\"></span>\n<p>To display the buffer in the indented view, activate Org Indent minor\nmode, using <kbd>M-x org-indent-mode</kbd>.  Text lines that are not\nheadlines are prefixed with virtual spaces to vertically align with\nthe headline text<a id=\"DOCF148\" href=\"https://orgmode.org/org.html#FOOT148\"><sup>148</sup></a>.\n</p>\n<span id=\"index-org_002dindent_002dindentation_002dper_002dlevel\"></span>\n<p>To make more horizontal space, the headlines are shifted by two\ncharacters.  Configure <code>org-indent-indentation-per-level</code> variable for\na different number.\n</p>\n<span id=\"index-org_002dindent_002dmode_002dturns_002don_002dhiding_002dstars\"></span>\n<span id=\"index-org_002dindent_002dmode_002dturns_002doff_002dorg_002dadapt_002dindentation\"></span>\n<p>By default, Org Indent mode turns off <code>org-adapt-indentation</code> and does\nhide leading stars by locally setting <code>org-hide-leading-stars</code> to <code>t</code>:\nonly one star on each headline is visible, the rest are masked with\nthe same font color as the background.  If you want to customize this\ndefault behavior, see <code>org-indent-mode-turns-on-hiding-stars</code> and\n<code>org-indent-mode-turns-off-org-adapt-indentation</code>.\n</p>\n<span id=\"index-org_002dstartup_002dindented\"></span>\n<p>To globally turn on Org Indent mode for all files, customize the\nvariable <code>org-startup-indented</code>.  To control it for individual files,\nuse \u2018<samp>STARTUP</samp>\u2019 keyword as follows:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: indent\n#+STARTUP: noindent\n</pre></div>\n\n"}, {"id": "1742Hardindentation", "content": "\n<span id=\"Hard-indentation\"></span>\n<span id=\"Hard-indentation-1\"></span><h4 class=\"subsection\">17.4.2 Hard indentation</h4>\n\n<p>It is possible to use hard spaces to achieve the indentation instead,\nif the bare ASCII file should have the indented look also outside\nEmacs<a id=\"DOCF149\" href=\"https://orgmode.org/org.html#FOOT149\"><sup>149</sup></a>.  With Org\u2019s support, you have to indent all lines to\nline up with the outline headers.  You would use these\nsettings<a id=\"DOCF150\" href=\"https://orgmode.org/org.html#FOOT150\"><sup>150</sup></a>:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-adapt-indentation t\n      org-hide-leading-stars t\n      org-odd-levels-only t)\n</pre></div>\n\n<dl compact=\"compact\">\n<dt><em>Indentation of text below headlines</em> (<code>org-adapt-indentation</code>)</dt>\n<dd><span id=\"index-org_002dadapt_002dindentation\"></span>\n<p>The first setting modifies paragraph filling, line wrapping, and\nstructure editing commands to preserving or adapting the indentation\nas appropriate.\n</p>\n</dd>\n<dt><em>Hiding leading stars</em> (<code>org-hide-leading-stars</code>)</dt>\n<dd><span id=\"index-org_002dhide_002dleading_002dstars\"></span>\n<span id=\"index-org_002dhide_002c-face\"></span>\n<p>The second setting makes leading stars invisible by applying the\nface <code>org-hide</code> to them.  For per-file preference, use these file\n\u2018<samp>STARTUP</samp>\u2019 options:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: hidestars\n#+STARTUP: showstars\n</pre></div>\n\n</dd>\n<dt><em>Odd levels</em> (<code>org-odd-levels-only</code>)</dt>\n<dd><span id=\"index-org_002dodd_002dlevels_002donly-1\"></span>\n<p>The third setting makes Org use only odd levels, 1, 3, 5, \u2026, in\nthe outline to create more indentation.  On a per-file level,\ncontrol this with:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+STARTUP: odd\n#+STARTUP: oddeven\n</pre></div>\n\n<p>To convert a file between single and double stars layouts, use\n<kbd>M-x org-convert-to-odd-levels</kbd> and <kbd>M-x org-convert-to-oddeven-levels</kbd>.\n</p></dd>\n</dl>\n\n"}, {"id": "175Executecommandsintheactiveregion", "content": "\n<span id=\"Execute-commands-in-the-active-region\"></span>\n<span id=\"Execute-commands-in-the-active-region-1\"></span><h3 class=\"section\">17.5 Execute commands in the active region</h3>\n\n<span id=\"index-org_002dloop_002dover_002dheadlines_002din_002dactive_002dregion\"></span>\n<p>When in an Org buffer and the region is active, some commands will\napply to all the subtrees in the active region.  For example, hitting\n<kbd>C-c C-s</kbd> when multiple headlines are within the active region will\nsuccessively prompt you for a new schedule date and time.  To disable\nthis, set the option <code>org-loop-over-headlines-in-active-region</code> to\nnon-<code>t</code>, activate the region and run the command normally.\n</p>\n<span id=\"index-org_002dagenda_002dloop_002dover_002dheadlines_002din_002dactive_002dregion\"></span>\n<p><code>org-agenda-loop-over-headlines-in-active-region</code> is the equivalent\noption of the agenda buffer, where you can also use <a href=\"https://orgmode.org/org.html#Bulk-remote-editing-selected-entries\">bulk editing of\nselected entries</a>.\n</p>\n<p>Not all commands can loop in the active region and what subtrees or\nheadlines are considered can be refined: see the docstrings of these\noptions for more details.\n</p>\n"}, {"id": "176DynamicHeadlineNumbering", "content": "\n<span id=\"Dynamic-Headline-Numbering\"></span>\n<span id=\"Dynamic-Headline-Numbering-1\"></span><h3 class=\"section\">17.6 Dynamic Headline Numbering</h3>\n\n<span id=\"index-Org-Num-mode\"></span>\n<span id=\"index-number-headlines\"></span>\n<p>The Org Num minor mode, toggled with <kbd>M-x org-num-mode</kbd>,\ndisplays outline numbering on top of headlines.  It also updates it\nautomatically upon changes to the structure of the document.\n</p>\n<span id=\"index-org_002dnum_002dmax_002dlevel\"></span>\n<span id=\"index-org_002dnum_002dskip_002dtags\"></span>\n<span id=\"index-org_002dnum_002dskip_002dcommented\"></span>\n<span id=\"index-org_002dnum_002dskip_002dunnumbered\"></span>\n<p>By default, all headlines are numbered.  You can limit numbering to\nspecific headlines according to their level, tags, \u2018<samp>COMMENT</samp>\u2019 keyword,\nor \u2018<samp>UNNUMBERED</samp>\u2019 property.  Set <code>org-num-max-level</code>,\n<code>org-num-skip-tags</code>, <code>org-num-skip-commented</code>,\n<code>org-num-skip-unnumbered</code>, or <code>org-num-skip-footnotes</code> accordingly.\n</p>\n<span id=\"index-org_002dnum_002dskip_002dfootnotes\"></span>\n<p>If <code>org-num-skip-footnotes</code> is non-<code>nil</code>, footnotes sections (see\n<a href=\"https://orgmode.org/org.html#Creating-Footnotes\">Creating Footnotes</a>) are not numbered either.\n</p>\n<span id=\"index-org_002dnum_002dface\"></span>\n<span id=\"index-org_002dnum_002dformat_002dfunction\"></span>\n<p>You can control how the numbering is displayed by setting\n<code>org-num-face</code> and <code>org-num-format-function</code>.\n</p>\n<span id=\"index-org_002dstartup_002dnumerated\"></span>\n<p>You can also turn this mode globally for all Org files by setting the\noption <code>org-startup-numerated</code> to \u2018<samp>t</samp>\u2019, or locally on a file by using\n\u2018<samp>#+startup: num</samp>\u2019.\n</p>\n"}, {"id": "177TheVeryBusykbdCcCckbdKey", "content": "\n<span id=\"The-Very-Busy-C_002dc-C_002dc-Key\"></span>\n<span id=\"The-Very-Busy-C_002dc-C_002dc-Key-1\"></span><h3 class=\"section\">17.7 The Very Busy <kbd>C-c C-c</kbd> Key</h3>\n\n<span id=\"index-C_002dc-C_002dc-19\"></span>\n<span id=\"index-C_002dc-C_002dc_002c-overview\"></span>\n\n<p>The <kbd>C-c C-c</kbd> key in Org serves many purposes depending on\nthe context.  It is probably the most over-worked, multi-purpose key\ncombination in Org.  Its uses are well documented throughout this\nmanual, but here is a consolidated list for easy reference.\n</p>\n<ul>\n<li> If column view (see <a href=\"https://orgmode.org/org.html#Column-View\">Column View</a>) is on, exit column view.\n\n</li><li> If any highlights shown in the buffer from the creation of a sparse\ntree, or from clock display, remove such highlights.\n\n</li><li> If point is in one of the special \u2018<samp>KEYWORD</samp>\u2019 lines, scan the buffer\nfor these lines and update the information.  Also reset the Org file\ncache used to temporary store the contents of URLs used as values\nfor keywords like \u2018<samp>SETUPFILE</samp>\u2019.\n\n</li><li> If point is inside a table, realign the table.\n\n</li><li> If point is on a \u2018<samp>TBLFM</samp>\u2019 keyword, re-apply the formulas to the\nentire table.\n\n</li><li> If the current buffer is a capture buffer, close the note and file\nit.  With a prefix argument, also jump to the target location after\nsaving the note.\n\n</li><li> If point is on a \u2018<samp>&lt;&lt;&lt;target&gt;&gt;&gt;</samp>\u2019, update radio targets and\ncorresponding links in this buffer.\n\n</li><li> If point is on a property line or at the start or end of a property\ndrawer, offer property commands.\n\n</li><li> If point is at a footnote reference, go to the corresponding\ndefinition, and <em>vice versa</em>.\n\n</li><li> If point is on a statistics cookie, update it.\n\n</li><li> If point is in a plain list item with a checkbox, toggle the status\nof the checkbox.\n\n</li><li> If point is on a numbered item in a plain list, renumber the ordered\nlist.\n\n</li><li> If point is on the \u2018<samp>#+BEGIN</samp>\u2019 line of a dynamic block, the block is\nupdated.\n\n</li><li> If point is at a timestamp, fix the day name in the timestamp.\n</li></ul>\n\n"}, {"id": "178SummaryofInBufferSettings", "content": "\n<span id=\"In_002dbuffer-Settings\"></span>\n<span id=\"Summary-of-In_002dBuffer-Settings\"></span><h3 class=\"section\">17.8 Summary of In-Buffer Settings</h3>\n\n<span id=\"index-in_002dbuffer-settings\"></span>\n<span id=\"index-special-keywords\"></span>\n\n<p>In-buffer settings start with \u2018<samp>#+</samp>\u2019, followed by a keyword, a colon,\nand then a word for each setting.  Org accepts multiple settings on\nthe same line.  Org also accepts multiple lines for a keyword.  This\nmanual describes these settings throughout.  A summary follows here.\n</p>\n<span id=\"index-refresh-set_002dup\"></span>\n<p><kbd>C-c C-c</kbd> activates any changes to the in-buffer settings.\nClosing and reopening the Org file in Emacs also activates the\nchanges.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>#+ARCHIVE: %s_done::</samp>\u2019</dt>\n<dd><span id=\"index-ARCHIVE_002c-keyword-1\"></span>\n<span id=\"index-org_002darchive_002dlocation-1\"></span>\n<p>Sets the archive location of the agenda file.  The corresponding\nvariable is <code>org-archive-location</code>.\n</p>\n</dd>\n<dt>\u2018<samp>#+CATEGORY</samp>\u2019</dt>\n<dd><span id=\"index-CATEGORY_002c-keyword-1\"></span>\n<p>Sets the category of the agenda file, which applies to the entire\ndocument.\n</p>\n</dd>\n<dt>\u2018<samp>#+COLUMNS: %25ITEM ...</samp>\u2019</dt>\n<dd><span id=\"index-COLUMNS_002c-property-1\"></span>\n<p>Set the default format for columns view.  This format applies when\ncolumns view is invoked in locations where no \u2018<samp>COLUMNS</samp>\u2019 property\napplies.\n</p>\n</dd>\n<dt>\u2018<samp>#+CONSTANTS: name1=value1 ...</samp>\u2019</dt>\n<dd><span id=\"index-CONSTANTS_002c-keyword-1\"></span>\n<span id=\"index-org_002dtable_002dformula_002dconstants-1\"></span>\n<span id=\"index-org_002dtable_002dformula\"></span>\n<p>Set file-local values for constants that table formulas can use.\nThis line sets the local variable\n<code>org-table-formula-constants-local</code>.  The global version of this\nvariable is <code>org-table-formula-constants</code>.\n</p>\n</dd>\n<dt>\u2018<samp>#+FILETAGS: :tag1:tag2:tag3:</samp>\u2019</dt>\n<dd><span id=\"index-FILETAGS_002c-keyword-1\"></span>\n<p>Set tags that all entries in the file inherit from, including the\ntop-level entries.\n</p>\n</dd>\n<dt>\u2018<samp>#+LINK: linkword replace</samp>\u2019</dt>\n<dd><span id=\"index-LINK_002c-keyword-1\"></span>\n<span id=\"index-org_002dlink_002dabbrev_002dalist-1\"></span>\n<p>Each line specifies one abbreviation for one link.  Use multiple\n\u2018<samp>LINK</samp>\u2019 keywords for more, see <a href=\"https://orgmode.org/org.html#Link-Abbreviations\">Link Abbreviations</a>.  The\ncorresponding variable is <code>org-link-abbrev-alist</code>.\n</p>\n</dd>\n<dt>\u2018<samp>#+PRIORITIES: highest lowest default</samp>\u2019</dt>\n<dd><span id=\"index-PRIORITIES_002c-keyword-1\"></span>\n<span id=\"index-org_002dpriority_002dhighest-1\"></span>\n<span id=\"index-org_002dpriority_002dlowest-1\"></span>\n<span id=\"index-org_002dpriority_002ddefault-1\"></span>\n<p>This line sets the limits and the default for the priorities.  All\nthree must be either letters A\u2013Z or numbers 0\u20139.  The highest\npriority must have a lower ASCII number than the lowest priority.\n</p>\n</dd>\n<dt>\u2018<samp>#+PROPERTY: Property_Name Value</samp>\u2019</dt>\n<dd><span id=\"index-PROPERTY_002c-keyword-1\"></span>\n<p>This line sets a default inheritance value for entries in the\ncurrent buffer, most useful for specifying the allowed values of\na property.\n</p>\n</dd>\n<dt>\u2018<samp>#+SETUPFILE: file</samp>\u2019</dt>\n<dd><span id=\"index-SETUPFILE_002c-keyword-1\"></span>\n<p>The setup file or a URL pointing to such file is for additional\nin-buffer settings.  Org loads this file and parses it for any\nsettings in it only when Org opens the main file.  If URL is\nspecified, the contents are downloaded and stored in a temporary\nfile cache.  <kbd>C-c C-c</kbd> on the settings line parses and\nloads the file, and also resets the temporary file cache.  Org also\nparses and loads the document during normal exporting process.  Org\nparses the contents of this document as if it was included in the\nbuffer.  It can be another Org file.  To visit the file\u2014not\na URL\u2014use <kbd>C-c '</kbd> while point is on the line with the\nfile name.\n</p>\n</dd>\n<dt>\u2018<samp>#+STARTUP:</samp>\u2019</dt>\n<dd><span id=\"index-STARTUP_002c-keyword-2\"></span>\n<p>Startup options Org uses when first visiting a file.\n</p>\n<span id=\"index-org_002dstartup_002dfolded-1\"></span>\n<p>The first set of options deals with the initial visibility of the\noutline tree.  The corresponding variable for global default\nsettings is <code>org-startup-folded</code> with a default value of\n<code>showeverything</code>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>overview</samp>\u2019</td><td>Top-level headlines only.</td></tr>\n<tr><td>\u2018<samp>content</samp>\u2019</td><td>All headlines.</td></tr>\n<tr><td>\u2018<samp>showall</samp>\u2019</td><td>No folding on any entry.</td></tr>\n<tr><td>\u2018<samp>show2levels</samp>\u2019</td><td>Headline levels 1-2.</td></tr>\n<tr><td>\u2018<samp>show3levels</samp>\u2019</td><td>Headline levels 1-3.</td></tr>\n<tr><td>\u2018<samp>show4levels</samp>\u2019</td><td>Headline levels 1-4.</td></tr>\n<tr><td>\u2018<samp>show5levels</samp>\u2019</td><td>Headline levels 1-5.</td></tr>\n<tr><td>\u2018<samp>showeverything</samp>\u2019</td><td>Show even drawer contents.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dstartup_002dindented-1\"></span>\n<p>Dynamic virtual indentation is controlled by the variable\n<code>org-startup-indented</code><a id=\"DOCF151\" href=\"https://orgmode.org/org.html#FOOT151\"><sup>151</sup></a>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>indent</samp>\u2019</td><td>Start with Org Indent mode turned on.</td></tr>\n<tr><td>\u2018<samp>noindent</samp>\u2019</td><td>Start with Org Indent mode turned off.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dstartup_002dnumerated-1\"></span>\n<p>Dynamic virtual numeration of headlines is controlled by the variable\n<code>org-startup-numerated</code>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>num</samp>\u2019</td><td>Start with Org num mode turned on.</td></tr>\n<tr><td>\u2018<samp>nonum</samp>\u2019</td><td>Start with Org num mode turned off.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dstartup_002dalign_002dall_002dtables-1\"></span>\n<p>Aligns tables consistently upon visiting a file.  The\ncorresponding variable is <code>org-startup-align-all-tables</code> with\n<code>nil</code> as default value.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>align</samp>\u2019</td><td>Align all tables.</td></tr>\n<tr><td>\u2018<samp>noalign</samp>\u2019</td><td>Do not align tables on startup.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dstartup_002dshrink_002dall_002dtables-1\"></span>\n<p>Shrink table columns with a width cookie.  The corresponding\nvariable is <code>org-startup-shrink-all-tables</code> with <code>nil</code> as\ndefault value.\n</p>\n<span id=\"index-org_002dstartup_002dwith_002dinline_002dimages-1\"></span>\n<p>When visiting a file, inline images can be automatically\ndisplayed.  The corresponding variable is\n<code>org-startup-with-inline-images</code>, with a default value <code>nil</code> to\navoid delays when visiting a file.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>inlineimages</samp>\u2019</td><td>Show inline images.</td></tr>\n<tr><td>\u2018<samp>noinlineimages</samp>\u2019</td><td>Do not show inline images on startup.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dlog_002ddone-2\"></span>\n<span id=\"index-org_002dlog_002dnote_002dclock_002dout-1\"></span>\n<span id=\"index-org_002dlog_002drepeat-1\"></span>\n<p>Logging the closing and reopening of TODO items and clock\nintervals can be configured using these options (see variables\n<code>org-log-done</code>, <code>org-log-note-clock-out</code>, and <code>org-log-repeat</code>).\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>logdone</samp>\u2019</td><td>Record a timestamp when an item is marked as done.</td></tr>\n<tr><td>\u2018<samp>lognotedone</samp>\u2019</td><td>Record timestamp and a note when DONE.</td></tr>\n<tr><td>\u2018<samp>nologdone</samp>\u2019</td><td>Do not record when items are marked as done.</td></tr>\n<tr><td>\u2018<samp>logrepeat</samp>\u2019</td><td>Record a time when reinstating a repeating item.</td></tr>\n<tr><td>\u2018<samp>lognoterepeat</samp>\u2019</td><td>Record a note when reinstating a repeating item.</td></tr>\n<tr><td>\u2018<samp>nologrepeat</samp>\u2019</td><td>Do not record when reinstating repeating item.</td></tr>\n<tr><td>\u2018<samp>lognoteclock-out</samp>\u2019</td><td>Record a note when clocking out.</td></tr>\n<tr><td>\u2018<samp>nolognoteclock-out</samp>\u2019</td><td>Do not record a note when clocking out.</td></tr>\n<tr><td>\u2018<samp>logreschedule</samp>\u2019</td><td>Record a timestamp when scheduling time changes.</td></tr>\n<tr><td>\u2018<samp>lognotereschedule</samp>\u2019</td><td>Record a note when scheduling time changes.</td></tr>\n<tr><td>\u2018<samp>nologreschedule</samp>\u2019</td><td>Do not record when a scheduling date changes.</td></tr>\n<tr><td>\u2018<samp>logredeadline</samp>\u2019</td><td>Record a timestamp when deadline changes.</td></tr>\n<tr><td>\u2018<samp>lognoteredeadline</samp>\u2019</td><td>Record a note when deadline changes.</td></tr>\n<tr><td>\u2018<samp>nologredeadline</samp>\u2019</td><td>Do not record when a deadline date changes.</td></tr>\n<tr><td>\u2018<samp>logrefile</samp>\u2019</td><td>Record a timestamp when refiling.</td></tr>\n<tr><td>\u2018<samp>lognoterefile</samp>\u2019</td><td>Record a note when refiling.</td></tr>\n<tr><td>\u2018<samp>nologrefile</samp>\u2019</td><td>Do not record when refiling.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dhide_002dleading_002dstars-1\"></span>\n<span id=\"index-org_002dodd_002dlevels_002donly-2\"></span>\n<p>Here are the options for hiding leading stars in outline\nheadings, and for indenting outlines.  The corresponding\nvariables are <code>org-hide-leading-stars</code> and\n<code>org-odd-levels-only</code>, both with a default setting <code>nil</code>\n(meaning \u2018<samp>showstars</samp>\u2019 and \u2018<samp>oddeven</samp>\u2019).\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>hidestars</samp>\u2019</td><td>Make all but one of the stars starting a headline invisible.</td></tr>\n<tr><td>\u2018<samp>showstars</samp>\u2019</td><td>Show all stars starting a headline.</td></tr>\n<tr><td>\u2018<samp>indent</samp>\u2019</td><td>Virtual indentation according to outline level.</td></tr>\n<tr><td>\u2018<samp>noindent</samp>\u2019</td><td>No virtual indentation according to outline level.</td></tr>\n<tr><td>\u2018<samp>odd</samp>\u2019</td><td>Allow only odd outline levels (1, 3, \u2026).</td></tr>\n<tr><td>\u2018<samp>oddeven</samp>\u2019</td><td>Allow all outline levels.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dput_002dtime_002dstamp_002doverlays\"></span>\n<span id=\"index-org_002dtime_002dstamp_002doverlay_002dformats\"></span>\n<p>To turn on custom format overlays over timestamps (variables\n<code>org-put-time-stamp-overlays</code> and\n<code>org-time-stamp-overlay-formats</code>), use:\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>customtime</samp>\u2019</td><td>Overlay custom time format.</td></tr>\n</tbody></table>\n\n<span id=\"index-constants_002dunit_002dsystem-1\"></span>\n<p>The following options influence the table spreadsheet (variable\n<code>constants-unit-system</code>).\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>constcgs</samp>\u2019</td><td>\u2018<samp>constants.el</samp>\u2019 should use the c-g-s unit system.</td></tr>\n<tr><td>\u2018<samp>constSI</samp>\u2019</td><td>\u2018<samp>constants.el</samp>\u2019 should use the SI unit system.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dfootnote_002ddefine_002dinline-1\"></span>\n<span id=\"index-org_002dfootnote_002dauto_002dlabel-1\"></span>\n<span id=\"index-org_002dfootnote_002dauto_002dadjust-1\"></span>\n<p>To influence footnote settings, use the following keywords.  The\ncorresponding variables are <code>org-footnote-define-inline</code>,\n<code>org-footnote-auto-label</code>, and <code>org-footnote-auto-adjust</code>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>fninline</samp>\u2019</td><td>Define footnotes inline.</td></tr>\n<tr><td>\u2018<samp>fnnoinline</samp>\u2019</td><td>Define footnotes in separate section.</td></tr>\n<tr><td>\u2018<samp>fnlocal</samp>\u2019</td><td>Define footnotes near first reference, but not inline.</td></tr>\n<tr><td>\u2018<samp>fnprompt</samp>\u2019</td><td>Prompt for footnote labels.</td></tr>\n<tr><td>\u2018<samp>fnauto</samp>\u2019</td><td>Create \u2018<samp>[fn:1]</samp>\u2019-like labels automatically (default).</td></tr>\n<tr><td>\u2018<samp>fnconfirm</samp>\u2019</td><td>Offer automatic label for editing or confirmation.</td></tr>\n<tr><td>\u2018<samp>fnadjust</samp>\u2019</td><td>Automatically renumber and sort footnotes.</td></tr>\n<tr><td>\u2018<samp>nofnadjust</samp>\u2019</td><td>Do not renumber and sort automatically.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dhide_002dblock_002dstartup-1\"></span>\n<p>To hide blocks on startup, use these keywords.  The\ncorresponding variable is <code>org-hide-block-startup</code>.\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>hideblocks</samp>\u2019</td><td>Hide all begin/end blocks on startup.</td></tr>\n<tr><td>\u2018<samp>nohideblocks</samp>\u2019</td><td>Do not hide blocks on startup.</td></tr>\n</tbody></table>\n\n<span id=\"index-org_002dpretty_002dentities-1\"></span>\n<p>The display of entities as UTF-8 characters is governed by the\nvariable <code>org-pretty-entities</code> and the keywords\n</p>\n<table>\n<tbody><tr><td>\u2018<samp>entitiespretty</samp>\u2019</td><td>Show entities as UTF-8 characters where possible.</td></tr>\n<tr><td>\u2018<samp>entitiesplain</samp>\u2019</td><td>Leave entities plain.</td></tr>\n</tbody></table>\n\n</dd>\n<dt>\u2018<samp>#+TAGS: TAG1(c1) TAG2(c2)</samp>\u2019</dt>\n<dd><span id=\"index-TAGS_002c-keyword-1\"></span>\n<span id=\"index-org_002dtag_002dalist-1\"></span>\n<p>These lines (several such lines are allowed) specify the valid tags\nin this file, and (potentially) the corresponding <em>fast tag\nselection</em> keys.  The corresponding variable is <code>org-tag-alist</code>.\n</p>\n</dd>\n<dt>\u2018<samp>#+TODO:</samp>\u2019</dt>\n<dt>\u2018<samp>#+SEQ_TODO:</samp>\u2019</dt>\n<dt>\u2018<samp>#+TYP_TODO:</samp>\u2019</dt>\n<dd><span id=\"index-SEQ_005fTODO_002c-keyword-1\"></span>\n<span id=\"index-TODO_002c-keyword-1\"></span>\n<span id=\"index-TYP_005fTODO_002c-keyword-1\"></span>\n<span id=\"index-org_002dtodo_002dkeywords-3\"></span>\n<p>These lines set the TODO keywords and their interpretation in the\ncurrent file.  The corresponding variable is <code>org-todo-keywords</code>.\n</p></dd>\n</dl>\n\n"}, {"id": "179RegularExpressions", "content": "\n<span id=\"Regular-Expressions\"></span>\n<span id=\"Regular-Expressions-1\"></span><h3 class=\"section\">17.9 Regular Expressions</h3>\n\n<span id=\"index-regular-expressions-syntax\"></span>\n<span id=\"index-regular-expressions_002c-in-searches\"></span>\n\n<p>Org, as an Emacs mode, makes use of Elisp regular expressions for\nsearching, matching and filtering.  Elisp regular expressions have a\nsomewhat different syntax then some common standards.  Most notably,\nalternation is indicated using \u2018<samp>\\|</samp>\u2019 and matching groups are denoted by\n\u2018<samp>\\(...\\)</samp>\u2019.  For example the string \u2018<samp>home\\|work</samp>\u2019 matches either \u2018<samp>home</samp>\u2019\nor \u2018<samp>work</samp>\u2019.\n</p>\n<p>For more information, see <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Regexps\">(emacs)Regular Expressions in Emacs</a>.\n</p>\n"}, {"id": "1710OrgSyntax", "content": "\n<span id=\"Org-Syntax\"></span>\n<span id=\"Org-Syntax-1\"></span><h3 class=\"section\">17.10 Org Syntax</h3>\n\n<p>A reference document providing a formal description of Org\u2019s syntax is\navailable as <a href=\"https://orgmode.org/worg/dev/org-syntax.html\">a draft on Worg</a>, written and maintained by Nicolas\nGoaziou.  It defines Org\u2019s core internal concepts such as \u201cheadlines\u201d,\n\u201csections\u201d, \u201caffiliated keywords\u201d, \u201c(greater) elements\u201d and \u201cobjects\u201d.\nEach part of an Org document belongs to one of the previous\ncategories.\n</p>\n<p>To explore the abstract structure of an Org buffer, run this in\na buffer:\n</p>\n<div class=\"example\">\n<pre class=\"example\">M-: (org-element-parse-buffer) &lt;RET&gt;\n</pre></div>\n\n\n<p>It outputs a list containing the buffer\u2019s content represented as an\nabstract structure.  The export engine relies on the information\nstored in this list.  Most interactive commands\u2014e.g., for structure\nediting\u2014also rely on the syntactic meaning of the surrounding\ncontext.\n</p>\n<span id=\"index-syntax-checker\"></span>\n<span id=\"index-linter\"></span>\n<span id=\"index-org_002dlint\"></span>\n<p>You can probe the syntax of your documents with the command\n</p>\n<div class=\"example\">\n<pre class=\"example\">M-x org-lint &lt;RET&gt;\n</pre></div>\n\n\n<p>It runs a number of checks to find common mistakes.  It then displays\ntheir location in a dedicated buffer, along with a description and\na \u201ctrust level\u201d, since false-positive are possible.  From there, you\ncan operate on the reports with the following keys:\n</p>\n<table>\n<tbody><tr><td width=\"22%\"><kbd>C-j</kbd>, <kbd><span class=\"key\">TAB</span></kbd></td><td width=\"78%\">Display the offending line</td></tr>\n<tr><td width=\"22%\"><kbd><span class=\"key\">RET</span></kbd></td><td width=\"78%\">Move point to the offending line</td></tr>\n<tr><td width=\"22%\"><kbd>g</kbd></td><td width=\"78%\">Check the document again</td></tr>\n<tr><td width=\"22%\"><kbd>h</kbd></td><td width=\"78%\">Hide all reports from the same checker</td></tr>\n<tr><td width=\"22%\"><kbd>i</kbd></td><td width=\"78%\">Also remove them from all subsequent checks</td></tr>\n<tr><td width=\"22%\"><kbd>S</kbd></td><td width=\"78%\">Sort reports by the column at point</td></tr>\n</tbody></table>\n\n"}, {"id": "1711ContextDependentDocumentation", "content": "\n<span id=\"Documentation-Access\"></span>\n<span id=\"Context-Dependent-Documentation\"></span><h3 class=\"section\">17.11 Context Dependent Documentation</h3>\n\n<span id=\"index-documentation\"></span>\n<span id=\"index-Info\"></span>\n\n<span id=\"index-org_002dinfo_002dfind_002dnode\"></span>\n<span id=\"index-C_002dc-C_002dx-I\"></span>\n<p><kbd>C-c C-x I</kbd> in an Org file tries to open a suitable section\nof the Org manual depending on the syntax at point.  For example,\nusing it on a headline displays \u201cDocument Structure\u201d section.\n</p>\n<p><kbd>q</kbd> closes the Info window.\n</p>\n"}, {"id": "1712EscapeCharacter", "content": "\n<span id=\"Escape-Character\"></span>\n<span id=\"Escape-Character-1\"></span><h3 class=\"section\">17.12 Escape Character</h3>\n\n<span id=\"index-escape-character\"></span>\n<span id=\"index-zero-width-space\"></span>\n<p>You may sometimes want to write text that looks like Org syntax, but\nshould really read as plain text.  Org may use a specific escape\ncharacter in some situations, i.e., a backslash in macros (see <a href=\"https://orgmode.org/org.html#Macro-Replacement\">Macro Replacement</a>) and links (see <a href=\"https://orgmode.org/org.html#Link-Format\">Link Format</a>), or a comma in source and\nexample blocks (see <a href=\"https://orgmode.org/org.html#Literal-Examples\">Literal Examples</a>).  In the general case, however,\nwe suggest to use the zero width space.  You can insert one with any\nof the following:\n</p>\n<div class=\"example\">\n<pre class=\"example\">C-x 8 &lt;RET&gt; zero width space &lt;RET&gt;\nC-x 8 &lt;RET&gt; 200B &lt;RET&gt;\n</pre></div>\n\n\n<p>For example, in order to write \u2018<samp>[[1,2]]</samp>\u2019 as-is in your document, you\nmay write instead\n</p>\n<div class=\"example\">\n<pre class=\"example\">[X[1,2]]\n</pre></div>\n\n\n<p>where \u2018<samp>X</samp>\u2019 denotes the zero width space character.\n</p>\n"}, {"id": "1713CodeEvaluationandSecurityIssues", "content": "\n<span id=\"Code-Evaluation-Security\"></span>\n<span id=\"Code-Evaluation-and-Security-Issues\"></span><h3 class=\"section\">17.13 Code Evaluation and Security Issues</h3>\n\n<p>Unlike plain text, running code comes with risk.  Each source code\nblock, in terms of risk, is equivalent to an executable file.  Org\ntherefore puts a few confirmation prompts by default.  This is to\nalert the casual user from accidentally running untrusted code.\n</p>\n<p>For users who do not run code blocks or write code regularly, Org\u2019s\ndefault settings should suffice.  However, some users may want to\ntweak the prompts for fewer interruptions.  To weigh the risks of\nautomatic execution of code blocks, here are some details about code\nevaluation.\n</p>\n<p>Org evaluates code in the following circumstances:\n</p>\n<dl compact=\"compact\">\n<dt><em>Source code blocks</em></dt>\n<dd><p>Org evaluates source code blocks in an Org file during export.  Org\nalso evaluates a source code block with the <kbd>C-c C-c</kbd> key\nchord.  Users exporting or running code blocks must load files only\nfrom trusted sources.  Be wary of customizing variables that remove\nor alter default security measures.\n</p>\n<dl>\n<dt id=\"index-org_002dconfirm_002dbabel_002devaluate\">User Option: <strong>org-confirm-babel-evaluate</strong></dt>\n<dd><p>When <code>t</code>, Org prompts the user for confirmation before executing\neach code block.  When <code>nil</code>, Org executes code blocks without\nprompting the user for confirmation.  When this option is set to\na custom function, Org invokes the function with these two\narguments: the source code language and the body of the code block.\nThe custom function must return either a <code>t</code> or <code>nil</code>, which\ndetermines if the user is prompted.  Each source code language can\nbe handled separately through this function argument.\n</p></dd></dl>\n\n<p>For example, here is how to execute ditaa code blocks without\nprompting:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-org-confirm-babel-evaluate (lang body)\n  (not (string= lang \"ditaa\")))  ;don't ask for ditaa\n(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)\n</pre></div>\n\n</dd>\n<dt><em>Following \u2018<samp>shell</samp>\u2019 and \u2018<samp>elisp</samp>\u2019 links</em></dt>\n<dd><p>Org has two link types that can directly evaluate code (see\n<a href=\"https://orgmode.org/org.html#External-Links\">External Links</a>).  Because such code is not visible, these links\nhave a potential risk.  Org therefore prompts the user when it\nencounters such links.  The customization variables are:\n</p>\n<dl>\n<dt id=\"index-org_002dlink_002dshell_002dconfirm_002dfunction\">User Option: <strong>org-link-shell-confirm-function</strong></dt>\n<dd><p>Function that prompts the user before executing a shell link.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dlink_002delisp_002dconfirm_002dfunction\">User Option: <strong>org-link-elisp-confirm-function</strong></dt>\n<dd><p>Function that prompts the user before executing an Emacs Lisp link.\n</p></dd></dl>\n\n</dd>\n<dt><em>Formulas in tables</em></dt>\n<dd><p>Formulas in tables (see <a href=\"https://orgmode.org/org.html#The-Spreadsheet\">The Spreadsheet</a>) are code that is evaluated\neither by the Calc interpreter, or by the Emacs Lisp interpreter.\n</p></dd>\n</dl>\n\n"}, {"id": "1714InteractionwithOtherPackages", "content": "\n<span id=\"Interaction\"></span>\n<span id=\"Interaction-with-Other-Packages\"></span><h3 class=\"section\">17.14 Interaction with Other Packages</h3>\n\n<span id=\"index-packages_002c-interaction-with-other\"></span>\n\n<p>Org\u2019s compatibility and the level of interaction with other Emacs\npackages are documented here.\n</p>\n\n\n"}, {"id": "17141PackagesthatOrgcooperateswith", "content": "\n<span id=\"Cooperation\"></span>\n<span id=\"Packages-that-Org-cooperates-with\"></span><h4 class=\"subsection\">17.14.1 Packages that Org cooperates with</h4>\n\n<dl compact=\"compact\">\n<dt>\u2018<samp>calc.el</samp>\u2019 by Dave Gillespie</dt>\n<dd><span id=\"index-calc_002eel\"></span>\n\n<p>Org uses the Calc package for implementing spreadsheet functionality\nin its tables (see <a href=\"https://orgmode.org/org.html#The-Spreadsheet\">The Spreadsheet</a>).  Org also uses Calc for\nembedded calculations.  See <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/calc.html#Embedded-Mode\">(calc)GNU Emacs Calc Manual</a>.\n</p>\n</dd>\n<dt>\u2018<samp>constants.el</samp>\u2019 by Carsten Dominik</dt>\n<dd><span id=\"index-constants_002eel\"></span>\n<span id=\"index-org_002dtable_002dformula_002dconstants-2\"></span>\n\n<p>Org can use names for constants in formulas in tables.  Org can also\nuse calculation suffixes for units, such as \u2018<samp>M</samp>\u2019 for \u2018<samp>Mega</samp>\u2019.  For\na standard collection of such constants, install the \u2018<samp>constants</samp>\u2019\npackage.  Install version 2.0 of this package, available at\n<a href=\"http://www.astro.uva.nl/~dominik/Tools\">http://www.astro.uva.nl/~dominik/Tools</a>.  Org checks if the function\n<code>constants-get</code> has been autoloaded.  Installation instructions are\nin the file \u2018<samp>constants.el</samp>\u2019.\n</p>\n</dd>\n<dt>\u2018<samp>cdlatex.el</samp>\u2019 by Carsten Dominik</dt>\n<dd><span id=\"index-cdlatex_002eel\"></span>\n\n<p>Org mode can make use of the CDLaTeX package to efficiently enter\nLaTeX fragments into Org files.  See <a href=\"https://orgmode.org/org.html#CDLaTeX-mode\">CDLaTeX mode</a>.\n</p>\n</dd>\n<dt>\u2018<samp>imenu.el</samp>\u2019 by Ake Stenhoff and Lars Lindberg</dt>\n<dd><span id=\"index-imenu_002eel\"></span>\n\n<p>Imenu creates dynamic menus based on an index of items in a file.\nOrg mode supports Imenu menus.  Enable it with a mode hook as\nfollows:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'org-mode-hook\n          (lambda () (imenu-add-to-menubar \"Imenu\")))\n</pre></div>\n\n<span id=\"index-org_002dimenu_002ddepth\"></span>\n<p>By default the index is two levels deep\u2014you can modify the\ndepth using the option <code>org-imenu-depth</code>.\n</p>\n</dd>\n<dt>\u2018<samp>speedbar.el</samp>\u2019 by Eric&nbsp;M.&nbsp;Ludlam</dt>\n<dd><span id=\"index-speedbar_002eel\"></span>\n\n<p>Speedbar package creates a special Emacs frame for displaying files\nand index items in files.  Org mode supports Speedbar; users can\ndrill into Org files directly from the Speedbar.  The <kbd>&lt;</kbd>\nin the Speedbar frame tweaks the agenda commands to that file or to\na subtree.\n</p>\n</dd>\n<dt>\u2018<samp>table.el</samp>\u2019 by Takaaki Ota</dt>\n<dd><span id=\"index-table-editor_002c-table_002eel\"></span>\n<span id=\"index-table_002eel\"></span>\n\n<p>Complex ASCII tables with automatic line wrapping, column- and\nrow-spanning, and alignment can be created using the Emacs table\npackage by Takaaki Ota.  Org mode recognizes such tables and exports\nthem properly.  <kbd>C-c '</kbd> to edit these tables in a special\nbuffer, much like Org\u2019s code blocks.  Because of interference with\nother Org mode functionality, Takaaki Ota tables cannot be edited\ndirectly in the Org buffer.\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c '</kbd> (<code>org-edit-special</code>)</dt>\n<dd><span id=\"index-C_002dc-_0027-4\"></span>\n<span id=\"index-org_002dedit_002dspecial-2\"></span>\n<p>Edit a \u2018<samp>table.el</samp>\u2019 table.  Works when point is in a \u2018<samp>table.el</samp>\u2019\ntable.\n</p>\n</dd>\n<dt><kbd>C-c ~\u200b</kbd> (<code>org-table-create-with-table.el</code>)</dt>\n<dd><span id=\"index-C_002dc-_007e\"></span>\n<span id=\"index-org_002dtable_002dcreate_002dwith_002dtable_002eel\"></span>\n<p>Insert a \u2018<samp>table.el</samp>\u2019 table.  If there is already a table at point,\nthis command converts it between the \u2018<samp>table.el</samp>\u2019 format and the Org\nmode format.  See the documentation string of the command\n<code>org-convert-table</code> for the restrictions under which this is\npossible.\n</p></dd>\n</dl>\n</dd>\n</dl>\n\n"}, {"id": "17142PackagesthatconflictwithOrgmode", "content": "\n<span id=\"Conflicts\"></span>\n<span id=\"Packages-that-conflict-with-Org-mode\"></span><h4 class=\"subsection\">17.14.2 Packages that conflict with Org mode</h4>\n\n<span id=\"index-shift_002dselection\"></span>\n<span id=\"index-org_002dsupport_002dshift_002dselect-2\"></span>\n<p>In Emacs, shift-selection combines motions of point with shift key to\nenlarge regions.  Emacs sets this mode by default.  This conflicts\nwith Org\u2019s use of <kbd>S-&lt;cursor&gt;</kbd> commands to change timestamps,\nTODO keywords, priorities, and item bullet types, etc.  Since\n<kbd>S-&lt;cursor&gt;</kbd> commands outside of specific contexts do not do\nanything, Org offers the variable <code>org-support-shift-select</code> for\ncustomization.  Org mode accommodates shift selection by (i) making it\navailable outside of the special contexts where special commands\napply, and (ii) extending an existing active region even if point\nmoves across a special context.\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>cua.el</samp>\u2019 by Kim&nbsp;F.&nbsp;Storm</dt>\n<dd><span id=\"index-cua_002eel\"></span>\n<span id=\"index-org_002dreplace_002ddisputed_002dkeys\"></span>\n<p>Org key bindings conflict with <kbd>S-&lt;cursor&gt;</kbd> keys used by\nCUA mode.  For Org to relinquish these bindings to CUA mode,\nconfigure the variable <code>org-replace-disputed-keys</code>.  When set, Org\nmoves the following key bindings in Org files, and in the agenda\nbuffer\u2014but not during date selection.\n</p>\n<table>\n<tbody><tr><td width=\"40%\"><kbd>S-<span class=\"key\">UP</span></kbd>      \u21d2  <kbd>M-p</kbd></td><td width=\"40%\"><kbd>S-<span class=\"key\">DOWN</span></kbd>     \u21d2  <kbd>M-n</kbd></td></tr>\n<tr><td width=\"40%\"><kbd>S-<span class=\"key\">LEFT</span></kbd>    \u21d2  <kbd>M--</kbd></td><td width=\"40%\"><kbd>S-<span class=\"key\">RIGHT</span></kbd>    \u21d2  <kbd>M-+</kbd></td></tr>\n<tr><td width=\"40%\"><kbd>C-S-<span class=\"key\">LEFT</span></kbd>  \u21d2  <kbd>M-S--</kbd></td><td width=\"40%\"><kbd>C-S-<span class=\"key\">RIGHT</span></kbd>  \u21d2  <kbd>M-S-+</kbd></td></tr>\n</tbody></table>\n\n<span id=\"index-org_002ddisputed_002dkeys\"></span>\n<p>Yes, these are unfortunately more difficult to remember.  If you\nwant to have other replacement keys, look at the variable\n<code>org-disputed-keys</code>.\n</p>\n</dd>\n<dt>\u2018<samp>ecomplete.el</samp>\u2019 by Lars Magne Ingebrigtsen</dt>\n<dd><span id=\"index-ecomplete_002eel\"></span>\n<p>Ecomplete provides \u201celectric\u201d address completion in address header\nlines in message buffers.  Sadly Orgtbl mode cuts Ecomplete\u2019s power\nsupply: no completion happens when Orgtbl mode is enabled in message\nbuffers while entering text in address header lines.  If one wants\nto use ecomplete one should <em>not</em> follow the advice to automagically\nturn on Orgtbl mode in message buffers (see <a href=\"https://orgmode.org/org.html#Orgtbl-Mode\">Orgtbl Mode</a>),\nbut instead\u2014after filling in the message headers\u2014turn on Orgtbl\nmode manually when needed in the messages body.\n</p>\n</dd>\n<dt>\u2018<samp>filladapt.el</samp>\u2019 by Kyle Jones</dt>\n<dd><span id=\"index-filladapt_002eel\"></span>\n<p>Org mode tries to do the right thing when filling paragraphs, list\nitems and other elements.  Many users reported problems using both\n\u2018<samp>filladapt.el</samp>\u2019 and Org mode, so a safe thing to do is to disable\nfilladapt like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'org-mode-hook 'turn-off-filladapt-mode)\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>viper.el</samp>\u2019 by Michael Kifer</dt>\n<dd><span id=\"index-viper_002eel\"></span>\n<span id=\"index-C_002dc-_002f-1\"></span>\n\n<p>Viper uses <kbd>C-c /</kbd> and therefore makes this key not access\nthe corresponding Org mode command <code>org-sparse-tree</code>.  You need to\nfind another key for this command, or override the key in\n<code>viper-vi-global-user-map</code> with\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(define-key viper-vi-global-user-map \"C-c /\" 'org-sparse-tree)\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>windmove.el</samp>\u2019 by Hovav Shacham</dt>\n<dd><span id=\"index-windmove_002eel\"></span>\n\n<p>This package also uses the <kbd>S-&lt;cursor&gt;</kbd> keys, so everything\nwritten in the paragraph above about CUA mode also applies here.  If\nyou want to make the windmove function active in locations where Org\nmode does not have special functionality on <kbd>S-&lt;cursor&gt;</kbd>,\nadd this to your configuration:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">;; Make windmove work in Org mode:\n(add-hook 'org-shiftup-final-hook 'windmove-up)\n(add-hook 'org-shiftleft-final-hook 'windmove-left)\n(add-hook 'org-shiftdown-final-hook 'windmove-down)\n(add-hook 'org-shiftright-final-hook 'windmove-right)\n</pre></div>\n\n</dd>\n<dt>\u2018<samp>yasnippet.el</samp>\u2019</dt>\n<dd><span id=\"index-yasnippet_002eel\"></span>\n<p>The way Org mode binds the <kbd><span class=\"key\">TAB</span></kbd> key (binding to <code>[tab]</code>\ninstead of <code>\"\\t\"</code>) overrules YASnippet\u2019s access to this key.  The\nfollowing code fixed this problem:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'org-mode-hook\n          (lambda ()\n            (setq-local yas/trigger-key [tab])\n            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))\n</pre></div>\n\n<p>The latest version of YASnippet does not play well with Org mode.\nIf the above code does not fix the conflict, start by defining\nthe following function:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun yas/org-very-safe-expand ()\n  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))\n</pre></div>\n\n<p>Then, tell Org mode to use that function:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(add-hook 'org-mode-hook\n          (lambda ()\n            (make-variable-buffer-local 'yas/trigger-key)\n            (setq yas/trigger-key [tab])\n            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)\n            (define-key yas/keymap [tab] 'yas/next-field)))\n</pre></div>\n</dd>\n</dl>\n\n"}, {"id": "1715UsingOrgonaTTY", "content": "\n<span id=\"TTY-Keys\"></span>\n<span id=\"Using-Org-on-a-TTY\"></span><h3 class=\"section\">17.15 Using Org on a TTY</h3>\n\n<span id=\"index-tty-key-bindings\"></span>\n\n<p>Org provides alternative key bindings for TTY and modern mobile\ndevices that cannot perform movement commands on point and key\nbindings with modifier keys.  Some of these workarounds may be more\ncumbersome than necessary.  Users should look into customizing these\nfurther based on their usage needs.  For example, the normal\n<kbd>S-&lt;cursor&gt;</kbd> for editing timestamp might be better with\n<kbd>C-c .</kbd> chord.\n</p>\n<table>\n<thead><tr><th width=\"20%\">Default</th><th width=\"28%\">Alternative 1</th><th width=\"15%\">Speed key</th><th width=\"21%\">Alternative 2</th></tr></thead>\n<tbody><tr><td width=\"20%\"><kbd>S-<span class=\"key\">TAB</span></kbd></td><td width=\"28%\"><kbd>C-u <span class=\"key\">TAB</span></kbd></td><td width=\"15%\"><kbd>C</kbd></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">LEFT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x l</kbd></td><td width=\"15%\"><kbd>l</kbd></td><td width=\"21%\"><kbd>Esc <span class=\"key\">LEFT</span></kbd></td></tr>\n<tr><td width=\"20%\"><kbd>M-S-<span class=\"key\">LEFT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x L</kbd></td><td width=\"15%\"><kbd>L</kbd></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">RIGHT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x r</kbd></td><td width=\"15%\"><kbd>r</kbd></td><td width=\"21%\"><kbd>Esc <span class=\"key\">RIGHT</span></kbd></td></tr>\n<tr><td width=\"20%\"><kbd>M-S-<span class=\"key\">RIGHT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x R</kbd></td><td width=\"15%\"><kbd>R</kbd></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">UP</span></kbd></td><td width=\"28%\"><kbd>C-c C-x u</kbd></td><td width=\"15%\"></td><td width=\"21%\"><kbd>Esc <span class=\"key\">UP</span></kbd></td></tr>\n<tr><td width=\"20%\"><kbd>M-S-<span class=\"key\">UP</span></kbd></td><td width=\"28%\"><kbd>C-c C-x U</kbd></td><td width=\"15%\"><kbd>U</kbd></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">DOWN</span></kbd></td><td width=\"28%\"><kbd>C-c C-x d</kbd></td><td width=\"15%\"></td><td width=\"21%\"><kbd>Esc <span class=\"key\">DOWN</span></kbd></td></tr>\n<tr><td width=\"20%\"><kbd>M-S-<span class=\"key\">DOWN</span></kbd></td><td width=\"28%\"><kbd>C-c C-x D</kbd></td><td width=\"15%\"><kbd>D</kbd></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>S-<span class=\"key\">RET</span></kbd></td><td width=\"28%\"><kbd>C-c C-x c</kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>M-<span class=\"key\">RET</span></kbd></td><td width=\"28%\"><kbd>C-c C-x m</kbd></td><td width=\"15%\"></td><td width=\"21%\"><kbd>Esc <span class=\"key\">RET</span></kbd></td></tr>\n<tr><td width=\"20%\"><kbd>M-S-<span class=\"key\">RET</span></kbd></td><td width=\"28%\"><kbd>C-c C-x M</kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>S-<span class=\"key\">LEFT</span></kbd></td><td width=\"28%\"><kbd>C-c <span class=\"key\">LEFT</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>S-<span class=\"key\">RIGHT</span></kbd></td><td width=\"28%\"><kbd>C-c <span class=\"key\">RIGHT</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>S-<span class=\"key\">UP</span></kbd></td><td width=\"28%\"><kbd>C-c <span class=\"key\">UP</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>S-<span class=\"key\">DOWN</span></kbd></td><td width=\"28%\"><kbd>C-c <span class=\"key\">DOWN</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>C-S-<span class=\"key\">LEFT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x <span class=\"key\">LEFT</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n<tr><td width=\"20%\"><kbd>C-S-<span class=\"key\">RIGHT</span></kbd></td><td width=\"28%\"><kbd>C-c C-x <span class=\"key\">RIGHT</span></kbd></td><td width=\"15%\"></td><td width=\"21%\"></td></tr>\n</tbody></table>\n\n"}, {"id": "1716ProtocolsforExternalAccess", "content": "\n<span id=\"Protocols\"></span>\n<span id=\"Protocols-for-External-Access\"></span><h3 class=\"section\">17.16 Protocols for External Access</h3>\n\n<span id=\"index-protocols_002c-for-external-access-1\"></span>\n\n<p>Org protocol is a tool to trigger custom actions in Emacs from\nexternal applications.  Any application that supports calling external\nprograms with an URL as argument may be used with this functionality.\nFor example, you can configure bookmarks in your web browser to send a\nlink to the current page to Org and create a note from it using\ncapture (see <a href=\"https://orgmode.org/org.html#Capture\">Capture</a>).  You can also create a bookmark that tells\nEmacs to open the local source file of a remote website you are\nbrowsing.\n</p>\n<span id=\"index-Org-protocol_002c-set_002dup\"></span>\n<span id=\"index-Installing-Org-protocol\"></span>\n<p>In order to use Org protocol from an application, you need to register\n\u2018<samp>org-protocol://</samp>\u2019 as a valid scheme-handler.  External calls are\npassed to Emacs through the \u2018<samp>emacsclient</samp>\u2019 command, so you also need to\nensure an Emacs server is running.  More precisely, when the\napplication calls\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacsclient \"org-protocol://PROTOCOL?key1=val1&amp;key2=val2\"\n</pre></div>\n\n\n<p>Emacs calls the handler associated to <var>PROTOCOL</var> with\nargument \u2018<samp>(:key1 val1 :key2 val2)</samp>\u2019.\n</p>\n<span id=\"index-protocol_002c-new-protocol\"></span>\n<span id=\"index-defining-new-protocols\"></span>\n<p>Org protocol comes with three predefined protocols, detailed in the\nfollowing sections.  Configure <code>org-protocol-protocol-alist</code> to define\nyour own.\n</p>\n\n\n"}, {"id": "17161Thecodestorelinkcodeprotocol", "content": "\n<span id=\"The-store_002dlink-protocol\"></span>\n<span id=\"The-store_002dlink-protocol-1\"></span><h4 class=\"subsection\">17.16.1 The <code>store-link</code> protocol</h4>\n\n<span id=\"index-store_002dlink-protocol\"></span>\n<span id=\"index-protocol_002c-store_002dlink\"></span>\n\n<p>Using the <code>store-link</code> handler, you can copy links, to that they can\nbe inserted using <kbd>M-x org-insert-link</kbd> or yanking.  More\nprecisely, the command\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacsclient \"org-protocol://store-link?url=URL&amp;title=TITLE\"\n</pre></div>\n\n\n<p>stores the following link:\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[URL][TITLE]]\n</pre></div>\n\n\n<p>In addition, <var>URL</var> is pushed on the kill-ring for yanking.\nYou need to encode <var>URL</var> and <var>TITLE</var> if they contain\nslashes, and probably quote those for the shell.\n</p>\n<p>To use this feature from a browser, add a bookmark with an arbitrary\nname, e.g., \u2018<samp>Org: store-link</samp>\u2019 and enter this as <em>Location</em>:\n</p>\n<div class=\"example\">\n<pre class=\"example\">javascript:location.href='org-protocol://store-link?' +\n      new URLSearchParams({url:location.href, title:document.title});\n</pre></div>\n\n<p>Title is an optional parameter.  Another expression was recommended earlier:\n</p>\n<div class=\"example\">\n<pre class=\"example\">javascript:location.href='org-protocol://store-link?url='+\n      encodeURIComponent(location.href);\n</pre></div>\n\n<p>The latter form is compatible with older Org versions from 9.0 to 9.4.\n</p>\n"}, {"id": "17162Thecodecapturecodeprotocol", "content": "\n<span id=\"The-capture-protocol\"></span>\n<span id=\"The-capture-protocol-1\"></span><h4 class=\"subsection\">17.16.2 The <code>capture</code> protocol</h4>\n\n<span id=\"index-capture-protocol\"></span>\n<span id=\"index-protocol_002c-capture\"></span>\n\n<p>Activating the \u201ccapture\u201d handler pops up a \u2018<samp>Capture</samp>\u2019 buffer in Emacs,\nusing acapture template.\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacsclient \"org-protocol://capture?template=X&amp;url=URL&amp;title=TITLE&amp;body=BODY\"\n</pre></div>\n\n\n<p>To use this feature, add a bookmark with an arbitrary name, e.g.,\n\u2018<samp>Org: capture</samp>\u2019, and enter this as \u2018<samp>Location</samp>\u2019:\n</p>\n<div class=\"example\">\n<pre class=\"example\">javascript:location.href='org-protocol://capture?' +\n      new URLSearchParams({\n            template: 'x', url: window.location.href,\n            title: document.title, body: window.getSelection()});\n</pre></div>\n\n<p>You might have seen another expression:\n</p>\n<div class=\"example\">\n<pre class=\"example\">javascript:location.href='org-protocol://capture?template=x'+\n      '&amp;url='+encodeURIComponent(window.location.href)+\n      '&amp;title='+encodeURIComponent(document.title)+\n      '&amp;body='+encodeURIComponent(window.getSelection());\n</pre></div>\n\n<p>It is a bit more cluttered than the former one, but it is compatible\nwith previous Org versions 9.0-9.4.  In these versions encoding of\nspace as \u201c+\u201d character was not supported by URI decoder.\n</p>\n<span id=\"index-org_002dprotocol_002ddefault_002dtemplate_002dkey\"></span>\n<p>The capture template to be used can be specified in the bookmark (like\n\u2018<samp>X</samp>\u2019 above).  If unspecified, the template key is set in the variable\n<code>org-protocol-default-template-key</code>.  The following template\nplaceholders are available:\n</p>\n<div class=\"example\">\n<pre class=\"example\">%:link          The URL\n%:description   The webpage title\n%:annotation    Equivalent to [[%:link][%:description]]\n%i              The selected text\n</pre></div>\n\n"}, {"id": "17163Thecodeopensourcecodeprotocol", "content": "\n<span id=\"The-open_002dsource-protocol\"></span>\n<span id=\"The-open_002dsource-protocol-1\"></span><h4 class=\"subsection\">17.16.3 The <code>open-source</code> protocol</h4>\n\n<span id=\"index-open_002dsource-protocol\"></span>\n<span id=\"index-protocol_002c-open_002dsource\"></span>\n\n<p>The <code>open-source</code> handler is designed to help with editing local\nsources when reading a document.  To that effect, you can use\na bookmark with the following location:\n</p>\n<div class=\"example\">\n<pre class=\"example\">javascript:location.href='org-protocol://open-source?&amp;url='+\n      encodeURIComponent(location.href)\n</pre></div>\n\n<span id=\"index-org_002dprotocol_002dproject_002dalist\"></span>\n<p>The variable <code>org-protocol-project-alist</code> maps URLs to local file\nnames, by stripping URL parameters from the end and replacing the\n<code>:base-url</code> with <code>:working-directory</code> and <code>:online-suffix</code> with\n<code>:working-suffix</code>.  For example, assuming you own a local copy of\n\u2018<samp>https://orgmode.org/worg/</samp>\u2019 contents at \u2018<samp>/home/user/worg</samp>\u2019, you can set\n<code>org-protocol-project-alist</code> to the following\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-protocol-project-alist\n      '((\"Worg\"\n         :base-url \"https://orgmode.org/worg/\"\n         :working-directory \"/home/user/worg/\"\n         :online-suffix \".html\"\n         :working-suffix \".org\")))\n</pre></div>\n\n<p>If you are now browsing\n\u2018<samp>https://orgmode.org/worg/org-contrib/org-protocol.html</samp>\u2019 and find\na typo or have an idea about how to enhance the documentation, simply\nclick the bookmark and start editing.\n</p>\n<span id=\"index-rewritten-URL-in-open_002dsource-protocol\"></span>\n<span id=\"index-protocol_002c-open_002dsource-rewritten-URL\"></span>\n<p>However, such mapping may not always yield the desired results.\nSuppose you maintain an online store located at \u2018<samp>https://example.com/</samp>\u2019.\nThe local sources reside in \u2018<samp>/home/user/example/</samp>\u2019.  It is common\npractice to serve all products in such a store through one file and\nrewrite URLs that do not match an existing file on the server.  That\nway, a request to \u2018<samp>https://example.com/print/posters.html</samp>\u2019 might be\nrewritten on the server to something like\n\u2018<samp>https://example.com/shop/products.php/posters.html.php</samp>\u2019.  The\n<code>open-source</code> handler probably cannot find a file named\n\u2018<samp>/home/user/example/print/posters.html.php</samp>\u2019 and fails.\n</p>\n<p>Such an entry in <code>org-protocol-project-alist</code> may hold an additional\nproperty <code>:rewrites</code>.  This property is a list of cons cells, each of\nwhich maps a regular expression to a path relative to the\n<code>:working-directory</code>.\n</p>\n<p>Now map the URL to the path \u2018<samp>/home/user/example/products.php</samp>\u2019 by\nadding <code>:rewrites</code> rules like this:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-protocol-project-alist\n      '((\"example.com\"\n         :base-url \"https://example.com/\"\n         :working-directory \"/home/user/example/\"\n         :online-suffix \".php\"\n         :working-suffix \".php\"\n         :rewrites ((\"example.com/print/\" . \"products.php\")\n                    (\"example.com/$\" . \"index.php\")))))\n</pre></div>\n\n<p>Since \u2018<samp>example.com/$</samp>\u2019 is used as a regular expression, it maps\n\u2018<samp>http://example.com/</samp>\u2019, \u2018<samp>https://example.com</samp>\u2019,\n\u2018<samp>http://www.example.com/</samp>\u2019 and similar to\n\u2018<samp>/home/user/example/index.php</samp>\u2019.\n</p>\n<p>The <code>:rewrites</code> rules are searched as a last resort if and only if no\nexisting file name is matched.\n</p>\n<span id=\"index-protocol_002c-open_002dsource_002c-set_002dup-mapping\"></span>\n<span id=\"index-mappings-in-open_002dsource-protocol\"></span>\n<span id=\"index-org_002dprotocol_002dcreate\"></span>\n<span id=\"index-org_002dprotocol_002dcreate_002dfor_002dorg\"></span>\n<p>Two functions can help you filling <code>org-protocol-project-alist</code> with\nvalid contents: <code>org-protocol-create</code> and\n<code>org-protocol-create-for-org</code>.  The latter is of use if you\u2019re editing\nan Org file that is part of a publishing project.\n</p>\n"}, {"id": "1717OrgCrypt", "content": "\n<span id=\"Org-Crypt\"></span>\n<span id=\"Org-Crypt-1\"></span><h3 class=\"section\">17.17 Org Crypt</h3>\n\n<p>Org Crypt encrypts the text of an entry, but not the headline, or\nproperties.  Behind the scene, it uses the <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/epa.html#Top\">(epa)Emacs EasyPG Library</a> to\nencrypt and decrypt files, and EasyPG needs a correct <a href=\"https://www.gnupg.org/documentation/manuals/gnupg/index.html#Top\">(gnupg)GnuPG</a> setup.\n</p>\n<span id=\"index-org_002dcrypt_002dtag_002dmatcher\"></span>\n<p>Any text below a headline that has a \u2018<samp>crypt</samp>\u2019 tag is automatically\nencrypted when the file is saved.  To use a different tag, customize\nthe <code>org-crypt-tag-matcher</code> setting.\n</p>\n<p>Here is a suggestion for Org Crypt settings in Emacs init file:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'org-crypt)\n(org-crypt-use-before-save-magic)\n(setq org-tags-exclude-from-inheritance '(\"crypt\"))\n\n(setq org-crypt-key nil)\n;; GPG key to use for encryption\n;; Either the Key ID or set to nil to use symmetric encryption.\n\n(setq auto-save-default nil)\n;; Auto-saving does not cooperate with org-crypt.el: so you need to\n;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,\n;; you'll get an (annoying) message each time you start Org.\n\n;; To turn it off only locally, you can insert this:\n;;\n;; # -*- buffer-auto-save-file-name: nil; -*-\n</pre></div>\n\n<p>It\u2019s possible to use different keys for different headings by\nspecifying the respective key as property \u2018<samp>CRYPTKEY</samp>\u2019, e.g.:\n</p>\n<div class=\"example\">\n<pre class=\"example\">* Totally secret :crypt:\n  :PROPERTIES:\n  :CRYPTKEY: 0x0123456789012345678901234567890123456789\n  :END:\n</pre></div>\n\n<p>Excluding the \u2018<samp>crypt</samp>\u2019 tag from inheritance prevents already encrypted\ntext from being encrypted again.\n</p>\n"}, {"id": "1718OrgMobile", "content": "\n<span id=\"Org-Mobile\"></span>\n<span id=\"Org-Mobile-1\"></span><h3 class=\"section\">17.18 Org Mobile</h3>\n\n<span id=\"index-smartphone\"></span>\n\n<p>Org Mobile is a protocol for synchronizing Org files between Emacs and\nother applications, e.g., on mobile devices.  It enables offline-views\nand capture support for an Org mode system that is rooted on a \u201creal\u201d\ncomputer.  The external application can also record changes to\nexisting entries.\n</p>\n<p>This appendix describes Org\u2019s support for agenda view formats\ncompatible with Org Mobile.  It also describes synchronizing changes,\nsuch as to notes, between the mobile application and the computer.\n</p>\n<p>To change tags and TODO states in the mobile application, first\ncustomize the variables <code>org-todo-keywords</code>, <code>org-tag-alist</code> and\n<code>org-tag-persistent-alist</code>.  These should cover all the important tags\nand TODO keywords, even if Org files use only some of them.  Though\nthe mobile application is expected to support in-buffer settings, it\nis required to understand TODO states <em>sets</em> (see <a href=\"https://orgmode.org/org.html#Per_002dfile-keywords\">Per-file keywords</a>) and <em>mutually exclusive</em> tags (see <a href=\"https://orgmode.org/org.html#Setting-Tags\">Setting Tags</a>) only for those set in these variables.\n</p>\n\n\n"}, {"id": "17181Settingupthestagingarea", "content": "\n<span id=\"Setting-up-the-staging-area\"></span>\n<span id=\"Setting-up-the-staging-area-1\"></span><h4 class=\"subsection\">17.18.1 Setting up the staging area</h4>\n\n<span id=\"index-org_002dmobile_002ddirectory\"></span>\n<p>The mobile application needs access to a file directory on\na server<a id=\"DOCF152\" href=\"https://orgmode.org/org.html#FOOT152\"><sup>152</sup></a> to interact with Emacs.  Pass its location through\nthe <code>org-mobile-directory</code> variable.  If you can mount that directory\nlocally just set the variable to point to that directory:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-mobile-directory \"~/orgmobile/\")\n</pre></div>\n\n<p>Alternatively, by using TRAMP (see <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Top\">(tramp)TRAMP User Manual</a>),\n<code>org-mobile-directory</code> may point to a remote directory accessible\nthrough, for example, SSH, SCP, or DAVS:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-mobile-directory \"/davs:user@remote.host:/org/webdav/\")\n</pre></div>\n\n<span id=\"index-org_002dmobile_002dencryption\"></span>\n<p>With a public server, consider encrypting the files.  Org also\nrequires OpenSSL installed on the local computer.  To turn on\nencryption, set the same password in the mobile application and in\nEmacs.  Set the password in the variable\n<code>org-mobile-use-encryption</code><a id=\"DOCF153\" href=\"https://orgmode.org/org.html#FOOT153\"><sup>153</sup></a>.  Note that even after the mobile\napplication encrypts the file contents, the file name remains visible\non the file systems of the local computer, the server, and the mobile\ndevice.\n</p>\n"}, {"id": "17182Pushingtothemobileapplication", "content": "\n<span id=\"Pushing-to-the-mobile-application\"></span>\n<span id=\"Pushing-to-the-mobile-application-1\"></span><h4 class=\"subsection\">17.18.2 Pushing to the mobile application</h4>\n\n<span id=\"index-org_002dmobile_002dpush\"></span>\n<span id=\"index-org_002dmobile_002dfiles\"></span>\n<p>The command <code>org-mobile-push</code> copies files listed in\n<code>org-mobile-files</code> into the staging area.  Files include agenda files\n(as listed in <code>org-agenda-files</code>).  Customize <code>org-mobile-files</code> to\nadd other files.  File names are staged with paths relative to\n<code>org-directory</code>, so all files should be inside this directory<a id=\"DOCF154\" href=\"https://orgmode.org/org.html#FOOT154\"><sup>154</sup></a>.\n</p>\n<p>Push creates a special Org file \u2018<samp>agendas.org</samp>\u2019 with custom agenda views\ndefined by the user<a id=\"DOCF155\" href=\"https://orgmode.org/org.html#FOOT155\"><sup>155</sup></a>.\n</p>\n<p>Finally, Org writes the file \u2018<samp>index.org</samp>\u2019, containing links to other\nfiles.  The mobile application reads this file first from the server\nto determine what other files to download for agendas.  For faster\ndownloads, it is expected to only read files whose checksums<a id=\"DOCF156\" href=\"https://orgmode.org/org.html#FOOT156\"><sup>156</sup></a>\nhave changed.\n</p>\n"}, {"id": "17183Pullingfromthemobileapplication", "content": "\n<span id=\"Pulling-from-the-mobile-application\"></span>\n<span id=\"Pulling-from-the-mobile-application-1\"></span><h4 class=\"subsection\">17.18.3 Pulling from the mobile application</h4>\n\n<span id=\"index-org_002dmobile_002dpull\"></span>\n<p>The command <code>org-mobile-pull</code> synchronizes changes with the server.\nMore specifically, it first pulls the Org files for viewing.  It then\nappends captured entries and pointers to flagged or changed entries to\nthe file \u2018<samp>mobileorg.org</samp>\u2019 on the server.  Org ultimately integrates its\ndata in an inbox file format, through the following steps:\n</p>\n<ol>\n<li> <span id=\"index-org_002dmobile_002dinbox_002dfor_002dpull\"></span>\nOrg moves all entries found in \u2018<samp>mobileorg.org</samp>\u2019<a id=\"DOCF157\" href=\"https://orgmode.org/org.html#FOOT157\"><sup>157</sup></a> and appends\nthem to the file pointed to by the variable\n<code>org-mobile-inbox-for-pull</code>.  It should reside neither in the\nstaging area nor on the server.  Each captured entry and each\nediting event is a top-level entry in the inbox file.\n\n</li><li> <span id=\"index-FLAGGED_002c-tag\"></span>\nAfter moving the entries, Org processes changes to the shared\nfiles.  Some of them are applied directly and without user\ninteraction.  Examples include changes to tags, TODO state,\nheadline and body text.  Entries requiring further action are\ntagged as \u2018<samp>FLAGGED</samp>\u2019.  Org marks entries with problems with an error\nmessage in the inbox.  They have to be resolved manually.\n\n</li><li> Org generates an agenda view for flagged entries for user\nintervention to clean up.  For notes stored in flagged entries, Org\ndisplays them in the echo area when point is on the corresponding\nagenda item.\n\n<dl compact=\"compact\">\n<dt><kbd>?</kbd></dt>\n<dd><p>Pressing <kbd>?</kbd> displays the entire flagged note in another\nwindow.  Org also pushes it to the kill ring.  To store flagged\nnote as a normal note, use <kbd>? z C-y C-c C-c</kbd>.  Pressing\n<kbd>?</kbd> twice does these things: first it removes the\n\u2018<samp>FLAGGED</samp>\u2019 tag; second, it removes the flagged note from the\nproperty drawer; third, it signals that manual editing of the\nflagged entry is now finished.\n</p></dd>\n</dl>\n</li></ol>\n\n<span id=\"index-_003f-_0028Agenda-dispatcher_0029\"></span>\n<p>From the agenda dispatcher, <kbd>?</kbd> returns to the view to finish\nprocessing flagged entries.  Note that these entries may not be the\nmost recent since the mobile application searches files that were last\npulled.  To get an updated agenda view with changes since the last\npull, pull again.\n</p>\n"}, {"id": "AppendixAHacking", "content": "\n<span id=\"Hacking\"></span>\n<span id=\"Hacking-1\"></span><h2 class=\"appendix\">Appendix A Hacking</h2>\n\n<span id=\"index-hacking\"></span>\n\n<p>This appendix describes some ways a user can extend the functionality\nof Org.\n</p>\n\n\n"}, {"id": "A1Hooks", "content": "\n<span id=\"Hooks\"></span>\n<span id=\"Hooks-1\"></span><h3 class=\"appendixsec\">A.1 Hooks</h3>\n\n<span id=\"index-hooks\"></span>\n\n<p>Org has a large number of hook variables for adding functionality.\nThis appendix illustrates using a few.  A complete list of hooks with\ndocumentation is maintained by the Worg project at\n<a href=\"https://orgmode.org/worg/doc.html#hooks\">https://orgmode.org/worg/doc.html#hooks</a>.\n</p>\n"}, {"id": "A2AddonPackages", "content": "\n<span id=\"Add_002don-Packages\"></span>\n<span id=\"Add_002don-Packages-1\"></span><h3 class=\"appendixsec\">A.2 Add-on Packages</h3>\n\n<span id=\"index-add_002don-packages\"></span>\n\n<p>Various authors wrote a large number of add-on packages for Org.  Some\nof these packages used to be part of the \u2018<samp>org-mode</samp>\u2019 repository but are\nnow hosted in a separate \u2018<samp>org-contrib</samp>\u2019 repository\n<a href=\"https://git.sr.ht/~bzg/org-contrib\">here</a>.  A Worg page with more\ninformation is at: <a href=\"https://orgmode.org/worg/org-contrib/\">https://orgmode.org/worg/org-contrib/</a>.\n</p>\n"}, {"id": "A3AddingHyperlinkTypes", "content": "\n<span id=\"Adding-Hyperlink-Types\"></span>\n<span id=\"Adding-Hyperlink-Types-1\"></span><h3 class=\"appendixsec\">A.3 Adding Hyperlink Types</h3>\n\n<span id=\"index-hyperlinks_002c-adding-new-types\"></span>\n\n<p>Org has many built-in hyperlink types (see <a href=\"https://orgmode.org/org.html#Hyperlinks\">Hyperlinks</a>), and an\ninterface for adding new link types.  The following example shows the\nprocess of adding Org links to Unix man pages, which look like this\n</p>\n<div class=\"example\">\n<pre class=\"example\">[[man:printf][The printf manual]]\n</pre></div>\n\n\n<p>The following \u2018<samp>ol-man.el</samp>\u2019 file implements it\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">;;; ol-man.el - Support for links to man pages in Org mode\n(require 'ol)\n\n(org-link-set-parameters \"man\"\n                         :follow #'org-man-open\n                         :export #'org-man-export\n                         :store #'org-man-store-link)\n\n(defcustom org-man-command 'man\n  \"The Emacs command to be used to display a man page.\"\n  :group 'org-link\n  :type '(choice (const man) (const woman)))\n\n(defun org-man-open (path _)\n  \"Visit the manpage on PATH.\nPATH should be a topic that can be thrown at the man command.\"\n  (funcall org-man-command path))\n\n(defun org-man-store-link ()\n  \"Store a link to a man page.\"\n  (when (memq major-mode '(Man-mode woman-mode))\n    ;; This is a man page, we do make this link.\n    (let* ((page (org-man-get-page-name))\n           (link (concat \"man:\" page))\n           (description (format \"Man page for %s\" page)))\n      (org-link-store-props\n       :type \"man\"\n       :link link\n       :description description))))\n\n(defun org-man-get-page-name ()\n  \"Extract the page name from the buffer name.\"\n  ;; This works for both `Man-mode' and `woman-mode'.\n  (if (string-match \" \\\\(\\\\S-+\\\\)\\\\*\" (buffer-name))\n      (match-string 1 (buffer-name))\n    (error \"Cannot create link to this man page\")))\n\n(defun org-man-export (link description format _)\n  \"Export a man page link from Org files.\"\n  (let ((path (format \"http://man.he.net/?topic=%s&amp;section=all\" link))\n        (desc (or description link)))\n    (pcase format\n      (`html (format \"&lt;a target=\\\"_blank\\\" href=\\\"%s\\\"&gt;%s&lt;/a&gt;\" path desc))\n      (`latex (format \"\\\\href{%s}{%s}\" path desc))\n      (`texinfo (format \"@uref{%s,%s}\" path desc))\n      (`ascii (format \"%s (%s)\" desc path))\n      (t path))))\n\n(provide ol-man)\n;;; ol-man.el ends here\n</pre></div>\n\n<p>To activate links to man pages in Org, enter this in the Emacs init\nfile:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(require 'ol-man)\n</pre></div>\n\n<p>A review of \u2018<samp>ol-man.el</samp>\u2019:\n</p>\n<ol>\n<li> First, \u2018<samp>(require 'ol)</samp>\u2019 ensures that \u2018<samp>ol.el</samp>\u2019 is loaded.\n\n</li><li> <span id=\"index-org_002dlink_002dset_002dparameters\"></span>\n<span id=\"index-org_002dlink_002dparameters\"></span>\nThen <code>org-link-set-parameters</code> defines a new link type with \u2018<samp>man</samp>\u2019\nprefix and associates functions for following, exporting and\nstoring such links.  See the variable <code>org-link-parameters</code> for\na complete list of possible associations.\n\n</li><li> The rest of the file implements necessary variables and functions.\n\n<p>For example, <code>org-man-store-link</code> is responsible for storing a link\nwhen <code>org-store-link</code> (see <a href=\"https://orgmode.org/org.html#Handling-Links\">Handling Links</a>) is called from a buffer\ndisplaying a man page.  It first checks if the major mode is\nappropriate.  If check fails, the function returns <code>nil</code>, which\nmeans it isn\u2019t responsible for creating a link to the current\nbuffer.  Otherwise the function makes a link string by combining\nthe \u2018<samp>man:</samp>\u2019 prefix with the man topic.  It also provides a default\ndescription.  The function <code>org-insert-link</code> can insert it back\ninto an Org buffer later on.\n</p></li></ol>\n\n"}, {"id": "A4AddingExportBackends", "content": "\n<span id=\"Adding-Export-Back_002dends\"></span>\n<span id=\"Adding-Export-Back_002dends-1\"></span><h3 class=\"appendixsec\">A.4 Adding Export Back-ends</h3>\n\n<span id=\"index-Export_002c-writing-back_002dends\"></span>\n\n<p>Org\u2019s export engine makes it easy for writing new back-ends.  The\nframework on which the engine was built makes it easy to derive new\nback-ends from existing ones.\n</p>\n<span id=\"index-org_002dexport_002ddefine_002dbackend\"></span>\n<span id=\"index-org_002dexport_002ddefine_002dderived_002dbackend\"></span>\n<p>The two main entry points to the export engine are:\n<code>org-export-define-backend</code> and <code>org-export-define-derived-backend</code>.\nTo grok these functions, see \u2018<samp>ox-latex.el</samp>\u2019 for an example of defining\na new back-end from scratch, and \u2018<samp>ox-beamer.el</samp>\u2019 for an example of\nderiving from an existing engine.\n</p>\n<p>For creating a new back-end from scratch, first set its name as\na symbol in an alist consisting of elements and export functions.  To\nmake the back-end visible to the export dispatcher, set <code>:menu-entry</code>\nkeyword.  For export options specific to this back-end, set the\n<code>:options-alist</code>.\n</p>\n<p>For creating a new back-end from an existing one, set\n<code>:translate-alist</code> to an alist of export functions.  This alist\nreplaces the parent back-end functions.\n</p>\n<p>For complete documentation, see <a href=\"https://orgmode.org/worg/dev/org-export-reference.html\">the Org Export Reference on Worg</a>.\n</p>\n"}, {"id": "A5TablesinArbitrarySyntax", "content": "\n<span id=\"Tables-in-Arbitrary-Syntax\"></span>\n<span id=\"Tables-in-Arbitrary-Syntax-1\"></span><h3 class=\"appendixsec\">A.5 Tables in Arbitrary Syntax</h3>\n\n<span id=\"index-tables_002c-in-other-modes\"></span>\n<span id=\"index-lists_002c-in-other-modes\"></span>\n<span id=\"index-Orgtbl-mode-1\"></span>\n\n<p>Due to Org\u2019s success in handling tables with Orgtbl, a frequently\nrequested feature is the use of Org\u2019s table functions in other modes,\ne.g., LaTeX.  This would be hard to do in a general way without\ncomplicated customization nightmares.  Moreover, that would take Org\naway from its simplicity roots that Orgtbl has proven.  There is,\nhowever, an alternate approach to accomplishing the same.\n</p>\n<p>This approach involves implementing a custom <em>translate</em> function that\noperates on a native Org <em>source table</em> to produce a table in another\nformat.  This strategy would keep the excellently working Orgtbl\nsimple and isolate complications, if any, confined to the translate\nfunction.  To add more alien table formats, we just add more translate\nfunctions.  Also the burden of developing custom translate functions\nfor new table formats is in the hands of those who know those formats\nbest.\n</p>\n\n\n"}, {"id": "A51Radiotables", "content": "\n<span id=\"Radio-tables\"></span>\n<span id=\"Radio-tables-1\"></span><h4 class=\"appendixsubsec\">A.5.1 Radio tables</h4>\n\n<span id=\"index-radio-tables\"></span>\n\n<p>Radio tables are target locations for translated tables that are not near\ntheir source.  Org finds the target location and inserts the translated\ntable.\n</p>\n<p>The key to finding the target location is the magic words \u2018<samp>BEGIN/END\nRECEIVE ORGTBL</samp>\u2019.  They have to appear as comments in the current mode.\nIf the mode is C, then:\n</p>\n<div class=\"example\">\n<pre class=\"example\">/* BEGIN RECEIVE ORGTBL table_name */\n/* END RECEIVE ORGTBL table_name */\n</pre></div>\n\n<p>At the location of source, Org needs a special line to direct Orgtbl\nto translate and to find the target for inserting the translated\ntable.  For example:\n</p>\n<span id=\"index-ORGTBL_002c-keyword\"></span>\n<div class=\"example\">\n<pre class=\"example\">#+ORGTBL: SEND table_name translation_function arguments ...\n</pre></div>\n\n\n<p>\u2018<samp>table_name</samp>\u2019 is the table\u2019s reference name, which is also used in the\nreceiver lines, and the \u2018<samp>translation_function</samp>\u2019 is the Lisp function\nthat translates.  This line, in addition, may also contain alternating\nkey and value arguments at the end.  The translation function gets\nthese values as a property list.  A few standard parameters are\nalready recognized and acted upon before the translation function is\ncalled:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:skip N</samp>\u2019</dt>\n<dd><p>Skip the first N lines of the table.  Hlines do count; include them\nif they are to be skipped.\n</p>\n</dd>\n<dt>\u2018<samp>:skipcols (n1 n2 ...)</samp>\u2019</dt>\n<dd><p>List of columns to be skipped.  First Org automatically discards\ncolumns with calculation marks and then sends the table to the\ntranslator function, which then skips columns as specified in\n\u2018<samp>skipcols</samp>\u2019.\n</p></dd>\n</dl>\n\n<p>To keep the source table intact in the buffer without being disturbed\nwhen the source file is compiled or otherwise being worked on, use one\nof these strategies:\n</p>\n<ul>\n<li> Place the table in a block comment.  For example, in C mode you\ncould wrap the table between \u2018<samp>/*</samp>\u2019 and \u2018<samp>*/</samp>\u2019 lines.\n\n</li><li> Put the table after an \u201cend\u201d statement.  For example <code>\\bye</code> in TeX\nand <code>\\end{document}</code> in LaTeX.\n\n</li><li> Comment and un-comment each line of the table during edits.  The\n<kbd>M-x orgtbl-toggle-comment</kbd> command makes toggling easy.\n</li></ul>\n\n"}, {"id": "A52ALaTeXexampleofradiotables", "content": "\n<span id=\"A-LaTeX-example\"></span>\n<span id=\"A-LaTeX-example-of-radio-tables\"></span><h4 class=\"appendixsubsec\">A.5.2 A LaTeX example of radio tables</h4>\n\n<span id=\"index-LaTeX_002c-and-Orgtbl-mode\"></span>\n\n<p>To wrap a source table in LaTeX, use the \u2018<samp>comment</samp>\u2019 environment\nprovided by \u2018<samp>comment.sty</samp>\u2019<a id=\"DOCF158\" href=\"https://orgmode.org/org.html#FOOT158\"><sup>158</sup></a>.  To activate it, put\n<code>\\usepackage{comment}</code> in the document header.  Orgtbl mode inserts\na radio table skeleton<a id=\"DOCF159\" href=\"https://orgmode.org/org.html#FOOT159\"><sup>159</sup></a> with the command <kbd>M-x orgtbl-insert-radio-table</kbd>, which prompts for a table name.  For\nexample, if \u2018<samp>salesfigures</samp>\u2019 is the name, the template inserts:\n</p>\n<div class=\"example\">\n<pre class=\"example\">% BEGIN RECEIVE ORGTBL salesfigures\n% END RECEIVE ORGTBL salesfigures\n\\begin{comment}\n#+ORGTBL: SEND salesfigures orgtbl-to-latex\n| | |\n\\end{comment}\n</pre></div>\n\n<span id=\"index-LaTeX_002dverbatim_002denvironments\"></span>\n<p>The line \u2018<samp>#+ORGTBL: SEND</samp>\u2019 tells Orgtbl mode to use the function\n<code>orgtbl-to-latex</code> to convert the table to LaTeX format, then insert\nthe table at the target (receive) location named \u2018<samp>salesfigures</samp>\u2019.  Now\nthe table is ready for data entry.  It can even use spreadsheet\nfeatures<a id=\"DOCF160\" href=\"https://orgmode.org/org.html#FOOT160\"><sup>160</sup></a>:\n</p>\n<div class=\"example\">\n<pre class=\"example\">% BEGIN RECEIVE ORGTBL salesfigures\n% END RECEIVE ORGTBL salesfigures\n\\begin{comment}\n#+ORGTBL: SEND salesfigures orgtbl-to-latex\n| Month | Days | Nr sold | per day |\n|-------+------+---------+---------|\n| Jan   |   23 |      55 |     2.4 |\n| Feb   |   21 |      16 |     0.8 |\n| March |   22 |     278 |    12.6 |\n#+TBLFM: $4=$3/$2;%.1f\n% $ (optional extra dollar to keep Font Lock happy, see footnote)\n\\end{comment}\n</pre></div>\n\n<p>After editing, <kbd>C-c C-c</kbd> inserts the translated table at the\ntarget location, between the two marker lines.\n</p>\n<p>For hand-made custom tables, note that the translator needs to skip\nthe first two lines of the source table.  Also the command has to\n<em>splice</em> out the target table without the header and footer.\n</p>\n<div class=\"example\">\n<pre class=\"example\">\\begin{tabular}{lrrr}\nMonth &amp; \\multicolumn{1}{c}{Days} &amp; Nr.\\ sold &amp; per day\\\\\n% BEGIN RECEIVE ORGTBL salesfigures\n% END RECEIVE ORGTBL salesfigures\n\\end{tabular}\n%\n\\begin{comment}\n#+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2\n| Month | Days | Nr sold | per day |\n|-------+------+---------+---------|\n| Jan   |   23 |      55 |     2.4 |\n| Feb   |   21 |      16 |     0.8 |\n| March |   22 |     278 |    12.6 |\n#+TBLFM: $4=$3/$2;%.1f\n\\end{comment}\n</pre></div>\n\n<p>The LaTeX translator function <code>orgtbl-to-latex</code> is already part of\nOrgtbl mode and uses a \u2018<samp>tabular</samp>\u2019 environment to typeset the table and\nmarks horizontal lines with <code>\\hline</code>.  For additional parameters to\ncontrol output, see <a href=\"https://orgmode.org/org.html#Translator-functions\">Translator functions</a>:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>:splice BOOLEAN</samp>\u2019</dt>\n<dd><p>When {{{var(BOOLEAN}}} is non-<code>nil</code>, return only table body lines;\ni.e., not wrapped in \u2018<samp>tabular</samp>\u2019 environment.  Default is <code>nil</code>.\n</p>\n</dd>\n<dt>\u2018<samp>:fmt FMT</samp>\u2019</dt>\n<dd><p>Format string to warp each field.  It should contain \u2018<samp>%s</samp>\u2019 for the\noriginal field value.  For example, to wrap each field value in\ndollar symbol, you could use \u2018<samp>:fmt \"$%s$\"</samp>\u2019.  Format can also wrap\na property list with column numbers and formats, for example \u2018<samp>:fmt\n  (2 \"$%s$\" 4 \"%s\\\\%%\")</samp>\u2019.  In place of a string, a function of one\nargument can be used; the function must return a formatted string.\n</p>\n</dd>\n<dt>\u2018<samp>:efmt EFMT</samp>\u2019</dt>\n<dd><p>Format numbers as exponentials.  The spec should have \u2018<samp>%s</samp>\u2019 twice for\ninserting mantissa and exponent, for example \u2018<samp>\"%s\\\\times10^{%s}\"</samp>\u2019.  This\nmay also be a property list with column numbers and formats, for\nexample \u2018<samp>:efmt (2 \"$%s\\\\times10^{%s}$\" 4 \"$%s\\\\cdot10^{%s}$\")</samp>\u2019.  After\n<var>EFMT</var> has been applied to a value, <var>FMT</var>\u2014see\nabove\u2014is also applied.  Functions with two arguments can be\nsupplied instead of strings.  By default, no special formatting is\napplied.\n</p></dd>\n</dl>\n\n"}, {"id": "A53Translatorfunctions", "content": "\n<span id=\"Translator-functions\"></span>\n<span id=\"Translator-functions-1\"></span><h4 class=\"appendixsubsec\">A.5.3 Translator functions</h4>\n\n<span id=\"index-HTML_002c-and-Orgtbl-mode\"></span>\n<span id=\"index-translator-function\"></span>\n\n<span id=\"index-orgtbl_002dto_002dcsv\"></span>\n<span id=\"index-orgtbl_002dto_002dtsv\"></span>\n<span id=\"index-orgtbl_002dto_002dlatex\"></span>\n<span id=\"index-orgtbl_002dto_002dhtml\"></span>\n<span id=\"index-orgtbl_002dto_002dtexinfo\"></span>\n<span id=\"index-orgtbl_002dto_002dunicode\"></span>\n<span id=\"index-orgtbl_002dto_002dorgtbl\"></span>\n<span id=\"index-orgtbl_002dto_002dgeneric\"></span>\n<p>Orgtbl mode has built-in translator functions: <code>orgtbl-to-csv</code>\n(comma-separated values), <code>orgtbl-to-tsv</code> (TAB-separated values),\n<code>orgtbl-to-latex</code>, <code>orgtbl-to-html</code>, <code>orgtbl-to-texinfo</code>,\n<code>orgtbl-to-unicode</code> and <code>orgtbl-to-orgtbl</code>.  They use the generic\ntranslator, <code>orgtbl-to-generic</code>, which delegates translations to\nvarious export back-ends.\n</p>\n<p>Properties passed to the function through the \u2018<samp>ORGTBL SEND</samp>\u2019 line take\nprecedence over properties defined inside the function.  For example,\nthis overrides the default LaTeX line endings, <code>\\\\</code>, with <code>\\\\[2mm]</code>:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+ORGTBL: SEND test orgtbl-to-latex :lend \" \\\\\\\\[2mm]\"\n</pre></div>\n\n\n<p>For a new language translator, define a converter function.  It can be\na generic function, such as shown in this example.  It marks\na beginning and ending of a table with \u2018<samp>!BTBL!</samp>\u2019 and \u2018<samp>!ETBL!</samp>\u2019;\na beginning and ending of lines with \u2018<samp>!BL!</samp>\u2019 and \u2018<samp>!EL!</samp>\u2019; and uses a TAB\nfor a field separator:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun orgtbl-to-language (table params)\n  \"Convert the orgtbl-mode TABLE to language.\"\n  (orgtbl-to-generic\n   table\n   (org-combine-plists\n    '(:tstart \"!BTBL!\" :tend \"!ETBL!\" :lstart \"!BL!\" :lend \"!EL!\" :sep \"\\t\")\n    params)))\n</pre></div>\n\n<p>The documentation for the <code>orgtbl-to-generic</code> function shows\na complete list of parameters, each of which can be passed through to\n<code>orgtbl-to-latex</code>, <code>orgtbl-to-texinfo</code>, and any other function using\nthat generic function.\n</p>\n<p>For complicated translations the generic translator function could be\nreplaced by a custom translator function.  Such a custom function must\ntake two arguments and return a single string containing the formatted\ntable.  The first argument is the table whose lines are a list of\nfields or the symbol <code>hline</code>.  The second argument is the property\nlist consisting of parameters specified in the \u2018<samp>#+ORGTBL: SEND</samp>\u2019 line.\nPlease share your translator functions by posting them to the Org\nusers mailing list, at <a href=\"mailto:emacs-orgmode@gnu.org\">emacs-orgmode@gnu.org</a>.\n</p>\n"}, {"id": "A6DynamicBlocks", "content": "\n<span id=\"Dynamic-Blocks\"></span>\n<span id=\"Dynamic-Blocks-1\"></span><h3 class=\"appendixsec\">A.6 Dynamic Blocks</h3>\n\n<span id=\"index-dynamic-blocks\"></span>\n\n<p>Org supports <em>dynamic blocks</em> in Org documents.  They are inserted\nwith begin and end markers like any other code block, but the contents\nare updated automatically by a user function.\n</p>\n<span id=\"index-C_002dc-C_002dx-x-2\"></span>\n<span id=\"index-org_002ddynamic_002dblock_002dinsert_002ddblock\"></span>\n<p>You can insert a dynamic block with <code>org-dynamic-block-insert-dblock</code>,\nwhich is bound to <kbd>C-c C-x x</kbd> by default.  For example,\n<kbd>C-c C-x x c l o c k t a b l e <span class=\"key\">RET</span></kbd> inserts a table that\nupdates the work time (see <a href=\"https://orgmode.org/org.html#Clocking-Work-Time\">Clocking Work Time</a>).\n</p>\n<p>Dynamic blocks can have names and function parameters.  The syntax is\nsimilar to source code block specifications:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...\n  ...\n#+END:\n</pre></div>\n\n<p>These commands update dynamic blocks:\n</p>\n<dl compact=\"compact\">\n<dt><kbd>C-c C-x C-u</kbd> (<code>org-dblock-update</code>)</dt>\n<dd><span id=\"index-C_002dc-C_002dx-C_002du-2\"></span>\n<span id=\"index-org_002ddblock_002dupdate-2\"></span>\n<p>Update dynamic block at point.\n</p>\n</dd>\n<dt><kbd>C-u C-c C-x C-u</kbd></dt>\n<dd><span id=\"index-C_002du-C_002dc-C_002dx-C_002du-2\"></span>\n<p>Update all dynamic blocks in the current file.\n</p></dd>\n</dl>\n\n<p>Before updating a dynamic block, Org removes content between the\n\u2018<samp>BEGIN</samp>\u2019 and \u2018<samp>END</samp>\u2019 markers.  Org then reads the parameters on the\n\u2018<samp>BEGIN</samp>\u2019 line for passing to the writer function as a plist.  The\nprevious content of the dynamic block becomes erased from the buffer\nand appended to the plist under <code>:content</code>.\n</p>\n<p>The syntax for naming a writer function with a dynamic block labeled\n\u2018<samp>myblock</samp>\u2019 is: <code>org-dblock-write:myblock</code>.\n</p>\n<p>The following is an example of a dynamic block and a block writer function\nthat updates the time when the function was last run:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#+BEGIN: block-update-time :format \"on %m/%d/%Y at %H:%M\"\n  ...\n#+END:\n</pre></div>\n\n<p>The dynamic block\u2019s writer function:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun org-dblock-write:block-update-time (params)\n  (let ((fmt (or (plist-get params :format) \"%d. %m. %Y\")))\n    (insert \"Last block update at: \"\n            (format-time-string fmt))))\n</pre></div>\n\n<p>To keep dynamic blocks up-to-date in an Org file, use the function,\n<code>org-update-all-dblocks</code> in hook, such as <code>before-save-hook</code>.  The\n<code>org-update-all-dblocks</code> function does not run if the file is not in\nOrg mode.\n</p>\n<span id=\"index-org_002dnarrow_002dto_002dblock-1\"></span>\n<p>Dynamic blocks, like any other block, can be narrowed with\n<code>org-narrow-to-block</code>.\n</p>\n"}, {"id": "A7SpecialAgendaViews", "content": "\n<span id=\"Special-Agenda-Views\"></span>\n<span id=\"Special-Agenda-Views-1\"></span><h3 class=\"appendixsec\">A.7 Special Agenda Views</h3>\n\n<span id=\"index-agenda-views_002c-user_002ddefined\"></span>\n\n<span id=\"index-org_002dagenda_002dskip_002dfunction\"></span>\n<span id=\"index-org_002dagenda_002dskip_002dfunction_002dglobal\"></span>\n<p>Org provides a special hook to further limit items in agenda views:\n<code>agenda</code>, <code>agenda*</code><a id=\"DOCF161\" href=\"https://orgmode.org/org.html#FOOT161\"><sup>161</sup></a>, <code>todo</code>, <code>alltodo</code>, <code>tags</code>, <code>tags-todo</code>,\n<code>tags-tree</code>.  Specify a custom function that tests inclusion of every\nmatched item in the view.  This function can also skip as much as is\nneeded.\n</p>\n<p>For a global condition applicable to agenda views, use the\n<code>org-agenda-skip-function-global</code> variable.  Org uses a global\ncondition with <code>org-agenda-skip-function</code> for custom searching.\n</p>\n<p>This example defines a function for a custom view showing TODO items\nwith \u2018<samp>waiting</samp>\u2019 status.  Manually this is a multi-step search process,\nbut with a custom view, this can be automated as follows:\n</p>\n<p>The custom function searches the subtree for the \u2018<samp>waiting</samp>\u2019 tag and\nreturns <code>nil</code> on match.  Otherwise it gives the location from where\nthe search continues.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(defun my-skip-unless-waiting ()\n  \"Skip trees that are not waiting\"\n  (let ((subtree-end (save-excursion (org-end-of-subtree t))))\n    (if (re-search-forward \":waiting:\" subtree-end t)\n        nil          ; tag found, do not skip\n      subtree-end))) ; tag not found, continue after end of subtree\n</pre></div>\n\n<p>To use this custom function in a custom agenda command:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-add-agenda-custom-command\n '(\"b\" todo \"PROJECT\"\n   ((org-agenda-skip-function 'my-skip-unless-waiting)\n    (org-agenda-overriding-header \"Projects waiting for something: \"))))\n</pre></div>\n\n<span id=\"index-org_002dagenda_002doverriding_002dheader\"></span>\n<p>Note that this also binds <code>org-agenda-overriding-header</code> to a more\nmeaningful string suitable for the agenda view.\n</p>\n<span id=\"index-org_002dodd_002dlevels_002donly-3\"></span>\n<span id=\"index-org_002dagenda_002dskip_002dfunction-1\"></span>\n<p>Search for entries with a limit set on levels for the custom search.\nThis is a general approach to creating custom searches in Org.  To\ninclude all levels, use \u2018<samp>LEVEL&gt;0</samp>\u2019<a id=\"DOCF162\" href=\"https://orgmode.org/org.html#FOOT162\"><sup>162</sup></a>.  Then to selectively pick\nthe matched entries, use <code>org-agenda-skip-function</code>, which also\naccepts Lisp forms, such as <code>org-agenda-skip-entry-if</code> and\n<code>org-agenda-skip-subtree-if</code>.  For example:\n</p>\n<dl compact=\"compact\">\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'scheduled)</samp>\u2019</dt>\n<dd><p>Skip current entry if it has been scheduled.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'notscheduled)</samp>\u2019</dt>\n<dd><p>Skip current entry if it has not been scheduled.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'deadline)</samp>\u2019</dt>\n<dd><p>Skip current entry if it has a deadline.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'scheduled 'deadline)</samp>\u2019</dt>\n<dd><p>Skip current entry if it has a deadline, or if it is scheduled.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'todo '(\"TODO\" \"WAITING\"))</samp>\u2019</dt>\n<dd><p>Skip current entry if the TODO keyword is TODO or WAITING.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'todo 'done)</samp>\u2019</dt>\n<dd><p>Skip current entry if the TODO keyword marks a DONE state.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'timestamp)</samp>\u2019</dt>\n<dd><p>Skip current entry if it has any timestamp, may also be deadline or\nscheduled.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'regexp \"regular expression\")</samp>\u2019</dt>\n<dd><p>Skip current entry if the regular expression matches in the entry.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-entry-if 'notregexp \"regular expression\")</samp>\u2019</dt>\n<dd><p>Skip current entry unless the regular expression matches.\n</p>\n</dd>\n<dt>\u2018<samp>(org-agenda-skip-subtree-if 'regexp \"regular expression\")</samp>\u2019</dt>\n<dd><p>Same as above, but check and skip the entire subtree.\n</p></dd>\n</dl>\n\n<p>The following is an example of a search for \u2018<samp>waiting</samp>\u2019 without the\nspecial function:\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-add-agenda-custom-command\n '(\"b\" todo \"PROJECT\"\n   ((org-agenda-skip-function '(org-agenda-skip-subtree-if\n                                'regexp \":waiting:\"))\n    (org-agenda-overriding-header \"Projects waiting for something: \"))))\n</pre></div>\n\n"}, {"id": "A8SpeedingUpYourAgendas", "content": "\n<span id=\"Speeding-Up-Your-Agendas\"></span>\n<span id=\"Speeding-Up-Your-Agendas-1\"></span><h3 class=\"appendixsec\">A.8 Speeding Up Your Agendas</h3>\n\n<span id=\"index-agenda-views_002c-optimization\"></span>\n\n<p>Some agenda commands slow down when the Org files grow in size or\nnumber.  Here are tips to speed up:\n</p>\n<ul>\n<li> Reduce the number of Org agenda files to avoid slowdowns due to hard drive\naccesses.\n\n</li><li> Reduce the number of DONE and archived headlines so agenda\noperations that skip over these can finish faster.\n\n</li><li> Do not dim blocked tasks:\n<span id=\"index-org_002dagenda_002ddim_002dblocked_002dtasks-1\"></span>\n\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-dim-blocked-tasks nil)\n</pre></div>\n\n</li><li> Stop preparing agenda buffers on startup:\n<span id=\"index-org_002dstartup_002dfolded-2\"></span>\n<span id=\"index-org_002dagenda_002dinhibit_002dstartup\"></span>\n\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-inhibit-startup t)\n</pre></div>\n\n</li><li> Disable tag inheritance for agendas:\n<span id=\"index-org_002dagenda_002dshow_002dinherited_002dtags-1\"></span>\n<span id=\"index-org_002dagenda_002duse_002dtag_002dinheritance-1\"></span>\n\n<div class=\"lisp\">\n<pre class=\"lisp\">(setq org-agenda-use-tag-inheritance nil)\n</pre></div>\n</li></ul>\n\n<p>These options can be applied to selected agenda views.  For more\ndetails about generation of agenda views, see the docstrings for the\nrelevant variables, and this <a href=\"https://orgmode.org/worg/agenda-optimization.html\">dedicated Worg page</a> for agenda\noptimization.\n</p>\n"}, {"id": "A9ExtractingAgendaInformation", "content": "\n<span id=\"Extracting-Agenda-Information\"></span>\n<span id=\"Extracting-Agenda-Information-1\"></span><h3 class=\"appendixsec\">A.9 Extracting Agenda Information</h3>\n\n<span id=\"index-agenda_002c-pipe\"></span>\n<span id=\"index-scripts_002c-for-agenda-processing\"></span>\n\n<p>Org provides commands to access agendas through Emacs batch mode.\nThrough this command-line interface, agendas are automated for further\nprocessing or printing.\n</p>\n<span id=\"index-org_002dagenda_002dcustom_002dcommands-3\"></span>\n<span id=\"index-org_002dbatch_002dagenda\"></span>\n<p><code>org-batch-agenda</code> creates an agenda view in ASCII and outputs to\nstandard output.  This command takes one string parameter.  When\nstring consists of a single character, Org uses it as a key to\n<code>org-agenda-custom-commands</code>.  These are the same ones available\nthrough the agenda dispatcher (see <a href=\"https://orgmode.org/org.html#Agenda-Dispatcher\">Agenda Dispatcher</a>).\n</p>\n<p>This example command line directly prints the TODO list to the printer:\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacs -batch -l ~/.emacs -eval '(org-batch-agenda \"t\")' | lpr\n</pre></div>\n\n\n<p>When the string parameter length is two or more characters, Org\nmatches it with tags/TODO strings.  For example, this example command\nline prints items tagged with \u2018<samp>shop</samp>\u2019, but excludes items tagged with\n\u2018<samp>NewYork</samp>\u2019:\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacs -batch -l ~/.emacs                                      \\\n      -eval '(org-batch-agenda \"+shop-NewYork\")' | lpr\n</pre></div>\n\n<p>An example showing on-the-fly parameter modifications:\n</p>\n<div class=\"example\">\n<pre class=\"example\">emacs -batch -l ~/.emacs                                      \\\n   -eval '(org-batch-agenda \"a\"                               \\\n           org-agenda-span (quote month)                      \\\n           org-agenda-include-diary nil                       \\\n           org-agenda-files (quote (\"~/org/project.org\")))'   \\\n   | lpr\n</pre></div>\n\n<p>which produces an agenda for the next 30 days from just the\n\u2018<samp>~/org/projects.org</samp>\u2019 file.\n</p>\n<span id=\"index-org_002dbatch_002dagenda_002dcsv\"></span>\n<p>For structured processing of agenda output, use <code>org-batch-agenda-csv</code>\nwith the following fields:\n</p>\n<dl compact=\"compact\">\n<dt>category</dt>\n<dd><p>The category of the item\n</p></dd>\n<dt>head</dt>\n<dd><p>The headline, without TODO keyword, TAGS and PRIORITY\n</p></dd>\n<dt>type</dt>\n<dd><p>The type of the agenda entry, can be\n</p>\n<table>\n<tbody><tr><td><code>todo</code></td><td>selected in TODO match</td></tr>\n<tr><td><code>tagsmatch</code></td><td>selected in tags match</td></tr>\n<tr><td><code>diary</code></td><td>imported from diary</td></tr>\n<tr><td><code>deadline</code></td><td>a deadline</td></tr>\n<tr><td><code>scheduled</code></td><td>scheduled</td></tr>\n<tr><td><code>timestamp</code></td><td>appointment, selected by timestamp</td></tr>\n<tr><td><code>closed</code></td><td>entry was closed on date</td></tr>\n<tr><td><code>upcoming-deadline</code></td><td>warning about nearing deadline</td></tr>\n<tr><td><code>past-scheduled</code></td><td>forwarded scheduled item</td></tr>\n<tr><td><code>block</code></td><td>entry has date block including date</td></tr>\n</tbody></table>\n\n</dd>\n<dt>todo</dt>\n<dd><p>The TODO keyword, if any\n</p></dd>\n<dt>tags</dt>\n<dd><p>All tags including inherited ones, separated by colons\n</p></dd>\n<dt>date</dt>\n<dd><p>The relevant date, like \u2018<samp>2007-2-14</samp>\u2019\n</p></dd>\n<dt>time</dt>\n<dd><p>The time, like \u2018<samp>15:00-16:50</samp>\u2019\n</p></dd>\n<dt>extra</dt>\n<dd><p>String with extra planning info\n</p></dd>\n<dt>priority-l</dt>\n<dd><p>The priority letter if any was given\n</p></dd>\n<dt>priority-n</dt>\n<dd><p>The computed numerical priority\n</p></dd>\n</dl>\n\n<p>If the selection of the agenda item was based on a timestamp,\nincluding those items with \u2018<samp>DEADLINE</samp>\u2019 and \u2018<samp>SCHEDULED</samp>\u2019 keywords, then\nOrg includes date and time in the output.\n</p>\n<p>If the selection of the agenda item was based on a timestamp  (or\ndeadline/scheduled), then Org includes date and time in the output.\n</p>\n<p>Here is an example of a post-processing script in Perl.  It takes the\nCSV output from Emacs and prints with a checkbox:\n</p>\n<div class=\"example\">\n<pre class=\"example\">#!/usr/bin/perl\n\n# define the Emacs command to run\n$cmd = \"emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \\\"t\\\")'\";\n\n# run it and capture the output\n$agenda = qx{$cmd 2&gt;/dev/null};\n\n# loop over all lines\nforeach $line (split(/\\n/,$agenda)) {\n    # get the individual values\n    ($category,$head,$type,$todo,$tags,$date,$time,$extra,\n     $priority_l,$priority_n) = split(/,/,$line);\n    # process and print\n    print \"[ ] $head\\n\";\n}\n</pre></div>\n\n"}, {"id": "A10UsingthePropertyAPI", "content": "\n<span id=\"Using-the-Property-API\"></span>\n<span id=\"Using-the-Property-API-1\"></span><h3 class=\"appendixsec\">A.10 Using the Property API</h3>\n\n<span id=\"index-API_002c-for-properties\"></span>\n<span id=\"index-properties_002c-API\"></span>\n\n<p>Here is a description of the functions that can be used to work with\nproperties.\n</p>\n<dl>\n<dt id=\"index-org_002dentry_002dproperties\">Function: <strong>org-entry-properties</strong> <em>&amp;optional pom which</em></dt>\n<dd><p>Get all properties of the entry at point-or-marker <var>POM</var>.\nThis includes the TODO keyword, the tags, time strings for deadline,\nscheduled, and clocking, and any additional properties defined in the\nentry.  The return value is an alist.  Keys may occur multiple times\nif the property key was used several times.  <var>POM</var> may also\nbe <code>nil</code>, in which case the current entry is used.  If\n<var>WHICH</var> is <code>nil</code> or <code>all</code>, get all properties.  If\n<var>WHICH</var> is <code>special</code> or <code>standard</code>, only get that subclass.\n</p></dd></dl>\n\n<span id=\"index-org_002duse_002dproperty_002dinheritance-2\"></span>\n<span id=\"index-org_002dinsert_002dproperty_002ddrawer\"></span>\n<dl>\n<dt id=\"index-org_002dentry_002dget\">Function: <strong>org-entry-get</strong> <em>pom property &amp;optional inherit</em></dt>\n<dd><p>Get value of <var>PROPERTY</var> for entry at point-or-marker\n<var>POM</var>.  By default, this only looks at properties defined\nlocally in the entry.  If <var>INHERIT</var> is non-<code>nil</code> and the\nentry does not have the property, then also check higher levels of the\nhierarchy.  If <var>INHERIT</var> is the symbol <code>selective</code>, use\ninheritance if and only if the setting of\n<code>org-use-property-inheritance</code> selects <var>PROPERTY</var> for\ninheritance.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002ddelete\">Function: <strong>org-entry-delete</strong> <em>pom property</em></dt>\n<dd><p>Delete the property <var>PROPERTY</var> from entry at point-or-marker\n<var>POM</var>.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dput\">Function: <strong>org-entry-put</strong> <em>pom property value</em></dt>\n<dd><p>Set <var>PROPERTY</var> to <var>VALUES</var> for entry at\npoint-or-marker POM.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dbuffer_002dproperty_002dkeys\">Function: <strong>org-buffer-property-keys</strong> <em>&amp;optional include-specials</em></dt>\n<dd><p>Get all property keys in the current buffer.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dinsert_002dproperty_002ddrawer-1\">Function: <strong>org-insert-property-drawer</strong></dt>\n<dd><p>Insert a property drawer for the current entry.  Also\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dput_002dmultivalued_002dproperty\">Function: <strong>org-entry-put-multivalued-property</strong> <em>pom property &amp;rest values</em></dt>\n<dd><p>Set <var>PROPERTY</var> at point-or-marker <var>POM</var> to\n<var>VALUES</var>.  <var>VALUES</var> should be a list of strings.\nThey are concatenated, with spaces as separators.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dget_002dmultivalued_002dproperty\">Function: <strong>org-entry-get-multivalued-property</strong> <em>pom property</em></dt>\n<dd><p>Treat the value of the property <var>PROPERTY</var> as\na whitespace-separated list of values and return the values as a list\nof strings.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dadd_002dto_002dmultivalued_002dproperty\">Function: <strong>org-entry-add-to-multivalued-property</strong> <em>pom property value</em></dt>\n<dd><p>Treat the value of the property <var>PROPERTY</var> as\na whitespace-separated list of values and make sure that\n<var>VALUE</var> is in this list.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dremove_002dfrom_002dmultivalued_002dproperty\">Function: <strong>org-entry-remove-from-multivalued-property</strong> <em>pom property value</em></dt>\n<dd><p>Treat the value of the property <var>PROPERTY</var> as\na whitespace-separated list of values and make sure that\n<var>VALUE</var> is <em>not</em> in this list.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dentry_002dmember_002din_002dmultivalued_002dproperty\">Function: <strong>org-entry-member-in-multivalued-property</strong> <em>pom property value</em></dt>\n<dd><p>Treat the value of the property <var>PROPERTY</var> as\na whitespace-separated list of values and check if <var>VALUE</var> is\nin this list.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dproperty_002dallowed_002dvalue_002dfunctions\">User Option: <strong>org-property-allowed-value-functions</strong></dt>\n<dd><p>Hook for functions supplying allowed values for a specific property.\nThe functions must take a single argument, the name of the property,\nand return a flat list of allowed values.  If \u2018<samp>:ETC</samp>\u2019 is one of the\nvalues, use the values as completion help, but allow also other values\nto be entered.  The functions must return <code>nil</code> if they are not\nresponsible for this property.\n</p></dd></dl>\n\n"}, {"id": "A11UsingtheMappingAPI", "content": "\n<span id=\"Using-the-Mapping-API\"></span>\n<span id=\"Using-the-Mapping-API-1\"></span><h3 class=\"appendixsec\">A.11 Using the Mapping API</h3>\n\n<span id=\"index-API_002c-for-mapping\"></span>\n<span id=\"index-mapping-entries_002c-API\"></span>\n\n<p>Org has sophisticated mapping capabilities to find all entries\nsatisfying certain criteria.  Internally, this functionality is used\nto produce agenda views, but there is also an API that can be used to\nexecute arbitrary functions for each or selected entries.  The main\nentry point for this API is:\n</p>\n<dl>\n<dt id=\"index-org_002dmap_002dentries\">Function: <strong>org-map-entries</strong> <em>func &amp;optional match scope &amp;rest skip</em></dt>\n<dd><p>Call <var>FUNC</var> at each headline selected by <var>MATCH</var> in\n<var>SCOPE</var>.\n</p>\n<p><var>FUNC</var> is a function or a Lisp form.  With point positioned\nat the beginning of the headline, call the function without arguments.\nOrg returns an alist of return values of calls to the function.\n</p>\n<p>To avoid preserving point, Org wraps the call to <var>FUNC</var> in\n<code>save-excursion</code> form.  After evaluation, Org moves point to the end\nof the line that was just processed.  Search continues from that point\nforward.  This may not always work as expected under some conditions,\nsuch as if the current sub-tree was removed by a previous archiving\noperation.  In such rare circumstances, Org skips the next entry\nentirely when it should not.  To stop Org from such skips, make\n<var>FUNC</var> set the variable <code>org-map-continue-from</code> to a specific\nbuffer position.\n</p>\n<p><var>MATCH</var> is a tags/property/TODO match.  Org iterates only\nmatched headlines.  Org iterates over all headlines when\n<var>MATCH</var> is <code>nil</code> or <code>t</code>.\n</p>\n<p><var>SCOPE</var> determines the scope of this command.  It can be any\nof:\n</p>\n<dl compact=\"compact\">\n<dt><code>nil</code></dt>\n<dd><p>The current buffer, respecting the restriction, if any.\n</p>\n</dd>\n<dt><code>tree</code></dt>\n<dd><p>The subtree started with the entry at point.\n</p>\n</dd>\n<dt><code>region</code></dt>\n<dd><p>The entries within the active region, if any.\n</p>\n</dd>\n<dt><code>file</code></dt>\n<dd><p>The current buffer, without restriction.\n</p>\n</dd>\n<dt><code>file-with-archives</code></dt>\n<dd><p>The current buffer, and any archives associated with it.\n</p>\n</dd>\n<dt><code>agenda</code></dt>\n<dd><p>All agenda files.\n</p>\n</dd>\n<dt><code>agenda-with-archives</code></dt>\n<dd><p>All agenda files with any archive files associated with them.\n</p>\n</dd>\n<dt>list of filenames</dt>\n<dd><p>If this is a list, all files in the list are scanned.\n</p></dd>\n</dl>\n\n<p>The remaining arguments are treated as settings for the scanner\u2019s\nskipping facilities.  Valid arguments are:\n</p>\n<dl compact=\"compact\">\n<dt><code>archive</code></dt>\n<dd><p>Skip trees with the \u2018<samp>ARCHIVE</samp>\u2019 tag.\n</p>\n</dd>\n<dt><code>comment</code></dt>\n<dd><p>Skip trees with the COMMENT keyword.\n</p>\n</dd>\n<dt>function or Lisp form</dt>\n<dd><span id=\"index-org_002dagenda_002dskip_002dfunction-2\"></span>\n<p>Used as value for <code>org-agenda-skip-function</code>, so whenever the\nfunction returns <code>t</code>, <var>FUNC</var> is called for that entry and\nsearch continues from the point where the function leaves it.\n</p></dd>\n</dl>\n</dd></dl>\n\n<p>The mapping routine can call any arbitrary function, even functions\nthat change meta data or query the property API (see <a href=\"https://orgmode.org/org.html#Using-the-Property-API\">Using the Property API</a>).  Here are some handy functions:\n</p>\n<dl>\n<dt id=\"index-org_002dtodo-1\">Function: <strong>org-todo</strong> <em>&amp;optional arg</em></dt>\n<dd><p>Change the TODO state of the entry.  See the docstring of the\nfunctions for the many possible values for the argument\n<var>ARG</var>.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dpriority-1\">Function: <strong>org-priority</strong> <em>&amp;optional action</em></dt>\n<dd><p>Change the priority of the entry.  See the docstring of this function\nfor the possible values for <var>ACTION</var>.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dtoggle_002dtag\">Function: <strong>org-toggle-tag</strong> <em>tag &amp;optional onoff</em></dt>\n<dd><p>Toggle the tag <var>TAG</var> in the current entry.  Setting\n<var>ONOFF</var> to either <code>on</code> or <code>off</code> does not toggle tag, but\nensure that it is either on or off.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002dpromote\">Function: <strong>org-promote</strong></dt>\n<dd><p>Promote the current entry.\n</p></dd></dl>\n\n<dl>\n<dt id=\"index-org_002ddemote\">Function: <strong>org-demote</strong></dt>\n<dd><p>Demote the current entry.\n</p></dd></dl>\n\n<p>This example turns all entries tagged with \u2018<samp>TOMORROW</samp>\u2019 into TODO\nentries with keyword \u2018<samp>UPCOMING</samp>\u2019.  Org ignores entries in comment trees\nand archive trees.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(org-map-entries '(org-todo \"UPCOMING\")\n                 \"+TOMORROW\" 'file 'archive 'comment)\n</pre></div>\n\n<p>The following example counts the number of entries with TODO keyword\n\u2018<samp>WAITING</samp>\u2019, in all agenda files.\n</p>\n<div class=\"lisp\">\n<pre class=\"lisp\">(length (org-map-entries t \"/+WAITING\" 'agenda))\n</pre></div>\n\n"}, {"id": "AppendixBHistoryandAcknowledgments", "content": "\n<span id=\"History-and-Acknowledgments\"></span>\n<span id=\"History-and-Acknowledgments-1\"></span><h2 class=\"appendix\">Appendix B History and Acknowledgments</h2>\n\n\n\n<span id=\"From-Carsten\"></span><span id=\"From-Carsten-1\"></span><h3 class=\"appendixsec\">B.1 From Carsten</h3>\n\n<p>Org was born in 2003, out of frustration over the user interface of\nthe Emacs Outline mode.  I was trying to organize my notes and\nprojects, and using Emacs seemed to be the natural way to go.\nHowever, having to remember eleven different commands with two or\nthree keys per command, only to hide and show parts of the outline\ntree, that seemed entirely unacceptable to me.  Also, when using\noutlines to take notes, I constantly wanted to restructure the tree,\norganizing it parallel to my thoughts and plans.  <em>Visibility cycling</em>\nand <em>structure editing</em> were originally implemented in the package\n\u2018<samp>outline-magic.el</samp>\u2019, but quickly moved to the more general \u2018<samp>org.el</samp>\u2019.\nAs this environment became comfortable for project planning, the next\nstep was adding <em>TODO entries</em>, basic <em>timestamps</em>, and <em>table\nsupport</em>.  These areas highlighted the two main goals that Org still\nhas today: to be a new, outline-based, plain text mode with innovative\nand intuitive editing features, and to incorporate project planning\nfunctionality directly into a notes file.\n</p>\n<p>Since the first release, literally thousands of emails to me or to the\n<a href=\"mailto:emacs-orgmode@gnu.org\">mailing list</a> have provided a constant stream of bug reports, feedback,\nnew ideas, and sometimes patches and add-on code.  Many thanks to\neveryone who has helped to improve this package.  I am trying to keep\nhere a list of the people who had significant influence in shaping one\nor more aspects of Org.  The list may not be complete, if I have\nforgotten someone, please accept my apologies and let me know.\n</p>\n<p>Before I get to this list, a few special mentions are in order:\n</p>\n<dl compact=\"compact\">\n<dt>Bastien Guerry</dt>\n<dd><p>Bastien has written a large number of extensions to Org (most of\nthem integrated into the core by now), including the LaTeX exporter\nand the plain list parser.  His support during the early days was\ncentral to the success of this project.  Bastien also invented Worg,\nhelped establishing the Web presence of Org, and sponsored hosting\ncosts for the orgmode.org website.  Bastien stepped in as maintainer\nof Org between 2011 and 2013, at a time when I desperately needed\na break.\n</p>\n</dd>\n<dt>Eric Schulte and Dan Davison</dt>\n<dd><p>Eric and Dan are jointly responsible for the Org Babel system, which\nturns Org into a multi-language environment for evaluating code and\ndoing literate programming and reproducible research.  This has\nbecome one of Org\u2019s killer features that define what Org is today.\n</p>\n</dd>\n<dt>John Wiegley</dt>\n<dd><p>John has contributed a number of great ideas and patches directly to\nOrg, including the attachment system (\u2018<samp>org-attach.el</samp>\u2019), integration\nwith Apple Mail (\u2018<samp>org-mac-message.el</samp>\u2019), hierarchical dependencies of\nTODO items, habit tracking (\u2018<samp>org-habits.el</samp>\u2019), and encryption\n(\u2018<samp>org-crypt.el</samp>\u2019).  Also, the capture system is really an extended\ncopy of his great \u2018<samp>remember.el</samp>\u2019.\n</p>\n</dd>\n<dt>Sebastian Rose</dt>\n<dd><p>Without Sebastian, the HTML/XHTML publishing of Org would be the\npitiful work of an ignorant amateur.  Sebastian has pushed this part\nof Org onto a much higher level.  He also wrote \u2018<samp>org-info.js</samp>\u2019,\na JavaScript program for displaying webpages derived from Org using\nan Info-like or a folding interface with single-key navigation.\n</p></dd>\n</dl>\n\n<p>See below for the full list of contributions!  Again, please let me\nknow what I am missing here!\n</p>\n<span id=\"From-Bastien\"></span><span id=\"From-Bastien-1\"></span><h3 class=\"appendixsec\">B.2 From Bastien</h3>\n\n<p>I (Bastien) have been maintaining Org between 2011 and 2013.  This\nappendix would not be complete without adding a few more\nacknowledgments and thanks.\n</p>\n<p>I am first grateful to Carsten for his trust while handing me over the\nmaintainership of Org.  His unremitting support is what really helped\nme getting more confident over time, with both the community and the\ncode.\n</p>\n<p>When I took over maintainership, I knew I would have to make Org more\ncollaborative than ever, as I would have to rely on people that are\nmore knowledgeable than I am on many parts of the code.  Here is\na list of the persons I could rely on, they should really be\nconsidered co-maintainers, either of the code or the community:\n</p>\n<dl compact=\"compact\">\n<dt>Eric Schulte</dt>\n<dd><p>Eric is maintaining the Babel parts of Org.  His reactivity here\nkept me away from worrying about possible bugs here and let me focus\non other parts.\n</p>\n</dd>\n<dt>Nicolas Goaziou</dt>\n<dd><p>Nicolas is maintaining the consistency of the deepest parts of Org.\nHis work on \u2018<samp>org-element.el</samp>\u2019 and \u2018<samp>ox.el</samp>\u2019 has been outstanding, and\nit opened the doors for many new ideas and features.  He rewrote\nmany of the old exporters to use the new export engine, and helped\nwith documenting this major change.  More importantly (if that\u2019s\npossible), he has been more than reliable during all the work done\nfor Org 8.0, and always very reactive on the mailing list.\n</p>\n</dd>\n<dt>Achim Gratz</dt>\n<dd><p>Achim rewrote the building process of Org, turning some <em>ad hoc</em>\ntools into a flexible and conceptually clean process.  He patiently\ncoped with the many hiccups that such a change can create for users.\n</p>\n</dd>\n<dt>Nick Dokos</dt>\n<dd><p>The Org mode mailing list would not be such a nice place without\nNick, who patiently helped users so many times.  It is impossible to\noverestimate such a great help, and the list would not be so active\nwithout him.\n</p></dd>\n</dl>\n\n<p>I received support from so many users that it is clearly impossible to\nbe fair when shortlisting a few of them, but Org\u2019s history would not\nbe complete if the ones above were not mentioned in this manual.\n</p>\n<span id=\"List-of-Contributions\"></span><span id=\"List-of-Contributions-1\"></span><h3 class=\"appendixsec\">B.3 List of Contributions</h3>\n\n<ul>\n<li> Russell Adams came up with the idea for drawers.\n\n</li><li> Thomas Baumann wrote \u2018<samp>ol-bbdb.el</samp>\u2019 and \u2018<samp>ol-mhe.el</samp>\u2019.\n\n</li><li> Christophe Bataillon created the great unicorn logo that we use on\nthe Org mode website.\n\n</li><li> Alex Bochannek provided a patch for rounding timestamps.\n\n</li><li> Jan B\u00f6cker wrote \u2018<samp>ol-docview.el</samp>\u2019.\n\n</li><li> Brad Bozarth showed how to pull RSS feed data into Org files.\n\n</li><li> Tom Breton wrote \u2018<samp>org-choose.el</samp>\u2019.\n\n</li><li> Charles Cave\u2019s suggestion sparked the implementation of templates\nfor Remember, which are now templates for capture.\n\n</li><li> Timothy E Chapman worked on a complete overhaul of the orgmode.org\nwebsite in 2020 and helped fixing various bugs.\n\n</li><li> Pavel Chalmoviansky influenced the agenda treatment of items with\nspecified time.\n\n</li><li> Gregory Chernov patched support for Lisp forms into table\ncalculations and improved XEmacs compatibility, in particular by\nporting \u2018<samp>nouline.el</samp>\u2019 to XEmacs.\n\n</li><li> Sacha Chua suggested copying some linking code from Planner.\n\n</li><li> Baoqiu Cui contributed the DocBook exporter.\n\n</li><li> Eddward DeVilla proposed and tested checkbox statistics.  He also\ncame up with the idea of properties, and that there should be an API\nfor them.\n\n</li><li> Nick Dokos tracked down several nasty bugs.\n\n</li><li> Kees Dullemond used to edit projects lists directly in HTML and so\ninspired some of the early development, including HTML export.  He\nalso asked for a way to narrow wide table columns.\n\n</li><li> Thomas&nbsp;S.&nbsp;Dye contributed documentation on Worg and helped\nintegrating the Org Babel documentation into the manual.\n\n</li><li> Christian Egli converted the documentation into Texinfo format,\ninspired the agenda, patched CSS formatting into the HTML exporter,\nand wrote \u2018<samp>org-taskjuggler.el</samp>\u2019.\n\n</li><li> David Emery provided a patch for custom CSS support in exported HTML\nagendas.\n\n</li><li> Nic Ferrier contributed mailcap and XOXO support.\n\n</li><li> Miguel&nbsp;A.&nbsp;Figueroa-Villanueva implemented hierarchical checkboxes.\n\n</li><li> John Foerch figured out how to make incremental search show context\naround a match in a hidden outline tree.\n\n</li><li> Raimar Finken wrote \u2018<samp>org-git-line.el</samp>\u2019.\n\n</li><li> Mikael Fornius works as a mailing list moderator.\n\n</li><li> Austin Frank works as a mailing list moderator.\n\n</li><li> Eric Fraga drove the development of Beamer export with ideas and\ntesting.\n\n</li><li> Barry Gidden did proofreading the manual in preparation for the book\npublication through Network Theory Ltd.\n\n</li><li> Niels Giesen had the idea to automatically archive DONE trees.\n\n</li><li> Nicolas Goaziou rewrote much of the plain list code.\n\n</li><li> Kai Grossjohann pointed out key-binding conflicts with other\npackages.\n\n</li><li> Brian Gough of Network Theory Ltd publishes the Org mode manual as\na book.\n\n</li><li> Bernt Hansen has driven much of the support for auto-repeating\ntasks, task state change logging, and the clocktable.  His clear\nexplanations have been critical when we started to adopt the Git\nversion control system.\n\n</li><li> Manuel Hermenegildo has contributed various ideas, small fixes and\npatches.\n\n</li><li> Phil Jackson wrote \u2018<samp>ol-irc.el</samp>\u2019.\n\n</li><li> Scott Jaderholm proposed footnotes, control over whitespace between\nfolded entries, and column view for properties.\n\n</li><li> Matt Jones wrote MobileOrg Android.\n\n</li><li> Tokuya Kameshima wrote \u2018<samp>org-wl.el</samp>\u2019 and \u2018<samp>org-mew.el</samp>\u2019.\n\n</li><li> Shidai Liu (\u201cLeo\u201d) asked for embedded LaTeX and tested it.  He also\nprovided frequent feedback and some patches.\n\n</li><li> Matt Lundin has proposed last-row references for table formulas and\nnamed invisible anchors.  He has also worked a lot on the FAQ.\n\n</li><li> David Maus wrote \u2018<samp>org-atom.el</samp>\u2019, maintains the issues file for Org,\nand is a prolific contributor on the mailing list with competent\nreplies, small fixes and patches.\n\n</li><li> Jason&nbsp;F.&nbsp;McBrayer suggested agenda export to CSV format.\n\n</li><li> Kyle Meyer helped setting up the <a href=\"https://public-inbox.org/\">public-inbox</a> archive of the <a href=\"https://orgmode.org/list/\">Org\nmailing list</a> and has been fixing many bugs.\n\n</li><li> Max Mikhanosha came up with the idea of refiling.\n\n</li><li> Dmitri Minaev sent a patch to set priority limits on a per-file\nbasis.\n\n</li><li> Stefan Monnier provided a patch to keep the Emacs Lisp compiler\nhappy.\n\n</li><li> Richard Moreland wrote MobileOrg for the iPhone.\n\n</li><li> Rick Moynihan proposed allowing multiple TODO sequences in a file\nand being able to quickly restrict the agenda to a subtree.\n\n</li><li> Todd Neal provided patches for links to Info files and Elisp forms.\n\n</li><li> Greg Newman refreshed the unicorn logo into its current form.\n\n</li><li> Tim O\u2019Callaghan suggested in-file links, search options for general\nfile links, and tags.\n\n</li><li> Osamu Okano wrote \u2018<samp>orgcard2ref.pl</samp>\u2019, a Perl program to create a text\nversion of the reference card.\n\n</li><li> Takeshi Okano translated the manual and David O\u2019Toole\u2019s tutorial\ninto Japanese.\n\n</li><li> Oliver Oppitz suggested multi-state TODO items.\n\n</li><li> Scott Otterson sparked the introduction of descriptive text for\nlinks, among other things.\n\n</li><li> Pete Phillips helped during the development of the TAGS feature,\nand provided frequent feedback.\n\n</li><li> Martin Pohlack provided the code snippet to bundle character\ninsertion into bundles of 20 for undo.\n\n</li><li> Ihor Radchenko helped with fixing bugs and improving the user\nexperience regarding Org\u2019s speed.\n\n</li><li> T.&nbsp;V.&nbsp;Raman reported bugs and suggested improvements.\n\n</li><li> Matthias Rempe (Oelde) provided ideas, Windows support, and quality\ncontrol.\n\n</li><li> Paul Rivier provided the basic implementation of named footnotes.\nHe also acted as mailing list moderator for some time.\n\n</li><li> Kevin Rogers contributed code to access VM files on remote hosts.\n\n</li><li> Frank Ruell solved the mystery of the \u2018<samp>keymapp nil</samp>\u2019 bug, a conflict\nwith \u2018<samp>allout.el</samp>\u2019.\n\n</li><li> Jason Riedy generalized the send-receive mechanism for Orgtbl\ntables with extensive patches.\n\n</li><li> Philip Rooke created the Org reference card, provided lots of\nfeedback, developed and applied standards to the Org documentation.\n\n</li><li> Christian Schlauer proposed angular brackets around links, among\nother things.\n\n</li><li> Paul Sexton wrote \u2018<samp>org-ctags.el</samp>\u2019.\n\n</li><li> Tom Shannon\u2019s \u2018<samp>organizer-mode.el</samp>\u2019 inspired linking to VM/BBDB/Gnus.\n\n</li><li> Ilya Shlyakhter proposed the Archive Sibling, line numbering in\nliteral examples, and remote highlighting for referenced code lines.\n\n</li><li> Stathis Sideris wrote the \u2018<samp>ditaa.jar</samp>\u2019 ASCII to PNG converter that is\nnow packaged into the <a href=\"https://git.sr.ht/~bzg/org-contrib\">org-contrib</a> repository.\n\n</li><li> Daniel Sinder came up with the idea of internal archiving by locking\nsubtrees.\n\n</li><li> Dale Smith proposed link abbreviations.\n\n</li><li> James TD Smith has contributed a large number of patches for\nuseful tweaks and features.\n\n</li><li> Adam Spiers asked for global linking commands, inspired the link\nextension system, added support for Mairix, and proposed the mapping\nAPI.\n\n</li><li> Ulf Stegemann created the table to translate special symbols to\nHTML, LaTeX, UTF-8, Latin-1 and ASCII.\n\n</li><li> Andy Stewart contributed code to \u2018<samp>ol-w3m.el</samp>\u2019, to copy\nHTML content with links transformation to Org syntax.\n\n</li><li> David O\u2019Toole wrote \u2018<samp>org-publish.el</samp>\u2019 and drafted the\nmanual chapter about publishing.\n\n</li><li> Jambunathan&nbsp;K.&nbsp;contributed the ODT exporter.\n\n</li><li> Sebastien Vauban reported many issues with LaTeX and Beamer export\nand enabled source code highlighting in Gnus.\n\n</li><li> Stefan Vollmar organized a video-recorded talk at the\nMax-Planck-Institute for Neurology.  He also inspired the creation\nof a concept index for HTML export.\n\n</li><li> J\u00fcrgen Vollmer contributed code generating the table of contents in\nHTML output.\n\n</li><li> Samuel Wales has provided important feedback and bug reports.\n\n</li><li> Chris Wallace provided a patch implementing the \u2018<samp>QUOTE</samp>\u2019 block.\n\n</li><li> David Wainberg suggested archiving, and improvements to the\nlinking system.\n\n</li><li> Carsten Wimmer suggested some changes and helped fix a bug in\nlinking to Gnus.\n\n</li><li> Roland Winkler requested additional key bindings to make Org work on\na TTY.\n\n</li><li> Piotr Zielinski wrote \u2018<samp>org-mouse.el</samp>\u2019, proposed agenda\nblocks and contributed various ideas and code snippets.\n\n</li><li> Marco Wahl wrote \u2018<samp>ol-eww.el</samp>\u2019.\n</li></ul>\n\n"}, {"id": "AppendixCGNUFreeDocumentationLicense", "content": "\n<span id=\"GNU-Free-Documentation-License\"></span>\n<span id=\"GNU-Free-Documentation-License-1\"></span><h2 class=\"appendix\">Appendix C GNU Free Documentation License</h2>\n\n<div align=\"center\">Version 1.3, 3 November 2008\n</div>\n<div class=\"display\">\n<pre class=\"display\">Copyright \u00a9 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\n<a href=\"https://fsf.org/\">https://fsf.org/</a>\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n</pre></div>\n\n<ol start=\"0\">\n<li> PREAMBLE\n\n<p>The purpose of this License is to make a manual, textbook, or other\nfunctional and useful document <em>free</em>\nin the sense of freedom: to assure everyone the effective freedom\nto copy and redistribute it, with or without modifying it, either\ncommercially or noncommercially. Secondarily, this License\npreserves for the author and publisher a way to get credit for\ntheir work, while not being considered responsible for\nmodifications made by others.\n</p>\n<p>This License is a kind of \u201ccopyleft\u201d, which means that derivative\nworks of the document must themselves be free in the same sense.\nIt complements the GNU General Public License, which is a copyleft\nlicense designed for free software.\n</p>\n<p>We have designed this License in order to use it for manuals for\nfree software, because free software needs free documentation:\na free program should come with manuals providing the same freedoms\nthat the software does.  But this License is not limited to\nsoftware manuals; it can be used for any textual work, regardless\nof subject matter or whether it is published as a printed book.  We\nrecommend this License principally for works whose purpose is\ninstruction or reference.\n</p>\n</li><li> APPLICABILITY AND DEFINITIONS\n\n<p>This License applies to any manual or other work, in any medium,\nthat contains a notice placed by the copyright holder saying it can\nbe distributed under the terms of this License.  Such a notice\ngrants a world-wide, royalty-free license, unlimited in duration,\nto use that work under the conditions stated herein.  The\n\u201cDocument\u201d, below, refers to any such manual or work.  Any member\nof the public is a licensee, and is addressed as \u201cyou\u201d.  You accept\nthe license if you copy, modify or distribute the work in a way\nrequiring permission under copyright law.\n</p>\n<p>A \u201cModified Version\u201d of the Document means any work containing the\nDocument or a portion of it, either copied verbatim, or with\nmodifications and/or translated into another language.\n</p>\n<p>A \u201cSecondary Section\u201d is a named appendix or a front-matter section\nof the Document that deals exclusively with the relationship of the\npublishers or authors of the Document to the Document\u2019s overall\nsubject (or to related matters) and contains nothing that could\nfall directly within that overall subject.  (Thus, if the Document\nis in part a textbook of mathematics, a Secondary Section may not\nexplain any mathematics.)  The relationship could be a matter of\nhistorical connection with the subject or with related matters, or\nof legal, commercial, philosophical, ethical or political position\nregarding them.\n</p>\n<p>The \u201cInvariant Sections\u201d are certain Secondary Sections whose\ntitles are designated, as being those of Invariant Sections, in the\nnotice that says that the Document is released under this License.\nIf a section does not fit the above definition of Secondary then it\nis not allowed to be designated as Invariant.  The Document may\ncontain zero Invariant Sections.  If the Document does not identify\nany Invariant Sections then there are none.\n</p>\n<p>The \u201cCover Texts\u201d are certain short passages of text that are\nlisted, as Front-Cover Texts or Back-Cover Texts, in the notice\nthat says that the Document is released under this License.\nA Front-Cover Text may be at most 5 words, and a Back-Cover Text\nmay be at most 25 words.\n</p>\n<p>A \u201cTransparent\u201d copy of the Document means a machine-readable copy,\nrepresented in a format whose specification is available to the\ngeneral public, that is suitable for revising the document\nstraightforwardly with generic text editors or (for images composed\nof pixels) generic paint programs or (for drawings) some widely\navailable drawing editor, and that is suitable for input to text\nformatters or for automatic translation to a variety of formats\nsuitable for input to text formatters.  A copy made in an otherwise\nTransparent file format whose markup, or absence of markup, has\nbeen arranged to thwart or discourage subsequent modification by\nreaders is not Transparent.  An image format is not Transparent if\nused for any substantial amount of text.  A copy that is not\n\u201cTransparent\u201d is called \u201cOpaque\u201d.\n</p>\n<p>Examples of suitable formats for Transparent copies include plain\nASCII without markup, Texinfo input format, LaTeX input format,\nSGML or XML using a publicly available DTD, and standard-conforming\nsimple HTML, PostScript or PDF designed for human modification.\nExamples of transparent image formats include PNG, XCF and JPG.\nOpaque formats include proprietary formats that can be read and\nedited only by proprietary word processors, SGML or XML for which\nthe DTD and/or processing tools are not generally available, and\nthe machine-generated HTML, PostScript or PDF produced by some word\nprocessors for output purposes only.\n</p>\n<p>The \u201cTitle Page\u201d means, for a printed book, the title page itself,\nplus such following pages as are needed to hold, legibly, the\nmaterial this License requires to appear in the title page.  For\nworks in formats which do not have any title page as such, \u201cTitle\nPage\u201d means the text near the most prominent appearance of the\nwork\u2019s title, preceding the beginning of the body of the text.\n</p>\n<p>The \u201cpublisher\u201d means any person or entity that distributes copies\nof the Document to the public.\n</p>\n<p>A section \u201cEntitled XYZ\u201d means a named subunit of the Document\nwhose title either is precisely XYZ or contains XYZ in parentheses\nfollowing text that translates XYZ in another language.  (Here XYZ\nstands for a specific section name mentioned below, such as\n\u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.)\nTo \u201cPreserve the Title\u201d of such a section when you modify the\nDocument means that it remains a section \u201cEntitled XYZ\u201d according\nto this definition.\n</p>\n<p>The Document may include Warranty Disclaimers next to the notice\nwhich states that this License applies to the Document.  These\nWarranty Disclaimers are considered to be included by reference in\nthis License, but only as regards disclaiming warranties: any other\nimplication that these Warranty Disclaimers may have is void and\nhas no effect on the meaning of this License.\n</p>\n</li><li> VERBATIM COPYING\n\n<p>You may copy and distribute the Document in any medium, either\ncommercially or noncommercially, provided that this License, the\ncopyright notices, and the license notice saying this License\napplies to the Document are reproduced in all copies, and that you\nadd no other conditions whatsoever to those of this License.  You\nmay not use technical measures to obstruct or control the reading\nor further copying of the copies you make or distribute.  However,\nyou may accept compensation in exchange for copies.  If you\ndistribute a large enough number of copies you must also follow the\nconditions in section 3.\n</p>\n<p>You may also lend copies, under the same conditions stated above,\nand you may publicly display copies.\n</p>\n</li><li> COPYING IN QUANTITY\n\n<p>If you publish printed copies (or copies in media that commonly\nhave printed covers) of the Document, numbering more than 100, and\nthe Document\u2019s license notice requires Cover Texts, you must\nenclose the copies in covers that carry, clearly and legibly, all\nthese Cover Texts: Front-Cover Texts on the front cover, and\nBack-Cover Texts on the back cover.  Both covers must also clearly\nand legibly identify you as the publisher of these copies.  The\nfront cover must present the full title with all words of the title\nequally prominent and visible.  You may add other material on the\ncovers in addition.  Copying with changes limited to the covers, as\nlong as they preserve the title of the Document and satisfy these\nconditions, can be treated as verbatim copying in other respects.\n</p>\n<p>If the required texts for either cover are too voluminous to fit\nlegibly, you should put the first ones listed (as many as fit\nreasonably) on the actual cover, and continue the rest onto\nadjacent pages.\n</p>\n<p>If you publish or distribute Opaque copies of the Document\nnumbering more than 100, you must either include a machine-readable\nTransparent copy along with each Opaque copy, or state in or with\neach Opaque copy a computer-network location from which the general\nnetwork-using public has access to download using public-standard\nnetwork protocols a complete Transparent copy of the Document, free\nof added material.  If you use the latter option, you must take\nreasonably prudent steps, when you begin distribution of Opaque\ncopies in quantity, to ensure that this Transparent copy will\nremain thus accessible at the stated location until at least one\nyear after the last time you distribute an Opaque copy (directly or\nthrough your agents or retailers) of that edition to the public.\n</p>\n<p>It is requested, but not required, that you contact the authors of\nthe Document well before redistributing any large number of copies,\nto give them a chance to provide you with an updated version of the\nDocument.\n</p>\n</li><li> MODIFICATIONS\n\n<p>You may copy and distribute a Modified Version of the Document\nunder the conditions of sections 2 and 3 above, provided that you\nrelease the Modified Version under precisely this License, with the\nModified Version filling the role of the Document, thus licensing\ndistribution and modification of the Modified Version to whoever\npossesses a copy of it.  In addition, you must do these things in\nthe Modified Version:\n</p>\n<ol type=\"A\" start=\"1\">\n<li> Use in the Title Page (and on the covers, if any) a title\ndistinct from that of the Document, and from those of previous\nversions (which should, if there were any, be listed in the\nHistory section of the Document). You may use the same title as\na previous version if the original publisher of that version\ngives permission.\n\n</li><li> List on the Title Page, as authors, one or more persons or\nentities responsible for authorship of the modifications in the\nModified Version, together with at least five of the principal\nauthors of the Document (all of its principal authors, if it has\nfewer than five), unless they release you from this requirement.\n\n</li><li> State on the Title page the name of the publisher of the\nModified Version, as the publisher.\n\n</li><li> Preserve all the copyright notices of the Document.\n\n</li><li> Add an appropriate copyright notice for your modifications\nadjacent to the other copyright notices.\n\n</li><li> Include, immediately after the copyright notices, a license\nnotice giving the public permission to use the Modified Version\nunder the terms of this License, in the form shown in the\nAddendum below.\n\n</li><li> Preserve in that license notice the full lists of Invariant\nSections and required Cover Texts given in the Document\u2019s\nlicense notice.\n\n</li><li> Include an unaltered copy of this License.\n\n</li><li> Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and\nadd to it an item stating at least the title, year, new authors,\nand publisher of the Modified Version as given on the Title\nPage. If there is no section Entitled \u201cHistory\u201d in the Document,\ncreate one stating the title, year, authors, and publisher of\nthe Document as given on its Title Page, then add an item\ndescribing the Modified Version as stated in the previous\nsentence.\n\n</li><li> Preserve the network location, if any, given in the Document\nfor public access to a Transparent copy of the Document, and\nlikewise the network locations given in the Document for\nprevious versions it was based on. These may be placed in the\n\u201cHistory\u201d section. You may omit a network location for a work\nthat was published at least four years before the Document\nitself, or if the original publisher of the version it refers\nto gives permission.\n\n</li><li> For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d,\nPreserve the Title of the section, and preserve in the section\nall the substance and tone of each of the contributor\nacknowledgements and/or dedications given therein.\n\n</li><li> Preserve all the Invariant Sections of the Document, unaltered\nin their text and in their titles. Section numbers or the\nequivalent are not considered part of the section titles.\n\n</li><li> Delete any section Entitled \u201cEndorsements\u201d. Such a section may\nnot be included in the Modified Version.\n\n</li><li> Do not retitle any existing section to be Entitled\n\u201cEndorsements\u201d or to conflict in title with any Invariant\nSection.\n\n</li><li> Preserve any Warranty Disclaimers.\n</li></ol>\n\n<p>If the Modified Version includes new front-matter sections or\nappendices that qualify as Secondary Sections and contain no material\ncopied from the Document, you may at your option designate some or all\nof these sections as invariant.  To do this, add their titles to the\nlist of Invariant Sections in the Modified Version\u2019s license notice.\nThese titles must be distinct from any other section titles.\n</p>\n<p>You may add a section Entitled \u201cEndorsements\u201d, provided it contains\nnothing but endorsements of your Modified Version by various\nparties\u2014for example, statements of peer review or that the text has\nbeen approved by an organization as the authoritative definition of a\nstandard.\n</p>\n<p>You may add a passage of up to five words as a Front-Cover Text, and a\npassage of up to 25 words as a Back-Cover Text, to the end of the list\nof Cover Texts in the Modified Version.  Only one passage of\nFront-Cover Text and one of Back-Cover Text may be added by (or\nthrough arrangements made by) any one entity.  If the Document already\nincludes a cover text for the same cover, previously added by you or\nby arrangement made by the same entity you are acting on behalf of,\nyou may not add another; but you may replace the old one, on explicit\npermission from the previous publisher that added the old one.\n</p>\n<p>The author(s) and publisher(s) of the Document do not by this License\ngive permission to use their names for publicity for or to assert or\nimply endorsement of any Modified Version.\n</p>\n</li><li> COMBINING DOCUMENTS\n\n<p>You may combine the Document with other documents released under\nthis License, under the terms defined in section 4 above for\nmodified versions, provided that you include in the combination all\nof the Invariant Sections of all of the original documents,\nunmodified, and list them all as Invariant Sections of your\ncombined work in its license notice, and that you preserve all\ntheir Warranty Disclaimers.\n</p>\n<p>The combined work need only contain one copy of this License, and\nmultiple identical Invariant Sections may be replaced with a single\ncopy.  If there are multiple Invariant Sections with the same name\nbut different contents, make the title of each such section unique\nby adding at the end of it, in parentheses, the name of the\noriginal author or publisher of that section if known, or else\na unique number.  Make the same adjustment to the section titles in\nthe list of Invariant Sections in the license notice of the\ncombined work.\n</p>\n<p>In the combination, you must combine any sections Entitled\n\u201cHistory\u201d in the various original documents, forming one section\nEntitled \u201cHistory\u201d; likewise combine any sections Entitled\n\u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d.  You\nmust delete all sections Entitled \u201cEndorsements.\u201d\n</p>\n</li><li> COLLECTIONS OF DOCUMENTS\n\n<p>You may make a collection consisting of the Document and other\ndocuments released under this License, and replace the individual\ncopies of this License in the various documents with a single copy\nthat is included in the collection, provided that you follow the\nrules of this License for verbatim copying of each of the documents\nin all other respects.\n</p>\n<p>You may extract a single document from such a collection, and\ndistribute it individually under this License, provided you insert\na copy of this License into the extracted document, and follow this\nLicense in all other respects regarding verbatim copying of that\ndocument.\n</p>\n</li><li> AGGREGATION WITH INDEPENDENT WORKS\n\n<p>A compilation of the Document or its derivatives with other\nseparate and independent documents or works, in or on a volume of\na storage or distribution medium, is called an \u201caggregate\u201d if the\ncopyright resulting from the compilation is not used to limit the\nlegal rights of the compilation\u2019s users beyond what the individual\nworks permit.  When the Document is included in an aggregate, this\nLicense does not apply to the other works in the aggregate which\nare not themselves derivative works of the Document.\n</p>\n<p>If the Cover Text requirement of section 3 is applicable to these\ncopies of the Document, then if the Document is less than one half\nof the entire aggregate, the Document\u2019s Cover Texts may be placed\non covers that bracket the Document within the aggregate, or the\nelectronic equivalent of covers if the Document is in electronic\nform.  Otherwise they must appear on printed covers that bracket\nthe whole aggregate.\n</p>\n</li><li> TRANSLATION\n\n<p>Translation is considered a kind of modification, so you may\ndistribute translations of the Document under the terms of\nsection 4.  Replacing Invariant Sections with translations requires\nspecial permission from their copyright holders, but you may\ninclude translations of some or all Invariant Sections in addition\nto the original versions of these Invariant Sections.  You may\ninclude a translation of this License, and all the license notices\nin the Document, and any Warranty Disclaimers, provided that you\nalso include the original English version of this License and the\noriginal versions of those notices and disclaimers.  In case of\na disagreement between the translation and the original version of\nthis License or a notice or disclaimer, the original version will\nprevail.\n</p>\n<p>If a section in the Document is Entitled \u201cAcknowledgements\u201d,\n\u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to\nPreserve its Title (section 1) will typically require changing the\nactual title.\n</p>\n</li><li> TERMINATION\n\n<p>You may not copy, modify, sublicense, or distribute the Document\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense, or distribute it is void,\nand will automatically terminate your rights under this License.\n</p>\n<p>However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the\ncopyright holder fails to notify you of the violation by some\nreasonable means prior to 60 days after the cessation.\n</p>\n<p>Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from\nthat copyright holder, and you cure the violation prior to 30 days\nafter your receipt of the notice.\n</p>\n<p>Termination of your rights under this section does not terminate\nthe licenses of parties who have received copies or rights from you\nunder this License.  If your rights have been terminated and not\npermanently reinstated, receipt of a copy of some or all of the\nsame material does not give you any rights to use it.\n</p>\n</li><li> FUTURE REVISIONS OF THIS LICENSE\n\n<p>The Free Software Foundation may publish new, revised versions of\nthe GNU Free Documentation License from time to time.  Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.  See\n<a href=\"https://www.gnu.org/copyleft/\">https://www.gnu.org/copyleft/</a>.\n</p>\n<p>Each version of the License is given a distinguishing version\nnumber.  If the Document specifies that a particular numbered\nversion of this License \u201cor any later version\u201d applies to it, you\nhave the option of following the terms and conditions either of\nthat specified version or of any later version that has been\npublished (not as a draft) by the Free Software Foundation.  If\nthe Document does not specify a version number of this License,\nyou may choose any version ever published (not as a draft) by the\nFree Software Foundation.  If the Document specifies that a proxy\ncan decide which future versions of this License can be used, that\nproxy\u2019s public statement of acceptance of a version permanently\nauthorizes you to choose that version for the Document.\n</p>\n</li><li> RELICENSING\n\n<p>\u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any\nWorld Wide Web server that publishes copyrightable works and also\nprovides prominent facilities for anybody to edit those works.\nA public wiki that anybody can edit is an example of such\na server.  A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d)\ncontained in the site means any set of copyrightable works thus\npublished on the MMC site.\n</p>\n<p>\u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0\nlicense published by Creative Commons Corporation,\na not-for-profit corporation with a principal place of business in\nSan Francisco, California, as well as future copyleft versions of\nthat license published by that same organization.\n</p>\n<p>\u201cIncorporate\u201d means to publish or republish a Document, in whole\nor in part, as part of another Document.\n</p>\n<p>An MMC is \u201celigible for relicensing\u201d if it is licensed under this\nLicense, and if all works that were first published under this\nLicense somewhere other than this MMC, and subsequently\nincorporated in whole or in part into the MMC, (1) had no cover\ntexts or invariant sections, and (2) were thus incorporated prior\nto November 1, 2008.\n</p>\n<p>The operator of an MMC Site may republish an MMC contained in the\nsite under CC-BY-SA on the same site at any time before August 1,\n2009, provided the MMC is eligible for relicensing.\n</p></li></ol>\n\n\n<span id=\"ADDENDUM-How-to-use-this-License-for-your-documents\"></span><span id=\"ADDENDUM_003a-How-to-use-this-License-for-your-documents\"></span><h3 class=\"appendixsec\">C.1 ADDENDUM: How to use this License for your documents</h3>\n\n<p>To use this License in a document you have written, include a copy of\nthe License in the document and put the following copyright and\nlicense notices just after the title page:\n</p>\n<div class=\"example\">\n<pre class=\"example\">Copyright (C)  YEAR  YOUR NAME.\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, no Front-Cover Texts, and no Back-Cover\nTexts.  A copy of the license is included in the section entitled ``GNU\nFree Documentation License''.\n</pre></div>\n\n<p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\nreplace the \u201cwith\u2026Texts.\u201d&nbsp;line with this:\n</p>\n<div class=\"example\">\n<pre class=\"example\">with the Invariant Sections being LIST THEIR TITLES, with\nthe Front-Cover Texts being LIST, and with the Back-Cover Texts\nbeing LIST.\n</pre></div>\n\n<p>If you have Invariant Sections without Cover Texts, or some other\ncombination of the three, merge those two alternatives to suit the\nsituation.\n</p>\n<p>If your document contains nontrivial examples of program code, we\nrecommend releasing these examples in parallel under your choice of\nfree software license, such as the GNU General Public License, to\npermit their use in free software.\n</p>\n"}]}